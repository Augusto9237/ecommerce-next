"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/index";
exports.ids = ["pages/index"];
exports.modules = {

/***/ "./components/BottomBar.tsx":
/*!**********************************!*\
  !*** ./components/BottomBar.tsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"BottomBar\": () => (/* binding */ BottomBar)\n/* harmony export */ });\n/* harmony import */ var react_icons_ri__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-icons/ri */ \"react-icons/ri\");\n/* harmony import */ var react_icons_ri__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_icons_ri__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__);\nvar _jsxFileName = \"C:\\\\Users\\\\augus\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Projects\\\\ecommerce-next\\\\ecommerce-next\\\\components\\\\BottomBar.tsx\";\n\n\nfunction BottomBar() {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"footer\", {\n    className: \"fixed bottom-0 bg-white flex w-full border-t border-gray-300 p-4 lg:hidden\",\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"div\", {\n      className: \"flex max-w-[1160px] w-full mx-auto justify-between px-2\",\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"button\", {\n        className: \"flex text-gray-600 text-2xl hover:text-blue-600\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(react_icons_ri__WEBPACK_IMPORTED_MODULE_0__.RiHome3Fill, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 8,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 17\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"button\", {\n        className: \"flex text-gray-600 text-2xl hover:text-blue-600\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(react_icons_ri__WEBPACK_IMPORTED_MODULE_0__.RiSearchFill, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"button\", {\n        className: \"flex text-gray-600 text-2xl hover:text-blue-600\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(react_icons_ri__WEBPACK_IMPORTED_MODULE_0__.RiShoppingCartFill, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(\"button\", {\n        className: \"flex text-gray-600 text-2xl hover:text-blue-600\",\n        children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxDEV)(react_icons_ri__WEBPACK_IMPORTED_MODULE_0__.RiUser3Fill, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0JvdHRvbUJhci50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRU8sU0FBU0ksU0FBVCxHQUFxQjtFQUN4QixvQkFDSTtJQUFRLFNBQVMsRUFBQyw0RUFBbEI7SUFBQSx1QkFDSTtNQUFLLFNBQVMsRUFBQyx5REFBZjtNQUFBLHdCQUNJO1FBQVEsU0FBUyxFQUFDLGlEQUFsQjtRQUFBLHVCQUNJLDhEQUFDLHVEQUFEO1VBQUE7VUFBQTtVQUFBO1FBQUE7TUFESjtRQUFBO1FBQUE7UUFBQTtNQUFBLFFBREosZUFLSTtRQUFRLFNBQVMsRUFBQyxpREFBbEI7UUFBQSx1QkFDSSw4REFBQyx3REFBRDtVQUFBO1VBQUE7VUFBQTtRQUFBO01BREo7UUFBQTtRQUFBO1FBQUE7TUFBQSxRQUxKLGVBU0k7UUFBUSxTQUFTLEVBQUMsaURBQWxCO1FBQUEsdUJBQ0ksOERBQUMsOERBQUQ7VUFBQTtVQUFBO1VBQUE7UUFBQTtNQURKO1FBQUE7UUFBQTtRQUFBO01BQUEsUUFUSixlQWFJO1FBQVEsU0FBUyxFQUFDLGlEQUFsQjtRQUFBLHVCQUNJLDhEQUFDLHVEQUFEO1VBQUE7VUFBQTtVQUFBO1FBQUE7TUFESjtRQUFBO1FBQUE7UUFBQTtNQUFBLFFBYko7SUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBO0VBREo7SUFBQTtJQUFBO0lBQUE7RUFBQSxRQURKO0FBcUJIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAvLi9jb21wb25lbnRzL0JvdHRvbUJhci50c3g/MzA3YSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSaUhvbWUzRmlsbCwgUmlTZWFyY2hGaWxsLCBSaVNob3BwaW5nQ2FydEZpbGwsIFJpVXNlcjNGaWxsIH0gZnJvbSBcInJlYWN0LWljb25zL3JpXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gQm90dG9tQmFyKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Zm9vdGVyIGNsYXNzTmFtZT1cImZpeGVkIGJvdHRvbS0wIGJnLXdoaXRlIGZsZXggdy1mdWxsIGJvcmRlci10IGJvcmRlci1ncmF5LTMwMCBwLTQgbGc6aGlkZGVuXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBtYXgtdy1bMTE2MHB4XSB3LWZ1bGwgbXgtYXV0byBqdXN0aWZ5LWJldHdlZW4gcHgtMlwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJmbGV4IHRleHQtZ3JheS02MDAgdGV4dC0yeGwgaG92ZXI6dGV4dC1ibHVlLTYwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSaUhvbWUzRmlsbCAvPlxyXG4gICAgICAgICAgICAgICAgPC9idXR0b24+XHJcblxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJmbGV4IHRleHQtZ3JheS02MDAgdGV4dC0yeGwgaG92ZXI6dGV4dC1ibHVlLTYwMFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSaVNlYXJjaEZpbGwgLz5cclxuICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZmxleCB0ZXh0LWdyYXktNjAwIHRleHQtMnhsIGhvdmVyOnRleHQtYmx1ZS02MDBcIj5cclxuICAgICAgICAgICAgICAgICAgICA8UmlTaG9wcGluZ0NhcnRGaWxsIC8+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuXHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cImZsZXggdGV4dC1ncmF5LTYwMCB0ZXh0LTJ4bCBob3Zlcjp0ZXh0LWJsdWUtNjAwXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJpVXNlcjNGaWxsIC8+XHJcbiAgICAgICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9mb290ZXI+XHJcbiAgICApO1xyXG59Il0sIm5hbWVzIjpbIlJpSG9tZTNGaWxsIiwiUmlTZWFyY2hGaWxsIiwiUmlTaG9wcGluZ0NhcnRGaWxsIiwiUmlVc2VyM0ZpbGwiLCJCb3R0b21CYXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/BottomBar.tsx\n");

/***/ }),

/***/ "./components/CardProduct.tsx":
/*!************************************!*\
  !*** ./components/CardProduct.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CardProduct\": () => (/* binding */ CardProduct)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\nvar _jsxFileName = \"C:\\\\Users\\\\augus\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Projects\\\\ecommerce-next\\\\ecommerce-next\\\\components\\\\CardProduct.tsx\";\n\nfunction CardProduct({\n  title,\n  urlImg\n}) {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n    className: \"bg-white flex flex-col justify-center items-center rounded-md p-2 object-cover\",\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"img\", {\n      src: urlImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 13\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 13\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n      children: \"R$ 1.000,00\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 13\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n      className: \"bg-blue-500 p-2 w-full rounded my-2 hover:bg-blue-600\",\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n        className: \"text-white font-semibold\",\n        children: \"Comprar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 9\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0NhcmRQcm9kdWN0LnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPLFNBQVNBLFdBQVQsQ0FBcUI7RUFBQ0MsS0FBRDtFQUFRQztBQUFSLENBQXJCLEVBQXNDO0VBQ3pDLG9CQUNJO0lBQUssU0FBUyxFQUFDLGdGQUFmO0lBQUEsd0JBQ0k7TUFBSyxHQUFHLEVBQUVBO0lBQVY7TUFBQTtNQUFBO01BQUE7SUFBQSxRQURKLGVBRUk7TUFBQSxVQUFTRDtJQUFUO01BQUE7TUFBQTtNQUFBO0lBQUEsUUFGSixlQUdJO01BQUE7SUFBQTtNQUFBO01BQUE7TUFBQTtJQUFBLFFBSEosZUFJSTtNQUFRLFNBQVMsRUFBQyx1REFBbEI7TUFBQSx1QkFDSTtRQUFNLFNBQVMsRUFBQywwQkFBaEI7UUFBQTtNQUFBO1FBQUE7UUFBQTtRQUFBO01BQUE7SUFESjtNQUFBO01BQUE7TUFBQTtJQUFBLFFBSko7RUFBQTtJQUFBO0lBQUE7SUFBQTtFQUFBLFFBREo7QUFVSCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLy4vY29tcG9uZW50cy9DYXJkUHJvZHVjdC50c3g/M2I3OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gQ2FyZFByb2R1Y3Qoe3RpdGxlLCB1cmxJbWd9KSB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYmctd2hpdGUgZmxleCBmbGV4LWNvbCBqdXN0aWZ5LWNlbnRlciBpdGVtcy1jZW50ZXIgcm91bmRlZC1tZCBwLTIgb2JqZWN0LWNvdmVyXCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPXt1cmxJbWd9IC8+XHJcbiAgICAgICAgICAgIDxzdHJvbmc+e3RpdGxlfTwvc3Ryb25nPlxyXG4gICAgICAgICAgICA8c3Bhbj5SJCAxLjAwMCwwMDwvc3Bhbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiBjbGFzc05hbWU9XCJiZy1ibHVlLTUwMCBwLTIgdy1mdWxsIHJvdW5kZWQgbXktMiBob3ZlcjpiZy1ibHVlLTYwMFwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwidGV4dC13aGl0ZSBmb250LXNlbWlib2xkXCI+Q29tcHJhcjwvc3Bhbj5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn0iXSwibmFtZXMiOlsiQ2FyZFByb2R1Y3QiLCJ0aXRsZSIsInVybEltZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/CardProduct.tsx\n");

/***/ }),

/***/ "./components/Container.tsx":
/*!**********************************!*\
  !*** ./components/Container.tsx ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Container\": () => (/* binding */ Container)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\nvar _jsxFileName = \"C:\\\\Users\\\\augus\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Projects\\\\ecommerce-next\\\\ecommerce-next\\\\components\\\\Container.tsx\";\n\nfunction Container({\n  children\n}) {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"main\", {\n    className: \"max-w-[1160px] h-fit flex-1 mx-auto py-3 pb-3 max-sm:px-2 overflow-y-auto max-sm:mb-14\",\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0NvbnRhaW5lci50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFNTyxTQUFTQSxTQUFULENBQW1CO0VBQUNDO0FBQUQsQ0FBbkIsRUFBK0M7RUFDbEQsb0JBQ0k7SUFBTSxTQUFTLEVBQUMsd0ZBQWhCO0lBQUEsVUFDS0E7RUFETDtJQUFBO0lBQUE7SUFBQTtFQUFBLFFBREo7QUFLRCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLy4vY29tcG9uZW50cy9Db250YWluZXIudHN4PzkzMWUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVhY3ROb2RlIH0gZnJvbSBcInJlYWN0XCJcclxuXHJcbmludGVyZmFjZSBDb250YWluZXJQcm9wcyB7XHJcbiAgICBjaGlsZHJlbjogUmVhY3ROb2RlXHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBDb250YWluZXIoe2NoaWxkcmVufTogQ29udGFpbmVyUHJvcHMpIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPG1haW4gY2xhc3NOYW1lPVwibWF4LXctWzExNjBweF0gaC1maXQgZmxleC0xIG14LWF1dG8gcHktMyBwYi0zIG1heC1zbTpweC0yIG92ZXJmbG93LXktYXV0byBtYXgtc206bWItMTRcIj5cclxuICAgICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICAgIDwvbWFpbj5cclxuICAgIClcclxuICB9XHJcbiAgIl0sIm5hbWVzIjpbIkNvbnRhaW5lciIsImNoaWxkcmVuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./components/Container.tsx\n");

/***/ }),

/***/ "./components/Header.tsx":
/*!*******************************!*\
  !*** ./components/Header.tsx ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Header\": () => (/* binding */ Header)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\nvar _jsxFileName = \"C:\\\\Users\\\\augus\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Projects\\\\ecommerce-next\\\\ecommerce-next\\\\components\\\\Header.tsx\";\n\nfunction Header() {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"header\", {\n    className: \"bg-white flex justify-center max-sm:p-3 p-8 shadow-[0_25px_64px_-40px_rgba(0,0,0,0.2)]\",\n    children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n      className: \"flex w-full max-sm:flex-col max-sm:gap-1 justify-between gap-6 items-center max-w-[1160px]\",\n      children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"strong\", {\n        className: \"font-bold text-2xl leading-relaxed text-blue-600\",\n        children: \"Cosmo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"max-sm:hidden flex flex-1 justify-around gap-4 items-center\",\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n          className: \"text-gray-700 text-lg \",\n          children: \"Sales\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n          className: \"text-gray-700 text-lg\",\n          children: \"Hoodie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n          className: \"text-gray-700 text-lg\",\n          children: \"Fashion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"flex flex-1 max-sm:gap-4 w-full gap-8\",\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n          type: \"text\",\n          placeholder: \"Search\",\n          className: \"flex flex-1 max-w-[600px] border border-gray-400 rounded-lg p-1\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n          className: \"flex p-1 rounded-lg border border-gray-400 gap-1\",\n          children: [\"\\uD83D\\uDED2 \", /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n            children: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 16\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n          className: \"flex p-1 px-1.5 rounded-full bg-gray-300\",\n          children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n            children: \"\\uD83D\\uDE4E\\u200D\\u2642\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"max-sm:flex sm:hidden gap-6 items-center\",\n        children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n          className: \"text-gray-700 text-lg \",\n          children: \"Sales\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n          className: \"text-gray-700 text-lg\",\n          children: \"Hoodie\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n          className: \"text-gray-700 text-lg\",\n          children: \"Fashion\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 3,\n    columnNumber: 5\n  }, this);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL0hlYWRlci50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBTyxTQUFTQSxNQUFULEdBQWtCO0VBQ3ZCLG9CQUNFO0lBQVEsU0FBUyxFQUFDLHdGQUFsQjtJQUFBLHVCQUVFO01BQUssU0FBUyxFQUFDLDRGQUFmO01BQUEsd0JBRUU7UUFBUSxTQUFTLEVBQUMsa0RBQWxCO1FBQUE7TUFBQTtRQUFBO1FBQUE7UUFBQTtNQUFBLFFBRkYsZUFNRTtRQUFLLFNBQVMsRUFBQyw2REFBZjtRQUFBLHdCQUNFO1VBQU0sU0FBUyxFQUFDLHdCQUFoQjtVQUFBO1FBQUE7VUFBQTtVQUFBO1VBQUE7UUFBQSxRQURGLGVBSUU7VUFBTSxTQUFTLEVBQUMsdUJBQWhCO1VBQUE7UUFBQTtVQUFBO1VBQUE7VUFBQTtRQUFBLFFBSkYsZUFPRTtVQUFNLFNBQVMsRUFBQyx1QkFBaEI7VUFBQTtRQUFBO1VBQUE7VUFBQTtVQUFBO1FBQUEsUUFQRjtNQUFBO1FBQUE7UUFBQTtRQUFBO01BQUEsUUFORixlQWtCRTtRQUFLLFNBQVMsRUFBQyx1Q0FBZjtRQUFBLHdCQUNFO1VBQU8sSUFBSSxFQUFDLE1BQVo7VUFBbUIsV0FBVyxFQUFDLFFBQS9CO1VBQXdDLFNBQVMsRUFBQztRQUFsRDtVQUFBO1VBQUE7VUFBQTtRQUFBLFFBREYsZUFHRTtVQUFRLFNBQVMsRUFBQyxrREFBbEI7VUFBQSx5Q0FDSztZQUFBO1VBQUE7WUFBQTtZQUFBO1lBQUE7VUFBQSxRQURMO1FBQUE7VUFBQTtVQUFBO1VBQUE7UUFBQSxRQUhGLGVBT0U7VUFBSyxTQUFTLEVBQUMsMENBQWY7VUFBQSx1QkFDRTtZQUFBO1VBQUE7WUFBQTtZQUFBO1lBQUE7VUFBQTtRQURGO1VBQUE7VUFBQTtVQUFBO1FBQUEsUUFQRjtNQUFBO1FBQUE7UUFBQTtRQUFBO01BQUEsUUFsQkYsZUFnQ0U7UUFBSyxTQUFTLEVBQUMsMENBQWY7UUFBQSx3QkFDRTtVQUFNLFNBQVMsRUFBQyx3QkFBaEI7VUFBQTtRQUFBO1VBQUE7VUFBQTtVQUFBO1FBQUEsUUFERixlQUlFO1VBQU0sU0FBUyxFQUFDLHVCQUFoQjtVQUFBO1FBQUE7VUFBQTtVQUFBO1VBQUE7UUFBQSxRQUpGLGVBT0U7VUFBTSxTQUFTLEVBQUMsdUJBQWhCO1VBQUE7UUFBQTtVQUFBO1VBQUE7VUFBQTtRQUFBLFFBUEY7TUFBQTtRQUFBO1FBQUE7UUFBQTtNQUFBLFFBaENGO0lBQUE7TUFBQTtNQUFBO01BQUE7SUFBQTtFQUZGO0lBQUE7SUFBQTtJQUFBO0VBQUEsUUFERjtBQWtERCIsInNvdXJjZXMiOlsid2VicGFjazovL25leHQtYXBwLy4vY29tcG9uZW50cy9IZWFkZXIudHN4PzAzNjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIEhlYWRlcigpIHtcclxuICByZXR1cm4gKFxyXG4gICAgPGhlYWRlciBjbGFzc05hbWU9XCJiZy13aGl0ZSBmbGV4IGp1c3RpZnktY2VudGVyIG1heC1zbTpwLTMgcC04IHNoYWRvdy1bMF8yNXB4XzY0cHhfLTQwcHhfcmdiYSgwLDAsMCwwLjIpXVwiPlxyXG5cclxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJmbGV4IHctZnVsbCBtYXgtc206ZmxleC1jb2wgbWF4LXNtOmdhcC0xIGp1c3RpZnktYmV0d2VlbiBnYXAtNiBpdGVtcy1jZW50ZXIgbWF4LXctWzExNjBweF1cIj5cclxuXHJcbiAgICAgICAgPHN0cm9uZyBjbGFzc05hbWU9XCJmb250LWJvbGQgdGV4dC0yeGwgbGVhZGluZy1yZWxheGVkIHRleHQtYmx1ZS02MDBcIj5cclxuICAgICAgICAgIENvc21vXHJcbiAgICAgICAgPC9zdHJvbmc+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibWF4LXNtOmhpZGRlbiBmbGV4IGZsZXgtMSBqdXN0aWZ5LWFyb3VuZCBnYXAtNCBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS03MDAgdGV4dC1sZyBcIj5cclxuICAgICAgICAgICAgU2FsZXNcclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS03MDAgdGV4dC1sZ1wiPlxyXG4gICAgICAgICAgICBIb29kaWVcclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS03MDAgdGV4dC1sZ1wiPlxyXG4gICAgICAgICAgICBGYXNoaW9uXHJcbiAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBmbGV4LTEgbWF4LXNtOmdhcC00IHctZnVsbCBnYXAtOFwiPlxyXG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJTZWFyY2hcIiBjbGFzc05hbWU9XCJmbGV4IGZsZXgtMSBtYXgtdy1bNjAwcHhdIGJvcmRlciBib3JkZXItZ3JheS00MDAgcm91bmRlZC1sZyBwLTFcIiAvPlxyXG5cclxuICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiZmxleCBwLTEgcm91bmRlZC1sZyBib3JkZXIgYm9yZGVyLWdyYXktNDAwIGdhcC0xXCI+XHJcbiAgICAgICAgICAgIPCfm5IgPHNwYW4+MDwvc3Bhbj5cclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG5cclxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZmxleCBwLTEgcHgtMS41IHJvdW5kZWQtZnVsbCBiZy1ncmF5LTMwMFwiPlxyXG4gICAgICAgICAgICA8c3Bhbj5cclxuICAgICAgICAgICAgICDwn5mO4oCN4pmC77iPXHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cIm1heC1zbTpmbGV4IHNtOmhpZGRlbiBnYXAtNiBpdGVtcy1jZW50ZXJcIj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS03MDAgdGV4dC1sZyBcIj5cclxuICAgICAgICAgICAgU2FsZXNcclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS03MDAgdGV4dC1sZ1wiPlxyXG4gICAgICAgICAgICBIb29kaWVcclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzTmFtZT1cInRleHQtZ3JheS03MDAgdGV4dC1sZ1wiPlxyXG4gICAgICAgICAgICBGYXNoaW9uXHJcbiAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvaGVhZGVyPlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkhlYWRlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./components/Header.tsx\n");

/***/ }),

/***/ "./components/ProductList.tsx":
/*!************************************!*\
  !*** ./components/ProductList.tsx ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"ProductList\": () => (/* binding */ ProductList)\n/* harmony export */ });\n/* harmony import */ var _saleor_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../saleor/api */ \"./saleor/api.ts\");\n/* harmony import */ var _CardProduct__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CardProduct */ \"./components/CardProduct.tsx\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__);\nvar _jsxFileName = \"C:\\\\Users\\\\augus\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Projects\\\\ecommerce-next\\\\ecommerce-next\\\\components\\\\ProductList.tsx\";\n\n\n\nfunction ProductList() {\n  const {\n    data,\n    loading,\n    error\n  } = (0,_saleor_api__WEBPACK_IMPORTED_MODULE_0__.useProductGetThreeElementsQuery)();\n  if (loading) return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"div\", {\n    children: [\"Error!\", error.message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 21\n  }, this);\n\n  if (data) {\n    const latestProducts = data.products.edges || [];\n    return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(\"div\", {\n      className: \"grid grid-cols-2 md:grid-cols-4 gap-4\",\n      children: latestProducts.map(product => /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_2__.jsxDEV)(_CardProduct__WEBPACK_IMPORTED_MODULE_1__.CardProduct, {\n        title: product.node.name,\n        urlImg: product.node.thumbnail.url\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this);\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9jb21wb25lbnRzL1Byb2R1Y3RMaXN0LnRzeC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTtBQUNBOztBQUVPLFNBQVNFLFdBQVQsR0FBdUI7RUFDNUIsTUFBTTtJQUFFQyxJQUFGO0lBQVFDLE9BQVI7SUFBaUJDO0VBQWpCLElBQTJCTCw0RUFBK0IsRUFBaEU7RUFFQSxJQUFJSSxPQUFKLEVBQWEsb0JBQU87SUFBQTtFQUFBO0lBQUE7SUFBQTtJQUFBO0VBQUEsUUFBUDtFQUNiLElBQUlDLEtBQUosRUFBVyxvQkFBTztJQUFBLHFCQUFZQSxLQUFLLENBQUNDLE9BQWxCO0VBQUE7SUFBQTtJQUFBO0lBQUE7RUFBQSxRQUFQOztFQUVYLElBQUlILElBQUosRUFBVTtJQUNSLE1BQU1JLGNBQWMsR0FBR0osSUFBSSxDQUFDSyxRQUFMLENBQWNDLEtBQWQsSUFBdUIsRUFBOUM7SUFFQSxvQkFDRTtNQUFLLFNBQVMsRUFBQyx1Q0FBZjtNQUFBLFVBQ0dGLGNBQWMsQ0FBQ0csR0FBZixDQUFvQkMsT0FBRCxpQkFDbEIsOERBQUMscURBQUQ7UUFBYSxLQUFLLEVBQUVBLE9BQU8sQ0FBQ0MsSUFBUixDQUFhQyxJQUFqQztRQUF1QyxNQUFNLEVBQUVGLE9BQU8sQ0FBQ0MsSUFBUixDQUFhRSxTQUFiLENBQXVCQztNQUF0RTtRQUFBO1FBQUE7UUFBQTtNQUFBLFFBREQ7SUFESDtNQUFBO01BQUE7TUFBQTtJQUFBLFFBREY7RUFRRDtBQUVGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dC1hcHAvLi9jb21wb25lbnRzL1Byb2R1Y3RMaXN0LnRzeD83OTNjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVByb2R1Y3RHZXRUaHJlZUVsZW1lbnRzUXVlcnkgfSBmcm9tIFwiLi4vc2FsZW9yL2FwaVwiO1xyXG5pbXBvcnQgeyBDYXJkUHJvZHVjdCB9IGZyb20gXCIuL0NhcmRQcm9kdWN0XCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gUHJvZHVjdExpc3QoKSB7XHJcbiAgY29uc3QgeyBkYXRhLCBsb2FkaW5nLCBlcnJvciB9ID0gdXNlUHJvZHVjdEdldFRocmVlRWxlbWVudHNRdWVyeSgpO1xyXG4gIFxyXG4gIGlmIChsb2FkaW5nKSByZXR1cm4gPGRpdj5Mb2FkaW5nLi4uPC9kaXY+XHJcbiAgaWYgKGVycm9yKSByZXR1cm4gPGRpdj5FcnJvciF7ZXJyb3IubWVzc2FnZX08L2Rpdj5cclxuXHJcbiAgaWYgKGRhdGEpIHtcclxuICAgIGNvbnN0IGxhdGVzdFByb2R1Y3RzID0gZGF0YS5wcm9kdWN0cy5lZGdlcyB8fCBbXTtcclxuICAgXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImdyaWQgZ3JpZC1jb2xzLTIgbWQ6Z3JpZC1jb2xzLTQgZ2FwLTRcIj5cclxuICAgICAgICB7bGF0ZXN0UHJvZHVjdHMubWFwKChwcm9kdWN0KSA9PiAoXHJcbiAgICAgICAgICA8Q2FyZFByb2R1Y3QgdGl0bGU9e3Byb2R1Y3Qubm9kZS5uYW1lfSB1cmxJbWc9e3Byb2R1Y3Qubm9kZS50aHVtYm5haWwudXJsfSAvPlxyXG4gICAgICAgICkpfVxyXG4gICAgICA8L2Rpdj5cclxuICAgICk7XHJcblxyXG4gIH1cclxuXHJcbn1cclxuIl0sIm5hbWVzIjpbInVzZVByb2R1Y3RHZXRUaHJlZUVsZW1lbnRzUXVlcnkiLCJDYXJkUHJvZHVjdCIsIlByb2R1Y3RMaXN0IiwiZGF0YSIsImxvYWRpbmciLCJlcnJvciIsIm1lc3NhZ2UiLCJsYXRlc3RQcm9kdWN0cyIsInByb2R1Y3RzIiwiZWRnZXMiLCJtYXAiLCJwcm9kdWN0Iiwibm9kZSIsIm5hbWUiLCJ0aHVtYm5haWwiLCJ1cmwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./components/ProductList.tsx\n");

/***/ }),

/***/ "./pages/index.tsx":
/*!*************************!*\
  !*** ./pages/index.tsx ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Home)\n/* harmony export */ });\n/* harmony import */ var _components_BottomBar__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../components/BottomBar */ \"./components/BottomBar.tsx\");\n/* harmony import */ var _components_Container__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/Container */ \"./components/Container.tsx\");\n/* harmony import */ var _components_Header__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/Header */ \"./components/Header.tsx\");\n/* harmony import */ var _components_ProductList__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/ProductList */ \"./components/ProductList.tsx\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"react/jsx-dev-runtime\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__);\nvar _jsxFileName = \"C:\\\\Users\\\\augus\\\\OneDrive\\\\\\xC1rea de Trabalho\\\\Projects\\\\ecommerce-next\\\\ecommerce-next\\\\pages\\\\index.tsx\";\n\n\n\n\n\n\nfunction Home() {\n  return /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.Fragment, {\n    children: [/*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_components_Header__WEBPACK_IMPORTED_MODULE_2__.Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_components_Container__WEBPACK_IMPORTED_MODULE_1__.Container, {\n      children: /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_components_ProductList__WEBPACK_IMPORTED_MODULE_3__.ProductList, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/(0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_4__.jsxDEV)(_components_BottomBar__WEBPACK_IMPORTED_MODULE_0__.BottomBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9wYWdlcy9pbmRleC50c3guanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTs7O0FBRWUsU0FBU0ksSUFBVCxHQUFnQjtFQUM3QixvQkFDRTtJQUFBLHdCQUNFLDhEQUFDLHNEQUFEO01BQUE7TUFBQTtNQUFBO0lBQUEsUUFERixlQUVFLDhEQUFDLDREQUFEO01BQUEsdUJBQ0UsOERBQUMsZ0VBQUQ7UUFBQTtRQUFBO1FBQUE7TUFBQTtJQURGO01BQUE7TUFBQTtNQUFBO0lBQUEsUUFGRixlQUtFLDhEQUFDLDREQUFEO01BQUE7TUFBQTtNQUFBO0lBQUEsUUFMRjtFQUFBLGdCQURGO0FBU0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0LWFwcC8uL3BhZ2VzL2luZGV4LnRzeD8wN2ZmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvdHRvbUJhciB9IGZyb20gJy4uL2NvbXBvbmVudHMvQm90dG9tQmFyJztcclxuaW1wb3J0IHsgQ29udGFpbmVyIH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250YWluZXInO1xyXG5pbXBvcnQgeyBIZWFkZXIgfSBmcm9tICcuLi9jb21wb25lbnRzL0hlYWRlcic7XHJcbmltcG9ydCB7IFByb2R1Y3RMaXN0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Qcm9kdWN0TGlzdCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xyXG4gIHJldHVybiAoXHJcbiAgICA8PlxyXG4gICAgICA8SGVhZGVyIC8+XHJcbiAgICAgIDxDb250YWluZXI+XHJcbiAgICAgICAgPFByb2R1Y3RMaXN0IC8+XHJcbiAgICAgIDwvQ29udGFpbmVyPlxyXG4gICAgICA8Qm90dG9tQmFyLz5cclxuICAgIDwvPlxyXG4gICk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIkJvdHRvbUJhciIsIkNvbnRhaW5lciIsIkhlYWRlciIsIlByb2R1Y3RMaXN0IiwiSG9tZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./pages/index.tsx\n");

/***/ }),

/***/ "./saleor/api.ts":
/*!***********************!*\
  !*** ./saleor/api.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AccountErrorCode\": () => (/* binding */ AccountErrorCode),\n/* harmony export */   \"AddressTypeEnum\": () => (/* binding */ AddressTypeEnum),\n/* harmony export */   \"AllocationStrategyEnum\": () => (/* binding */ AllocationStrategyEnum),\n/* harmony export */   \"AppErrorCode\": () => (/* binding */ AppErrorCode),\n/* harmony export */   \"AppExtensionMountEnum\": () => (/* binding */ AppExtensionMountEnum),\n/* harmony export */   \"AppExtensionTargetEnum\": () => (/* binding */ AppExtensionTargetEnum),\n/* harmony export */   \"AppSortField\": () => (/* binding */ AppSortField),\n/* harmony export */   \"AppTypeEnum\": () => (/* binding */ AppTypeEnum),\n/* harmony export */   \"AreaUnitsEnum\": () => (/* binding */ AreaUnitsEnum),\n/* harmony export */   \"AttributeChoicesSortField\": () => (/* binding */ AttributeChoicesSortField),\n/* harmony export */   \"AttributeEntityTypeEnum\": () => (/* binding */ AttributeEntityTypeEnum),\n/* harmony export */   \"AttributeErrorCode\": () => (/* binding */ AttributeErrorCode),\n/* harmony export */   \"AttributeInputTypeEnum\": () => (/* binding */ AttributeInputTypeEnum),\n/* harmony export */   \"AttributeSortField\": () => (/* binding */ AttributeSortField),\n/* harmony export */   \"AttributeTypeEnum\": () => (/* binding */ AttributeTypeEnum),\n/* harmony export */   \"CategorySortField\": () => (/* binding */ CategorySortField),\n/* harmony export */   \"ChannelErrorCode\": () => (/* binding */ ChannelErrorCode),\n/* harmony export */   \"CheckoutErrorCode\": () => (/* binding */ CheckoutErrorCode),\n/* harmony export */   \"CheckoutSortField\": () => (/* binding */ CheckoutSortField),\n/* harmony export */   \"CollectionErrorCode\": () => (/* binding */ CollectionErrorCode),\n/* harmony export */   \"CollectionPublished\": () => (/* binding */ CollectionPublished),\n/* harmony export */   \"CollectionSortField\": () => (/* binding */ CollectionSortField),\n/* harmony export */   \"ConfigurationTypeFieldEnum\": () => (/* binding */ ConfigurationTypeFieldEnum),\n/* harmony export */   \"CountryCode\": () => (/* binding */ CountryCode),\n/* harmony export */   \"CustomerEventsEnum\": () => (/* binding */ CustomerEventsEnum),\n/* harmony export */   \"DiscountErrorCode\": () => (/* binding */ DiscountErrorCode),\n/* harmony export */   \"DiscountStatusEnum\": () => (/* binding */ DiscountStatusEnum),\n/* harmony export */   \"DiscountValueTypeEnum\": () => (/* binding */ DiscountValueTypeEnum),\n/* harmony export */   \"DistanceUnitsEnum\": () => (/* binding */ DistanceUnitsEnum),\n/* harmony export */   \"ErrorPolicyEnum\": () => (/* binding */ ErrorPolicyEnum),\n/* harmony export */   \"EventDeliveryAttemptSortField\": () => (/* binding */ EventDeliveryAttemptSortField),\n/* harmony export */   \"EventDeliverySortField\": () => (/* binding */ EventDeliverySortField),\n/* harmony export */   \"EventDeliveryStatusEnum\": () => (/* binding */ EventDeliveryStatusEnum),\n/* harmony export */   \"ExportErrorCode\": () => (/* binding */ ExportErrorCode),\n/* harmony export */   \"ExportEventsEnum\": () => (/* binding */ ExportEventsEnum),\n/* harmony export */   \"ExportFileSortField\": () => (/* binding */ ExportFileSortField),\n/* harmony export */   \"ExportScope\": () => (/* binding */ ExportScope),\n/* harmony export */   \"ExternalNotificationErrorCodes\": () => (/* binding */ ExternalNotificationErrorCodes),\n/* harmony export */   \"FileTypesEnum\": () => (/* binding */ FileTypesEnum),\n/* harmony export */   \"FulfillmentStatus\": () => (/* binding */ FulfillmentStatus),\n/* harmony export */   \"GiftCardErrorCode\": () => (/* binding */ GiftCardErrorCode),\n/* harmony export */   \"GiftCardEventsEnum\": () => (/* binding */ GiftCardEventsEnum),\n/* harmony export */   \"GiftCardSettingsErrorCode\": () => (/* binding */ GiftCardSettingsErrorCode),\n/* harmony export */   \"GiftCardSettingsExpiryTypeEnum\": () => (/* binding */ GiftCardSettingsExpiryTypeEnum),\n/* harmony export */   \"GiftCardSortField\": () => (/* binding */ GiftCardSortField),\n/* harmony export */   \"InvoiceErrorCode\": () => (/* binding */ InvoiceErrorCode),\n/* harmony export */   \"JobStatusEnum\": () => (/* binding */ JobStatusEnum),\n/* harmony export */   \"LanguageCodeEnum\": () => (/* binding */ LanguageCodeEnum),\n/* harmony export */   \"MeasurementUnitsEnum\": () => (/* binding */ MeasurementUnitsEnum),\n/* harmony export */   \"MediaChoicesSortField\": () => (/* binding */ MediaChoicesSortField),\n/* harmony export */   \"MenuErrorCode\": () => (/* binding */ MenuErrorCode),\n/* harmony export */   \"MenuItemsSortField\": () => (/* binding */ MenuItemsSortField),\n/* harmony export */   \"MenuSortField\": () => (/* binding */ MenuSortField),\n/* harmony export */   \"MetadataErrorCode\": () => (/* binding */ MetadataErrorCode),\n/* harmony export */   \"NavigationType\": () => (/* binding */ NavigationType),\n/* harmony export */   \"OrderAction\": () => (/* binding */ OrderAction),\n/* harmony export */   \"OrderAuthorizeStatusEnum\": () => (/* binding */ OrderAuthorizeStatusEnum),\n/* harmony export */   \"OrderChargeStatusEnum\": () => (/* binding */ OrderChargeStatusEnum),\n/* harmony export */   \"OrderCreateFromCheckoutErrorCode\": () => (/* binding */ OrderCreateFromCheckoutErrorCode),\n/* harmony export */   \"OrderDirection\": () => (/* binding */ OrderDirection),\n/* harmony export */   \"OrderDiscountType\": () => (/* binding */ OrderDiscountType),\n/* harmony export */   \"OrderErrorCode\": () => (/* binding */ OrderErrorCode),\n/* harmony export */   \"OrderEventsEmailsEnum\": () => (/* binding */ OrderEventsEmailsEnum),\n/* harmony export */   \"OrderEventsEnum\": () => (/* binding */ OrderEventsEnum),\n/* harmony export */   \"OrderOriginEnum\": () => (/* binding */ OrderOriginEnum),\n/* harmony export */   \"OrderSettingsErrorCode\": () => (/* binding */ OrderSettingsErrorCode),\n/* harmony export */   \"OrderSortField\": () => (/* binding */ OrderSortField),\n/* harmony export */   \"OrderStatus\": () => (/* binding */ OrderStatus),\n/* harmony export */   \"OrderStatusFilter\": () => (/* binding */ OrderStatusFilter),\n/* harmony export */   \"PageErrorCode\": () => (/* binding */ PageErrorCode),\n/* harmony export */   \"PageSortField\": () => (/* binding */ PageSortField),\n/* harmony export */   \"PageTypeSortField\": () => (/* binding */ PageTypeSortField),\n/* harmony export */   \"PaymentChargeStatusEnum\": () => (/* binding */ PaymentChargeStatusEnum),\n/* harmony export */   \"PaymentErrorCode\": () => (/* binding */ PaymentErrorCode),\n/* harmony export */   \"PermissionEnum\": () => (/* binding */ PermissionEnum),\n/* harmony export */   \"PermissionGroupErrorCode\": () => (/* binding */ PermissionGroupErrorCode),\n/* harmony export */   \"PermissionGroupSortField\": () => (/* binding */ PermissionGroupSortField),\n/* harmony export */   \"PluginConfigurationType\": () => (/* binding */ PluginConfigurationType),\n/* harmony export */   \"PluginErrorCode\": () => (/* binding */ PluginErrorCode),\n/* harmony export */   \"PluginSortField\": () => (/* binding */ PluginSortField),\n/* harmony export */   \"PostalCodeRuleInclusionTypeEnum\": () => (/* binding */ PostalCodeRuleInclusionTypeEnum),\n/* harmony export */   \"ProductAttributeType\": () => (/* binding */ ProductAttributeType),\n/* harmony export */   \"ProductErrorCode\": () => (/* binding */ ProductErrorCode),\n/* harmony export */   \"ProductFieldEnum\": () => (/* binding */ ProductFieldEnum),\n/* harmony export */   \"ProductGetThreeElementsDocument\": () => (/* binding */ ProductGetThreeElementsDocument),\n/* harmony export */   \"ProductMediaType\": () => (/* binding */ ProductMediaType),\n/* harmony export */   \"ProductOrderField\": () => (/* binding */ ProductOrderField),\n/* harmony export */   \"ProductTypeConfigurable\": () => (/* binding */ ProductTypeConfigurable),\n/* harmony export */   \"ProductTypeEnum\": () => (/* binding */ ProductTypeEnum),\n/* harmony export */   \"ProductTypeKindEnum\": () => (/* binding */ ProductTypeKindEnum),\n/* harmony export */   \"ProductTypeSortField\": () => (/* binding */ ProductTypeSortField),\n/* harmony export */   \"ProductVariantBulkErrorCode\": () => (/* binding */ ProductVariantBulkErrorCode),\n/* harmony export */   \"ProductVariantSortField\": () => (/* binding */ ProductVariantSortField),\n/* harmony export */   \"ReportingPeriod\": () => (/* binding */ ReportingPeriod),\n/* harmony export */   \"SaleSortField\": () => (/* binding */ SaleSortField),\n/* harmony export */   \"SaleType\": () => (/* binding */ SaleType),\n/* harmony export */   \"ShippingErrorCode\": () => (/* binding */ ShippingErrorCode),\n/* harmony export */   \"ShippingMethodTypeEnum\": () => (/* binding */ ShippingMethodTypeEnum),\n/* harmony export */   \"ShopErrorCode\": () => (/* binding */ ShopErrorCode),\n/* harmony export */   \"StaffMemberStatus\": () => (/* binding */ StaffMemberStatus),\n/* harmony export */   \"StockAvailability\": () => (/* binding */ StockAvailability),\n/* harmony export */   \"StockErrorCode\": () => (/* binding */ StockErrorCode),\n/* harmony export */   \"StorePaymentMethodEnum\": () => (/* binding */ StorePaymentMethodEnum),\n/* harmony export */   \"TaxCalculationStrategy\": () => (/* binding */ TaxCalculationStrategy),\n/* harmony export */   \"TaxClassCreateErrorCode\": () => (/* binding */ TaxClassCreateErrorCode),\n/* harmony export */   \"TaxClassDeleteErrorCode\": () => (/* binding */ TaxClassDeleteErrorCode),\n/* harmony export */   \"TaxClassSortField\": () => (/* binding */ TaxClassSortField),\n/* harmony export */   \"TaxClassUpdateErrorCode\": () => (/* binding */ TaxClassUpdateErrorCode),\n/* harmony export */   \"TaxConfigurationUpdateErrorCode\": () => (/* binding */ TaxConfigurationUpdateErrorCode),\n/* harmony export */   \"TaxCountryConfigurationDeleteErrorCode\": () => (/* binding */ TaxCountryConfigurationDeleteErrorCode),\n/* harmony export */   \"TaxCountryConfigurationUpdateErrorCode\": () => (/* binding */ TaxCountryConfigurationUpdateErrorCode),\n/* harmony export */   \"TaxExemptionManageErrorCode\": () => (/* binding */ TaxExemptionManageErrorCode),\n/* harmony export */   \"ThumbnailFormatEnum\": () => (/* binding */ ThumbnailFormatEnum),\n/* harmony export */   \"TimePeriodTypeEnum\": () => (/* binding */ TimePeriodTypeEnum),\n/* harmony export */   \"TransactionActionEnum\": () => (/* binding */ TransactionActionEnum),\n/* harmony export */   \"TransactionCreateErrorCode\": () => (/* binding */ TransactionCreateErrorCode),\n/* harmony export */   \"TransactionKind\": () => (/* binding */ TransactionKind),\n/* harmony export */   \"TransactionRequestActionErrorCode\": () => (/* binding */ TransactionRequestActionErrorCode),\n/* harmony export */   \"TransactionStatus\": () => (/* binding */ TransactionStatus),\n/* harmony export */   \"TransactionUpdateErrorCode\": () => (/* binding */ TransactionUpdateErrorCode),\n/* harmony export */   \"TranslatableKinds\": () => (/* binding */ TranslatableKinds),\n/* harmony export */   \"TranslationErrorCode\": () => (/* binding */ TranslationErrorCode),\n/* harmony export */   \"UploadErrorCode\": () => (/* binding */ UploadErrorCode),\n/* harmony export */   \"UserSortField\": () => (/* binding */ UserSortField),\n/* harmony export */   \"VariantAttributeScope\": () => (/* binding */ VariantAttributeScope),\n/* harmony export */   \"VolumeUnitsEnum\": () => (/* binding */ VolumeUnitsEnum),\n/* harmony export */   \"VoucherDiscountType\": () => (/* binding */ VoucherDiscountType),\n/* harmony export */   \"VoucherSortField\": () => (/* binding */ VoucherSortField),\n/* harmony export */   \"VoucherTypeEnum\": () => (/* binding */ VoucherTypeEnum),\n/* harmony export */   \"WarehouseClickAndCollectOptionEnum\": () => (/* binding */ WarehouseClickAndCollectOptionEnum),\n/* harmony export */   \"WarehouseErrorCode\": () => (/* binding */ WarehouseErrorCode),\n/* harmony export */   \"WarehouseSortField\": () => (/* binding */ WarehouseSortField),\n/* harmony export */   \"WebhookDryRunErrorCode\": () => (/* binding */ WebhookDryRunErrorCode),\n/* harmony export */   \"WebhookErrorCode\": () => (/* binding */ WebhookErrorCode),\n/* harmony export */   \"WebhookEventTypeAsyncEnum\": () => (/* binding */ WebhookEventTypeAsyncEnum),\n/* harmony export */   \"WebhookEventTypeEnum\": () => (/* binding */ WebhookEventTypeEnum),\n/* harmony export */   \"WebhookEventTypeSyncEnum\": () => (/* binding */ WebhookEventTypeSyncEnum),\n/* harmony export */   \"WebhookSampleEventTypeEnum\": () => (/* binding */ WebhookSampleEventTypeEnum),\n/* harmony export */   \"WebhookTriggerErrorCode\": () => (/* binding */ WebhookTriggerErrorCode),\n/* harmony export */   \"WeightUnitsEnum\": () => (/* binding */ WeightUnitsEnum),\n/* harmony export */   \"useProductGetThreeElementsLazyQuery\": () => (/* binding */ useProductGetThreeElementsLazyQuery),\n/* harmony export */   \"useProductGetThreeElementsQuery\": () => (/* binding */ useProductGetThreeElementsQuery)\n/* harmony export */ });\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/client */ \"@apollo/client\");\n/* harmony import */ var _apollo_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_apollo_client__WEBPACK_IMPORTED_MODULE_0__);\nfunction ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}function _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}const defaultOptions={};/** All built-in and custom scalars, mapped to their actual values */ /** An enumeration. */let AccountErrorCode;(function(AccountErrorCode){AccountErrorCode[\"AccountNotConfirmed\"]=\"ACCOUNT_NOT_CONFIRMED\";AccountErrorCode[\"ActivateOwnAccount\"]=\"ACTIVATE_OWN_ACCOUNT\";AccountErrorCode[\"ActivateSuperuserAccount\"]=\"ACTIVATE_SUPERUSER_ACCOUNT\";AccountErrorCode[\"ChannelInactive\"]=\"CHANNEL_INACTIVE\";AccountErrorCode[\"DeactivateOwnAccount\"]=\"DEACTIVATE_OWN_ACCOUNT\";AccountErrorCode[\"DeactivateSuperuserAccount\"]=\"DEACTIVATE_SUPERUSER_ACCOUNT\";AccountErrorCode[\"DeleteNonStaffUser\"]=\"DELETE_NON_STAFF_USER\";AccountErrorCode[\"DeleteOwnAccount\"]=\"DELETE_OWN_ACCOUNT\";AccountErrorCode[\"DeleteStaffAccount\"]=\"DELETE_STAFF_ACCOUNT\";AccountErrorCode[\"DeleteSuperuserAccount\"]=\"DELETE_SUPERUSER_ACCOUNT\";AccountErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";AccountErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";AccountErrorCode[\"Inactive\"]=\"INACTIVE\";AccountErrorCode[\"Invalid\"]=\"INVALID\";AccountErrorCode[\"InvalidCredentials\"]=\"INVALID_CREDENTIALS\";AccountErrorCode[\"InvalidPassword\"]=\"INVALID_PASSWORD\";AccountErrorCode[\"JwtDecodeError\"]=\"JWT_DECODE_ERROR\";AccountErrorCode[\"JwtInvalidCsrfToken\"]=\"JWT_INVALID_CSRF_TOKEN\";AccountErrorCode[\"JwtInvalidToken\"]=\"JWT_INVALID_TOKEN\";AccountErrorCode[\"JwtMissingToken\"]=\"JWT_MISSING_TOKEN\";AccountErrorCode[\"JwtSignatureExpired\"]=\"JWT_SIGNATURE_EXPIRED\";AccountErrorCode[\"LeftNotManageablePermission\"]=\"LEFT_NOT_MANAGEABLE_PERMISSION\";AccountErrorCode[\"MissingChannelSlug\"]=\"MISSING_CHANNEL_SLUG\";AccountErrorCode[\"NotFound\"]=\"NOT_FOUND\";AccountErrorCode[\"OutOfScopeGroup\"]=\"OUT_OF_SCOPE_GROUP\";AccountErrorCode[\"OutOfScopePermission\"]=\"OUT_OF_SCOPE_PERMISSION\";AccountErrorCode[\"OutOfScopeUser\"]=\"OUT_OF_SCOPE_USER\";AccountErrorCode[\"PasswordEntirelyNumeric\"]=\"PASSWORD_ENTIRELY_NUMERIC\";AccountErrorCode[\"PasswordTooCommon\"]=\"PASSWORD_TOO_COMMON\";AccountErrorCode[\"PasswordTooShort\"]=\"PASSWORD_TOO_SHORT\";AccountErrorCode[\"PasswordTooSimilar\"]=\"PASSWORD_TOO_SIMILAR\";AccountErrorCode[\"Required\"]=\"REQUIRED\";AccountErrorCode[\"Unique\"]=\"UNIQUE\";})(AccountErrorCode||(AccountErrorCode={}));/** An enumeration. */let AddressTypeEnum;/**\r\n * Updates an address.\r\n *\r\n * Requires one of the following permissions: MANAGE_USERS.\r\n */(function(AddressTypeEnum){AddressTypeEnum[\"Billing\"]=\"BILLING\";AddressTypeEnum[\"Shipping\"]=\"SHIPPING\";})(AddressTypeEnum||(AddressTypeEnum={}));/**\r\n * Determine the allocation strategy for the channel.\r\n *\r\n *     PRIORITIZE_SORTING_ORDER - allocate stocks according to the warehouses' order\r\n *     within the channel\r\n *\r\n *     PRIORITIZE_HIGH_STOCK - allocate stock in a warehouse with the most stock\r\n *\r\n */let AllocationStrategyEnum;/** Represents app data. */(function(AllocationStrategyEnum){AllocationStrategyEnum[\"PrioritizeHighStock\"]=\"PRIORITIZE_HIGH_STOCK\";AllocationStrategyEnum[\"PrioritizeSortingOrder\"]=\"PRIORITIZE_SORTING_ORDER\";})(AllocationStrategyEnum||(AllocationStrategyEnum={}));/** An enumeration. */let AppErrorCode;/** Represents app data. */(function(AppErrorCode){AppErrorCode[\"Forbidden\"]=\"FORBIDDEN\";AppErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";AppErrorCode[\"Invalid\"]=\"INVALID\";AppErrorCode[\"InvalidManifestFormat\"]=\"INVALID_MANIFEST_FORMAT\";AppErrorCode[\"InvalidPermission\"]=\"INVALID_PERMISSION\";AppErrorCode[\"InvalidStatus\"]=\"INVALID_STATUS\";AppErrorCode[\"InvalidUrlFormat\"]=\"INVALID_URL_FORMAT\";AppErrorCode[\"ManifestUrlCantConnect\"]=\"MANIFEST_URL_CANT_CONNECT\";AppErrorCode[\"NotFound\"]=\"NOT_FOUND\";AppErrorCode[\"OutOfScopeApp\"]=\"OUT_OF_SCOPE_APP\";AppErrorCode[\"OutOfScopePermission\"]=\"OUT_OF_SCOPE_PERMISSION\";AppErrorCode[\"Required\"]=\"REQUIRED\";AppErrorCode[\"Unique\"]=\"UNIQUE\";})(AppErrorCode||(AppErrorCode={}));/** All places where app extension can be mounted. */let AppExtensionMountEnum;/**\r\n * All available ways of opening an app extension.\r\n *\r\n *     POPUP - app's extension will be mounted as a popup window\r\n *     APP_PAGE - redirect to app's page\r\n *\r\n */(function(AppExtensionMountEnum){AppExtensionMountEnum[\"CustomerDetailsMoreActions\"]=\"CUSTOMER_DETAILS_MORE_ACTIONS\";AppExtensionMountEnum[\"CustomerOverviewCreate\"]=\"CUSTOMER_OVERVIEW_CREATE\";AppExtensionMountEnum[\"CustomerOverviewMoreActions\"]=\"CUSTOMER_OVERVIEW_MORE_ACTIONS\";AppExtensionMountEnum[\"NavigationCatalog\"]=\"NAVIGATION_CATALOG\";AppExtensionMountEnum[\"NavigationCustomers\"]=\"NAVIGATION_CUSTOMERS\";AppExtensionMountEnum[\"NavigationDiscounts\"]=\"NAVIGATION_DISCOUNTS\";AppExtensionMountEnum[\"NavigationOrders\"]=\"NAVIGATION_ORDERS\";AppExtensionMountEnum[\"NavigationPages\"]=\"NAVIGATION_PAGES\";AppExtensionMountEnum[\"NavigationTranslations\"]=\"NAVIGATION_TRANSLATIONS\";AppExtensionMountEnum[\"OrderDetailsMoreActions\"]=\"ORDER_DETAILS_MORE_ACTIONS\";AppExtensionMountEnum[\"OrderOverviewCreate\"]=\"ORDER_OVERVIEW_CREATE\";AppExtensionMountEnum[\"OrderOverviewMoreActions\"]=\"ORDER_OVERVIEW_MORE_ACTIONS\";AppExtensionMountEnum[\"ProductDetailsMoreActions\"]=\"PRODUCT_DETAILS_MORE_ACTIONS\";AppExtensionMountEnum[\"ProductOverviewCreate\"]=\"PRODUCT_OVERVIEW_CREATE\";AppExtensionMountEnum[\"ProductOverviewMoreActions\"]=\"PRODUCT_OVERVIEW_MORE_ACTIONS\";})(AppExtensionMountEnum||(AppExtensionMountEnum={}));let AppExtensionTargetEnum;/**\r\n * Fetch and validate manifest.\r\n *\r\n * Requires one of the following permissions: MANAGE_APPS.\r\n */(function(AppExtensionTargetEnum){AppExtensionTargetEnum[\"AppPage\"]=\"APP_PAGE\";AppExtensionTargetEnum[\"Popup\"]=\"POPUP\";})(AppExtensionTargetEnum||(AppExtensionTargetEnum={}));let AppSortField;(function(AppSortField){AppSortField[\"CreationDate\"]=\"CREATION_DATE\";AppSortField[\"Name\"]=\"NAME\";})(AppSortField||(AppSortField={}));/** Enum determining type of your App. */let AppTypeEnum;/**\r\n * Updates an existing app.\r\n *\r\n * Requires one of the following permissions: MANAGE_APPS.\r\n */(function(AppTypeEnum){AppTypeEnum[\"Local\"]=\"LOCAL\";AppTypeEnum[\"Thirdparty\"]=\"THIRDPARTY\";})(AppTypeEnum||(AppTypeEnum={}));/** An enumeration. */let AreaUnitsEnum;/**\r\n * Assigns storefront's navigation menus.\r\n *\r\n * Requires one of the following permissions: MANAGE_MENUS, MANAGE_SETTINGS.\r\n */(function(AreaUnitsEnum){AreaUnitsEnum[\"SqCm\"]=\"SQ_CM\";AreaUnitsEnum[\"SqFt\"]=\"SQ_FT\";AreaUnitsEnum[\"SqInch\"]=\"SQ_INCH\";AreaUnitsEnum[\"SqKm\"]=\"SQ_KM\";AreaUnitsEnum[\"SqM\"]=\"SQ_M\";AreaUnitsEnum[\"SqYd\"]=\"SQ_YD\";})(AreaUnitsEnum||(AreaUnitsEnum={}));let AttributeChoicesSortField;(function(AttributeChoicesSortField){AttributeChoicesSortField[\"Name\"]=\"NAME\";AttributeChoicesSortField[\"Slug\"]=\"SLUG\";})(AttributeChoicesSortField||(AttributeChoicesSortField={}));/** An enumeration. */let AttributeEntityTypeEnum;(function(AttributeEntityTypeEnum){AttributeEntityTypeEnum[\"Page\"]=\"PAGE\";AttributeEntityTypeEnum[\"Product\"]=\"PRODUCT\";AttributeEntityTypeEnum[\"ProductVariant\"]=\"PRODUCT_VARIANT\";})(AttributeEntityTypeEnum||(AttributeEntityTypeEnum={}));/** An enumeration. */let AttributeErrorCode;(function(AttributeErrorCode){AttributeErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";AttributeErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";AttributeErrorCode[\"Invalid\"]=\"INVALID\";AttributeErrorCode[\"NotFound\"]=\"NOT_FOUND\";AttributeErrorCode[\"Required\"]=\"REQUIRED\";AttributeErrorCode[\"Unique\"]=\"UNIQUE\";})(AttributeErrorCode||(AttributeErrorCode={}));/** An enumeration. */let AttributeInputTypeEnum;(function(AttributeInputTypeEnum){AttributeInputTypeEnum[\"Boolean\"]=\"BOOLEAN\";AttributeInputTypeEnum[\"Date\"]=\"DATE\";AttributeInputTypeEnum[\"DateTime\"]=\"DATE_TIME\";AttributeInputTypeEnum[\"Dropdown\"]=\"DROPDOWN\";AttributeInputTypeEnum[\"File\"]=\"FILE\";AttributeInputTypeEnum[\"Multiselect\"]=\"MULTISELECT\";AttributeInputTypeEnum[\"Numeric\"]=\"NUMERIC\";AttributeInputTypeEnum[\"PlainText\"]=\"PLAIN_TEXT\";AttributeInputTypeEnum[\"Reference\"]=\"REFERENCE\";AttributeInputTypeEnum[\"RichText\"]=\"RICH_TEXT\";AttributeInputTypeEnum[\"Swatch\"]=\"SWATCH\";})(AttributeInputTypeEnum||(AttributeInputTypeEnum={}));let AttributeSortField;(function(AttributeSortField){AttributeSortField[\"AvailableInGrid\"]=\"AVAILABLE_IN_GRID\";AttributeSortField[\"FilterableInDashboard\"]=\"FILTERABLE_IN_DASHBOARD\";AttributeSortField[\"FilterableInStorefront\"]=\"FILTERABLE_IN_STOREFRONT\";AttributeSortField[\"IsVariantOnly\"]=\"IS_VARIANT_ONLY\";AttributeSortField[\"Name\"]=\"NAME\";AttributeSortField[\"Slug\"]=\"SLUG\";AttributeSortField[\"StorefrontSearchPosition\"]=\"STOREFRONT_SEARCH_POSITION\";AttributeSortField[\"ValueRequired\"]=\"VALUE_REQUIRED\";AttributeSortField[\"VisibleInStorefront\"]=\"VISIBLE_IN_STOREFRONT\";})(AttributeSortField||(AttributeSortField={}));/** An enumeration. */let AttributeTypeEnum;(function(AttributeTypeEnum){AttributeTypeEnum[\"PageType\"]=\"PAGE_TYPE\";AttributeTypeEnum[\"ProductType\"]=\"PRODUCT_TYPE\";})(AttributeTypeEnum||(AttributeTypeEnum={}));let CategorySortField;(function(CategorySortField){CategorySortField[\"Name\"]=\"NAME\";CategorySortField[\"ProductCount\"]=\"PRODUCT_COUNT\";CategorySortField[\"SubcategoryCount\"]=\"SUBCATEGORY_COUNT\";})(CategorySortField||(CategorySortField={}));/** An enumeration. */let ChannelErrorCode;/**\r\n * Reorder the warehouses of a channel.\r\n *\r\n * Added in Saleor 3.7.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n *\r\n * Requires one of the following permissions: MANAGE_CHANNELS.\r\n */(function(ChannelErrorCode){ChannelErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";ChannelErrorCode[\"ChannelsCurrencyMustBeTheSame\"]=\"CHANNELS_CURRENCY_MUST_BE_THE_SAME\";ChannelErrorCode[\"ChannelWithOrders\"]=\"CHANNEL_WITH_ORDERS\";ChannelErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";ChannelErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";ChannelErrorCode[\"Invalid\"]=\"INVALID\";ChannelErrorCode[\"NotFound\"]=\"NOT_FOUND\";ChannelErrorCode[\"Required\"]=\"REQUIRED\";ChannelErrorCode[\"Unique\"]=\"UNIQUE\";})(ChannelErrorCode||(ChannelErrorCode={}));/** An enumeration. */let CheckoutErrorCode;(function(CheckoutErrorCode){CheckoutErrorCode[\"BillingAddressNotSet\"]=\"BILLING_ADDRESS_NOT_SET\";CheckoutErrorCode[\"ChannelInactive\"]=\"CHANNEL_INACTIVE\";CheckoutErrorCode[\"CheckoutNotFullyPaid\"]=\"CHECKOUT_NOT_FULLY_PAID\";CheckoutErrorCode[\"DeliveryMethodNotApplicable\"]=\"DELIVERY_METHOD_NOT_APPLICABLE\";CheckoutErrorCode[\"EmailNotSet\"]=\"EMAIL_NOT_SET\";CheckoutErrorCode[\"GiftCardNotApplicable\"]=\"GIFT_CARD_NOT_APPLICABLE\";CheckoutErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";CheckoutErrorCode[\"InactivePayment\"]=\"INACTIVE_PAYMENT\";CheckoutErrorCode[\"InsufficientStock\"]=\"INSUFFICIENT_STOCK\";CheckoutErrorCode[\"Invalid\"]=\"INVALID\";CheckoutErrorCode[\"InvalidShippingMethod\"]=\"INVALID_SHIPPING_METHOD\";CheckoutErrorCode[\"MissingChannelSlug\"]=\"MISSING_CHANNEL_SLUG\";CheckoutErrorCode[\"NotFound\"]=\"NOT_FOUND\";CheckoutErrorCode[\"NoLines\"]=\"NO_LINES\";CheckoutErrorCode[\"PaymentError\"]=\"PAYMENT_ERROR\";CheckoutErrorCode[\"ProductNotPublished\"]=\"PRODUCT_NOT_PUBLISHED\";CheckoutErrorCode[\"ProductUnavailableForPurchase\"]=\"PRODUCT_UNAVAILABLE_FOR_PURCHASE\";CheckoutErrorCode[\"QuantityGreaterThanLimit\"]=\"QUANTITY_GREATER_THAN_LIMIT\";CheckoutErrorCode[\"Required\"]=\"REQUIRED\";CheckoutErrorCode[\"ShippingAddressNotSet\"]=\"SHIPPING_ADDRESS_NOT_SET\";CheckoutErrorCode[\"ShippingMethodNotApplicable\"]=\"SHIPPING_METHOD_NOT_APPLICABLE\";CheckoutErrorCode[\"ShippingMethodNotSet\"]=\"SHIPPING_METHOD_NOT_SET\";CheckoutErrorCode[\"ShippingNotRequired\"]=\"SHIPPING_NOT_REQUIRED\";CheckoutErrorCode[\"TaxError\"]=\"TAX_ERROR\";CheckoutErrorCode[\"UnavailableVariantInChannel\"]=\"UNAVAILABLE_VARIANT_IN_CHANNEL\";CheckoutErrorCode[\"Unique\"]=\"UNIQUE\";CheckoutErrorCode[\"VoucherNotApplicable\"]=\"VOUCHER_NOT_APPLICABLE\";CheckoutErrorCode[\"ZeroQuantity\"]=\"ZERO_QUANTITY\";})(CheckoutErrorCode||(CheckoutErrorCode={}));let CheckoutSortField;(function(CheckoutSortField){CheckoutSortField[\"CreationDate\"]=\"CREATION_DATE\";CheckoutSortField[\"Customer\"]=\"CUSTOMER\";CheckoutSortField[\"Payment\"]=\"PAYMENT\";})(CheckoutSortField||(CheckoutSortField={}));/** An enumeration. */let CollectionErrorCode;(function(CollectionErrorCode){CollectionErrorCode[\"CannotManageProductWithoutVariant\"]=\"CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT\";CollectionErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";CollectionErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";CollectionErrorCode[\"Invalid\"]=\"INVALID\";CollectionErrorCode[\"NotFound\"]=\"NOT_FOUND\";CollectionErrorCode[\"Required\"]=\"REQUIRED\";CollectionErrorCode[\"Unique\"]=\"UNIQUE\";})(CollectionErrorCode||(CollectionErrorCode={}));let CollectionPublished;/**\r\n * Remove products from a collection.\r\n *\r\n * Requires one of the following permissions: MANAGE_PRODUCTS.\r\n */(function(CollectionPublished){CollectionPublished[\"Hidden\"]=\"HIDDEN\";CollectionPublished[\"Published\"]=\"PUBLISHED\";})(CollectionPublished||(CollectionPublished={}));let CollectionSortField;(function(CollectionSortField){CollectionSortField[\"Availability\"]=\"AVAILABILITY\";CollectionSortField[\"Name\"]=\"NAME\";CollectionSortField[\"ProductCount\"]=\"PRODUCT_COUNT\";CollectionSortField[\"PublicationDate\"]=\"PUBLICATION_DATE\";CollectionSortField[\"PublishedAt\"]=\"PUBLISHED_AT\";})(CollectionSortField||(CollectionSortField={}));/** An enumeration. */let ConfigurationTypeFieldEnum;/** Confirm user account with token sent by email during registration. */(function(ConfigurationTypeFieldEnum){ConfigurationTypeFieldEnum[\"Boolean\"]=\"BOOLEAN\";ConfigurationTypeFieldEnum[\"Multiline\"]=\"MULTILINE\";ConfigurationTypeFieldEnum[\"Output\"]=\"OUTPUT\";ConfigurationTypeFieldEnum[\"Password\"]=\"PASSWORD\";ConfigurationTypeFieldEnum[\"Secret\"]=\"SECRET\";ConfigurationTypeFieldEnum[\"Secretmultiline\"]=\"SECRETMULTILINE\";ConfigurationTypeFieldEnum[\"String\"]=\"STRING\";})(ConfigurationTypeFieldEnum||(ConfigurationTypeFieldEnum={}));/** An enumeration. */let CountryCode;(function(CountryCode){CountryCode[\"Ad\"]=\"AD\";CountryCode[\"Ae\"]=\"AE\";CountryCode[\"Af\"]=\"AF\";CountryCode[\"Ag\"]=\"AG\";CountryCode[\"Ai\"]=\"AI\";CountryCode[\"Al\"]=\"AL\";CountryCode[\"Am\"]=\"AM\";CountryCode[\"Ao\"]=\"AO\";CountryCode[\"Aq\"]=\"AQ\";CountryCode[\"Ar\"]=\"AR\";CountryCode[\"As\"]=\"AS\";CountryCode[\"At\"]=\"AT\";CountryCode[\"Au\"]=\"AU\";CountryCode[\"Aw\"]=\"AW\";CountryCode[\"Ax\"]=\"AX\";CountryCode[\"Az\"]=\"AZ\";CountryCode[\"Ba\"]=\"BA\";CountryCode[\"Bb\"]=\"BB\";CountryCode[\"Bd\"]=\"BD\";CountryCode[\"Be\"]=\"BE\";CountryCode[\"Bf\"]=\"BF\";CountryCode[\"Bg\"]=\"BG\";CountryCode[\"Bh\"]=\"BH\";CountryCode[\"Bi\"]=\"BI\";CountryCode[\"Bj\"]=\"BJ\";CountryCode[\"Bl\"]=\"BL\";CountryCode[\"Bm\"]=\"BM\";CountryCode[\"Bn\"]=\"BN\";CountryCode[\"Bo\"]=\"BO\";CountryCode[\"Bq\"]=\"BQ\";CountryCode[\"Br\"]=\"BR\";CountryCode[\"Bs\"]=\"BS\";CountryCode[\"Bt\"]=\"BT\";CountryCode[\"Bv\"]=\"BV\";CountryCode[\"Bw\"]=\"BW\";CountryCode[\"By\"]=\"BY\";CountryCode[\"Bz\"]=\"BZ\";CountryCode[\"Ca\"]=\"CA\";CountryCode[\"Cc\"]=\"CC\";CountryCode[\"Cd\"]=\"CD\";CountryCode[\"Cf\"]=\"CF\";CountryCode[\"Cg\"]=\"CG\";CountryCode[\"Ch\"]=\"CH\";CountryCode[\"Ci\"]=\"CI\";CountryCode[\"Ck\"]=\"CK\";CountryCode[\"Cl\"]=\"CL\";CountryCode[\"Cm\"]=\"CM\";CountryCode[\"Cn\"]=\"CN\";CountryCode[\"Co\"]=\"CO\";CountryCode[\"Cr\"]=\"CR\";CountryCode[\"Cu\"]=\"CU\";CountryCode[\"Cv\"]=\"CV\";CountryCode[\"Cw\"]=\"CW\";CountryCode[\"Cx\"]=\"CX\";CountryCode[\"Cy\"]=\"CY\";CountryCode[\"Cz\"]=\"CZ\";CountryCode[\"De\"]=\"DE\";CountryCode[\"Dj\"]=\"DJ\";CountryCode[\"Dk\"]=\"DK\";CountryCode[\"Dm\"]=\"DM\";CountryCode[\"Do\"]=\"DO\";CountryCode[\"Dz\"]=\"DZ\";CountryCode[\"Ec\"]=\"EC\";CountryCode[\"Ee\"]=\"EE\";CountryCode[\"Eg\"]=\"EG\";CountryCode[\"Eh\"]=\"EH\";CountryCode[\"Er\"]=\"ER\";CountryCode[\"Es\"]=\"ES\";CountryCode[\"Et\"]=\"ET\";CountryCode[\"Eu\"]=\"EU\";CountryCode[\"Fi\"]=\"FI\";CountryCode[\"Fj\"]=\"FJ\";CountryCode[\"Fk\"]=\"FK\";CountryCode[\"Fm\"]=\"FM\";CountryCode[\"Fo\"]=\"FO\";CountryCode[\"Fr\"]=\"FR\";CountryCode[\"Ga\"]=\"GA\";CountryCode[\"Gb\"]=\"GB\";CountryCode[\"Gd\"]=\"GD\";CountryCode[\"Ge\"]=\"GE\";CountryCode[\"Gf\"]=\"GF\";CountryCode[\"Gg\"]=\"GG\";CountryCode[\"Gh\"]=\"GH\";CountryCode[\"Gi\"]=\"GI\";CountryCode[\"Gl\"]=\"GL\";CountryCode[\"Gm\"]=\"GM\";CountryCode[\"Gn\"]=\"GN\";CountryCode[\"Gp\"]=\"GP\";CountryCode[\"Gq\"]=\"GQ\";CountryCode[\"Gr\"]=\"GR\";CountryCode[\"Gs\"]=\"GS\";CountryCode[\"Gt\"]=\"GT\";CountryCode[\"Gu\"]=\"GU\";CountryCode[\"Gw\"]=\"GW\";CountryCode[\"Gy\"]=\"GY\";CountryCode[\"Hk\"]=\"HK\";CountryCode[\"Hm\"]=\"HM\";CountryCode[\"Hn\"]=\"HN\";CountryCode[\"Hr\"]=\"HR\";CountryCode[\"Ht\"]=\"HT\";CountryCode[\"Hu\"]=\"HU\";CountryCode[\"Id\"]=\"ID\";CountryCode[\"Ie\"]=\"IE\";CountryCode[\"Il\"]=\"IL\";CountryCode[\"Im\"]=\"IM\";CountryCode[\"In\"]=\"IN\";CountryCode[\"Io\"]=\"IO\";CountryCode[\"Iq\"]=\"IQ\";CountryCode[\"Ir\"]=\"IR\";CountryCode[\"Is\"]=\"IS\";CountryCode[\"It\"]=\"IT\";CountryCode[\"Je\"]=\"JE\";CountryCode[\"Jm\"]=\"JM\";CountryCode[\"Jo\"]=\"JO\";CountryCode[\"Jp\"]=\"JP\";CountryCode[\"Ke\"]=\"KE\";CountryCode[\"Kg\"]=\"KG\";CountryCode[\"Kh\"]=\"KH\";CountryCode[\"Ki\"]=\"KI\";CountryCode[\"Km\"]=\"KM\";CountryCode[\"Kn\"]=\"KN\";CountryCode[\"Kp\"]=\"KP\";CountryCode[\"Kr\"]=\"KR\";CountryCode[\"Kw\"]=\"KW\";CountryCode[\"Ky\"]=\"KY\";CountryCode[\"Kz\"]=\"KZ\";CountryCode[\"La\"]=\"LA\";CountryCode[\"Lb\"]=\"LB\";CountryCode[\"Lc\"]=\"LC\";CountryCode[\"Li\"]=\"LI\";CountryCode[\"Lk\"]=\"LK\";CountryCode[\"Lr\"]=\"LR\";CountryCode[\"Ls\"]=\"LS\";CountryCode[\"Lt\"]=\"LT\";CountryCode[\"Lu\"]=\"LU\";CountryCode[\"Lv\"]=\"LV\";CountryCode[\"Ly\"]=\"LY\";CountryCode[\"Ma\"]=\"MA\";CountryCode[\"Mc\"]=\"MC\";CountryCode[\"Md\"]=\"MD\";CountryCode[\"Me\"]=\"ME\";CountryCode[\"Mf\"]=\"MF\";CountryCode[\"Mg\"]=\"MG\";CountryCode[\"Mh\"]=\"MH\";CountryCode[\"Mk\"]=\"MK\";CountryCode[\"Ml\"]=\"ML\";CountryCode[\"Mm\"]=\"MM\";CountryCode[\"Mn\"]=\"MN\";CountryCode[\"Mo\"]=\"MO\";CountryCode[\"Mp\"]=\"MP\";CountryCode[\"Mq\"]=\"MQ\";CountryCode[\"Mr\"]=\"MR\";CountryCode[\"Ms\"]=\"MS\";CountryCode[\"Mt\"]=\"MT\";CountryCode[\"Mu\"]=\"MU\";CountryCode[\"Mv\"]=\"MV\";CountryCode[\"Mw\"]=\"MW\";CountryCode[\"Mx\"]=\"MX\";CountryCode[\"My\"]=\"MY\";CountryCode[\"Mz\"]=\"MZ\";CountryCode[\"Na\"]=\"NA\";CountryCode[\"Nc\"]=\"NC\";CountryCode[\"Ne\"]=\"NE\";CountryCode[\"Nf\"]=\"NF\";CountryCode[\"Ng\"]=\"NG\";CountryCode[\"Ni\"]=\"NI\";CountryCode[\"Nl\"]=\"NL\";CountryCode[\"No\"]=\"NO\";CountryCode[\"Np\"]=\"NP\";CountryCode[\"Nr\"]=\"NR\";CountryCode[\"Nu\"]=\"NU\";CountryCode[\"Nz\"]=\"NZ\";CountryCode[\"Om\"]=\"OM\";CountryCode[\"Pa\"]=\"PA\";CountryCode[\"Pe\"]=\"PE\";CountryCode[\"Pf\"]=\"PF\";CountryCode[\"Pg\"]=\"PG\";CountryCode[\"Ph\"]=\"PH\";CountryCode[\"Pk\"]=\"PK\";CountryCode[\"Pl\"]=\"PL\";CountryCode[\"Pm\"]=\"PM\";CountryCode[\"Pn\"]=\"PN\";CountryCode[\"Pr\"]=\"PR\";CountryCode[\"Ps\"]=\"PS\";CountryCode[\"Pt\"]=\"PT\";CountryCode[\"Pw\"]=\"PW\";CountryCode[\"Py\"]=\"PY\";CountryCode[\"Qa\"]=\"QA\";CountryCode[\"Re\"]=\"RE\";CountryCode[\"Ro\"]=\"RO\";CountryCode[\"Rs\"]=\"RS\";CountryCode[\"Ru\"]=\"RU\";CountryCode[\"Rw\"]=\"RW\";CountryCode[\"Sa\"]=\"SA\";CountryCode[\"Sb\"]=\"SB\";CountryCode[\"Sc\"]=\"SC\";CountryCode[\"Sd\"]=\"SD\";CountryCode[\"Se\"]=\"SE\";CountryCode[\"Sg\"]=\"SG\";CountryCode[\"Sh\"]=\"SH\";CountryCode[\"Si\"]=\"SI\";CountryCode[\"Sj\"]=\"SJ\";CountryCode[\"Sk\"]=\"SK\";CountryCode[\"Sl\"]=\"SL\";CountryCode[\"Sm\"]=\"SM\";CountryCode[\"Sn\"]=\"SN\";CountryCode[\"So\"]=\"SO\";CountryCode[\"Sr\"]=\"SR\";CountryCode[\"Ss\"]=\"SS\";CountryCode[\"St\"]=\"ST\";CountryCode[\"Sv\"]=\"SV\";CountryCode[\"Sx\"]=\"SX\";CountryCode[\"Sy\"]=\"SY\";CountryCode[\"Sz\"]=\"SZ\";CountryCode[\"Tc\"]=\"TC\";CountryCode[\"Td\"]=\"TD\";CountryCode[\"Tf\"]=\"TF\";CountryCode[\"Tg\"]=\"TG\";CountryCode[\"Th\"]=\"TH\";CountryCode[\"Tj\"]=\"TJ\";CountryCode[\"Tk\"]=\"TK\";CountryCode[\"Tl\"]=\"TL\";CountryCode[\"Tm\"]=\"TM\";CountryCode[\"Tn\"]=\"TN\";CountryCode[\"To\"]=\"TO\";CountryCode[\"Tr\"]=\"TR\";CountryCode[\"Tt\"]=\"TT\";CountryCode[\"Tv\"]=\"TV\";CountryCode[\"Tw\"]=\"TW\";CountryCode[\"Tz\"]=\"TZ\";CountryCode[\"Ua\"]=\"UA\";CountryCode[\"Ug\"]=\"UG\";CountryCode[\"Um\"]=\"UM\";CountryCode[\"Us\"]=\"US\";CountryCode[\"Uy\"]=\"UY\";CountryCode[\"Uz\"]=\"UZ\";CountryCode[\"Va\"]=\"VA\";CountryCode[\"Vc\"]=\"VC\";CountryCode[\"Ve\"]=\"VE\";CountryCode[\"Vg\"]=\"VG\";CountryCode[\"Vi\"]=\"VI\";CountryCode[\"Vn\"]=\"VN\";CountryCode[\"Vu\"]=\"VU\";CountryCode[\"Wf\"]=\"WF\";CountryCode[\"Ws\"]=\"WS\";CountryCode[\"Ye\"]=\"YE\";CountryCode[\"Yt\"]=\"YT\";CountryCode[\"Za\"]=\"ZA\";CountryCode[\"Zm\"]=\"ZM\";CountryCode[\"Zw\"]=\"ZW\";})(CountryCode||(CountryCode={}));/** An enumeration. */let CustomerEventsEnum;(function(CustomerEventsEnum){CustomerEventsEnum[\"AccountActivated\"]=\"ACCOUNT_ACTIVATED\";CustomerEventsEnum[\"AccountCreated\"]=\"ACCOUNT_CREATED\";CustomerEventsEnum[\"AccountDeactivated\"]=\"ACCOUNT_DEACTIVATED\";CustomerEventsEnum[\"CustomerDeleted\"]=\"CUSTOMER_DELETED\";CustomerEventsEnum[\"DigitalLinkDownloaded\"]=\"DIGITAL_LINK_DOWNLOADED\";CustomerEventsEnum[\"EmailAssigned\"]=\"EMAIL_ASSIGNED\";CustomerEventsEnum[\"EmailChanged\"]=\"EMAIL_CHANGED\";CustomerEventsEnum[\"EmailChangedRequest\"]=\"EMAIL_CHANGED_REQUEST\";CustomerEventsEnum[\"NameAssigned\"]=\"NAME_ASSIGNED\";CustomerEventsEnum[\"NoteAdded\"]=\"NOTE_ADDED\";CustomerEventsEnum[\"NoteAddedToOrder\"]=\"NOTE_ADDED_TO_ORDER\";CustomerEventsEnum[\"PasswordChanged\"]=\"PASSWORD_CHANGED\";CustomerEventsEnum[\"PasswordReset\"]=\"PASSWORD_RESET\";CustomerEventsEnum[\"PasswordResetLinkSent\"]=\"PASSWORD_RESET_LINK_SENT\";CustomerEventsEnum[\"PlacedOrder\"]=\"PLACED_ORDER\";})(CustomerEventsEnum||(CustomerEventsEnum={}));/** An enumeration. */let DiscountErrorCode;(function(DiscountErrorCode){DiscountErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";DiscountErrorCode[\"CannotManageProductWithoutVariant\"]=\"CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT\";DiscountErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";DiscountErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";DiscountErrorCode[\"Invalid\"]=\"INVALID\";DiscountErrorCode[\"NotFound\"]=\"NOT_FOUND\";DiscountErrorCode[\"Required\"]=\"REQUIRED\";DiscountErrorCode[\"Unique\"]=\"UNIQUE\";})(DiscountErrorCode||(DiscountErrorCode={}));let DiscountStatusEnum;(function(DiscountStatusEnum){DiscountStatusEnum[\"Active\"]=\"ACTIVE\";DiscountStatusEnum[\"Expired\"]=\"EXPIRED\";DiscountStatusEnum[\"Scheduled\"]=\"SCHEDULED\";})(DiscountStatusEnum||(DiscountStatusEnum={}));let DiscountValueTypeEnum;/** An enumeration. */(function(DiscountValueTypeEnum){DiscountValueTypeEnum[\"Fixed\"]=\"FIXED\";DiscountValueTypeEnum[\"Percentage\"]=\"PERCENTAGE\";})(DiscountValueTypeEnum||(DiscountValueTypeEnum={}));let DistanceUnitsEnum;/** Represents shop's domain. */(function(DistanceUnitsEnum){DistanceUnitsEnum[\"Cm\"]=\"CM\";DistanceUnitsEnum[\"Ft\"]=\"FT\";DistanceUnitsEnum[\"Inch\"]=\"INCH\";DistanceUnitsEnum[\"Km\"]=\"KM\";DistanceUnitsEnum[\"M\"]=\"M\";DistanceUnitsEnum[\"Yd\"]=\"YD\";})(DistanceUnitsEnum||(DistanceUnitsEnum={}));let ErrorPolicyEnum;(function(ErrorPolicyEnum){ErrorPolicyEnum[\"IgnoreFailed\"]=\"IGNORE_FAILED\";ErrorPolicyEnum[\"RejectEverything\"]=\"REJECT_EVERYTHING\";ErrorPolicyEnum[\"RejectFailedRows\"]=\"REJECT_FAILED_ROWS\";})(ErrorPolicyEnum||(ErrorPolicyEnum={}));let EventDeliveryAttemptSortField;(function(EventDeliveryAttemptSortField){EventDeliveryAttemptSortField[\"CreatedAt\"]=\"CREATED_AT\";})(EventDeliveryAttemptSortField||(EventDeliveryAttemptSortField={}));let EventDeliverySortField;(function(EventDeliverySortField){EventDeliverySortField[\"CreatedAt\"]=\"CREATED_AT\";})(EventDeliverySortField||(EventDeliverySortField={}));let EventDeliveryStatusEnum;(function(EventDeliveryStatusEnum){EventDeliveryStatusEnum[\"Failed\"]=\"FAILED\";EventDeliveryStatusEnum[\"Pending\"]=\"PENDING\";EventDeliveryStatusEnum[\"Success\"]=\"SUCCESS\";})(EventDeliveryStatusEnum||(EventDeliveryStatusEnum={}));/** An enumeration. */let ExportErrorCode;/** History log of export file. */(function(ExportErrorCode){ExportErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";ExportErrorCode[\"Invalid\"]=\"INVALID\";ExportErrorCode[\"NotFound\"]=\"NOT_FOUND\";ExportErrorCode[\"Required\"]=\"REQUIRED\";})(ExportErrorCode||(ExportErrorCode={}));/** An enumeration. */let ExportEventsEnum;/** Represents a job data of exported file. */(function(ExportEventsEnum){ExportEventsEnum[\"ExportedFileSent\"]=\"EXPORTED_FILE_SENT\";ExportEventsEnum[\"ExportDeleted\"]=\"EXPORT_DELETED\";ExportEventsEnum[\"ExportFailed\"]=\"EXPORT_FAILED\";ExportEventsEnum[\"ExportFailedInfoSent\"]=\"EXPORT_FAILED_INFO_SENT\";ExportEventsEnum[\"ExportPending\"]=\"EXPORT_PENDING\";ExportEventsEnum[\"ExportSuccess\"]=\"EXPORT_SUCCESS\";})(ExportEventsEnum||(ExportEventsEnum={}));let ExportFileSortField;(function(ExportFileSortField){ExportFileSortField[\"CreatedAt\"]=\"CREATED_AT\";ExportFileSortField[\"LastModifiedAt\"]=\"LAST_MODIFIED_AT\";ExportFileSortField[\"Status\"]=\"STATUS\";ExportFileSortField[\"UpdatedAt\"]=\"UPDATED_AT\";})(ExportFileSortField||(ExportFileSortField={}));let ExportScope;(function(ExportScope){ExportScope[\"All\"]=\"ALL\";ExportScope[\"Filter\"]=\"FILTER\";ExportScope[\"Ids\"]=\"IDS\";})(ExportScope||(ExportScope={}));/** An enumeration. */let ExternalNotificationErrorCodes;/**\r\n * Trigger sending a notification with the notify plugin method. Serializes nodes provided as ids parameter and includes this data in the notification payload.\r\n *\r\n * Added in Saleor 3.1.\r\n */(function(ExternalNotificationErrorCodes){ExternalNotificationErrorCodes[\"ChannelInactive\"]=\"CHANNEL_INACTIVE\";ExternalNotificationErrorCodes[\"InvalidModelType\"]=\"INVALID_MODEL_TYPE\";ExternalNotificationErrorCodes[\"NotFound\"]=\"NOT_FOUND\";ExternalNotificationErrorCodes[\"Required\"]=\"REQUIRED\";})(ExternalNotificationErrorCodes||(ExternalNotificationErrorCodes={}));/** An enumeration. */let FileTypesEnum;/**\r\n * Upload a file. This mutation must be sent as a `multipart` request. More detailed specs of the upload format can be found here: https://github.com/jaydenseric/graphql-multipart-request-spec\r\n *\r\n * Requires one of the following permissions: AUTHENTICATED_APP, AUTHENTICATED_STAFF_USER.\r\n */(function(FileTypesEnum){FileTypesEnum[\"Csv\"]=\"CSV\";FileTypesEnum[\"Xlsx\"]=\"XLSX\";})(FileTypesEnum||(FileTypesEnum={}));/** An enumeration. */let FulfillmentStatus;/**\r\n * Updates a fulfillment for an order.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(FulfillmentStatus){FulfillmentStatus[\"Canceled\"]=\"CANCELED\";FulfillmentStatus[\"Fulfilled\"]=\"FULFILLED\";FulfillmentStatus[\"Refunded\"]=\"REFUNDED\";FulfillmentStatus[\"RefundedAndReturned\"]=\"REFUNDED_AND_RETURNED\";FulfillmentStatus[\"Replaced\"]=\"REPLACED\";FulfillmentStatus[\"Returned\"]=\"RETURNED\";FulfillmentStatus[\"WaitingForApproval\"]=\"WAITING_FOR_APPROVAL\";})(FulfillmentStatus||(FulfillmentStatus={}));/** An enumeration. */let GiftCardErrorCode;/**\r\n * History log of the gift card.\r\n *\r\n * Added in Saleor 3.1.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(GiftCardErrorCode){GiftCardErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";GiftCardErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";GiftCardErrorCode[\"ExpiredGiftCard\"]=\"EXPIRED_GIFT_CARD\";GiftCardErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";GiftCardErrorCode[\"Invalid\"]=\"INVALID\";GiftCardErrorCode[\"NotFound\"]=\"NOT_FOUND\";GiftCardErrorCode[\"Required\"]=\"REQUIRED\";GiftCardErrorCode[\"Unique\"]=\"UNIQUE\";})(GiftCardErrorCode||(GiftCardErrorCode={}));/** An enumeration. */let GiftCardEventsEnum;(function(GiftCardEventsEnum){GiftCardEventsEnum[\"Activated\"]=\"ACTIVATED\";GiftCardEventsEnum[\"BalanceReset\"]=\"BALANCE_RESET\";GiftCardEventsEnum[\"Bought\"]=\"BOUGHT\";GiftCardEventsEnum[\"Deactivated\"]=\"DEACTIVATED\";GiftCardEventsEnum[\"ExpiryDateUpdated\"]=\"EXPIRY_DATE_UPDATED\";GiftCardEventsEnum[\"Issued\"]=\"ISSUED\";GiftCardEventsEnum[\"NoteAdded\"]=\"NOTE_ADDED\";GiftCardEventsEnum[\"Resent\"]=\"RESENT\";GiftCardEventsEnum[\"SentToCustomer\"]=\"SENT_TO_CUSTOMER\";GiftCardEventsEnum[\"TagsUpdated\"]=\"TAGS_UPDATED\";GiftCardEventsEnum[\"Updated\"]=\"UPDATED\";GiftCardEventsEnum[\"UsedInOrder\"]=\"USED_IN_ORDER\";})(GiftCardEventsEnum||(GiftCardEventsEnum={}));/** An enumeration. */let GiftCardSettingsErrorCode;/** An enumeration. */(function(GiftCardSettingsErrorCode){GiftCardSettingsErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";GiftCardSettingsErrorCode[\"Invalid\"]=\"INVALID\";GiftCardSettingsErrorCode[\"Required\"]=\"REQUIRED\";})(GiftCardSettingsErrorCode||(GiftCardSettingsErrorCode={}));let GiftCardSettingsExpiryTypeEnum;/**\r\n * Update gift card settings.\r\n *\r\n * Requires one of the following permissions: MANAGE_GIFT_CARD.\r\n */(function(GiftCardSettingsExpiryTypeEnum){GiftCardSettingsExpiryTypeEnum[\"ExpiryPeriod\"]=\"EXPIRY_PERIOD\";GiftCardSettingsExpiryTypeEnum[\"NeverExpire\"]=\"NEVER_EXPIRE\";})(GiftCardSettingsExpiryTypeEnum||(GiftCardSettingsExpiryTypeEnum={}));let GiftCardSortField;(function(GiftCardSortField){GiftCardSortField[\"CreatedAt\"]=\"CREATED_AT\";GiftCardSortField[\"CurrentBalance\"]=\"CURRENT_BALANCE\";GiftCardSortField[\"Product\"]=\"PRODUCT\";GiftCardSortField[\"UsedBy\"]=\"USED_BY\";})(GiftCardSortField||(GiftCardSortField={}));/** An enumeration. */let InvoiceErrorCode;/**\r\n * Request an invoice for the order using plugin.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(InvoiceErrorCode){InvoiceErrorCode[\"EmailNotSet\"]=\"EMAIL_NOT_SET\";InvoiceErrorCode[\"InvalidStatus\"]=\"INVALID_STATUS\";InvoiceErrorCode[\"NotFound\"]=\"NOT_FOUND\";InvoiceErrorCode[\"NotReady\"]=\"NOT_READY\";InvoiceErrorCode[\"NoInvoicePlugin\"]=\"NO_INVOICE_PLUGIN\";InvoiceErrorCode[\"NumberNotSet\"]=\"NUMBER_NOT_SET\";InvoiceErrorCode[\"Required\"]=\"REQUIRED\";InvoiceErrorCode[\"UrlNotSet\"]=\"URL_NOT_SET\";})(InvoiceErrorCode||(InvoiceErrorCode={}));/** An enumeration. */let JobStatusEnum;/** An enumeration. */(function(JobStatusEnum){JobStatusEnum[\"Deleted\"]=\"DELETED\";JobStatusEnum[\"Failed\"]=\"FAILED\";JobStatusEnum[\"Pending\"]=\"PENDING\";JobStatusEnum[\"Success\"]=\"SUCCESS\";})(JobStatusEnum||(JobStatusEnum={}));let LanguageCodeEnum;(function(LanguageCodeEnum){LanguageCodeEnum[\"Af\"]=\"AF\";LanguageCodeEnum[\"AfNa\"]=\"AF_NA\";LanguageCodeEnum[\"AfZa\"]=\"AF_ZA\";LanguageCodeEnum[\"Agq\"]=\"AGQ\";LanguageCodeEnum[\"AgqCm\"]=\"AGQ_CM\";LanguageCodeEnum[\"Ak\"]=\"AK\";LanguageCodeEnum[\"AkGh\"]=\"AK_GH\";LanguageCodeEnum[\"Am\"]=\"AM\";LanguageCodeEnum[\"AmEt\"]=\"AM_ET\";LanguageCodeEnum[\"Ar\"]=\"AR\";LanguageCodeEnum[\"ArAe\"]=\"AR_AE\";LanguageCodeEnum[\"ArBh\"]=\"AR_BH\";LanguageCodeEnum[\"ArDj\"]=\"AR_DJ\";LanguageCodeEnum[\"ArDz\"]=\"AR_DZ\";LanguageCodeEnum[\"ArEg\"]=\"AR_EG\";LanguageCodeEnum[\"ArEh\"]=\"AR_EH\";LanguageCodeEnum[\"ArEr\"]=\"AR_ER\";LanguageCodeEnum[\"ArIl\"]=\"AR_IL\";LanguageCodeEnum[\"ArIq\"]=\"AR_IQ\";LanguageCodeEnum[\"ArJo\"]=\"AR_JO\";LanguageCodeEnum[\"ArKm\"]=\"AR_KM\";LanguageCodeEnum[\"ArKw\"]=\"AR_KW\";LanguageCodeEnum[\"ArLb\"]=\"AR_LB\";LanguageCodeEnum[\"ArLy\"]=\"AR_LY\";LanguageCodeEnum[\"ArMa\"]=\"AR_MA\";LanguageCodeEnum[\"ArMr\"]=\"AR_MR\";LanguageCodeEnum[\"ArOm\"]=\"AR_OM\";LanguageCodeEnum[\"ArPs\"]=\"AR_PS\";LanguageCodeEnum[\"ArQa\"]=\"AR_QA\";LanguageCodeEnum[\"ArSa\"]=\"AR_SA\";LanguageCodeEnum[\"ArSd\"]=\"AR_SD\";LanguageCodeEnum[\"ArSo\"]=\"AR_SO\";LanguageCodeEnum[\"ArSs\"]=\"AR_SS\";LanguageCodeEnum[\"ArSy\"]=\"AR_SY\";LanguageCodeEnum[\"ArTd\"]=\"AR_TD\";LanguageCodeEnum[\"ArTn\"]=\"AR_TN\";LanguageCodeEnum[\"ArYe\"]=\"AR_YE\";LanguageCodeEnum[\"As\"]=\"AS\";LanguageCodeEnum[\"Asa\"]=\"ASA\";LanguageCodeEnum[\"AsaTz\"]=\"ASA_TZ\";LanguageCodeEnum[\"Ast\"]=\"AST\";LanguageCodeEnum[\"AstEs\"]=\"AST_ES\";LanguageCodeEnum[\"AsIn\"]=\"AS_IN\";LanguageCodeEnum[\"Az\"]=\"AZ\";LanguageCodeEnum[\"AzCyrl\"]=\"AZ_CYRL\";LanguageCodeEnum[\"AzCyrlAz\"]=\"AZ_CYRL_AZ\";LanguageCodeEnum[\"AzLatn\"]=\"AZ_LATN\";LanguageCodeEnum[\"AzLatnAz\"]=\"AZ_LATN_AZ\";LanguageCodeEnum[\"Bas\"]=\"BAS\";LanguageCodeEnum[\"BasCm\"]=\"BAS_CM\";LanguageCodeEnum[\"Be\"]=\"BE\";LanguageCodeEnum[\"Bem\"]=\"BEM\";LanguageCodeEnum[\"BemZm\"]=\"BEM_ZM\";LanguageCodeEnum[\"Bez\"]=\"BEZ\";LanguageCodeEnum[\"BezTz\"]=\"BEZ_TZ\";LanguageCodeEnum[\"BeBy\"]=\"BE_BY\";LanguageCodeEnum[\"Bg\"]=\"BG\";LanguageCodeEnum[\"BgBg\"]=\"BG_BG\";LanguageCodeEnum[\"Bm\"]=\"BM\";LanguageCodeEnum[\"BmMl\"]=\"BM_ML\";LanguageCodeEnum[\"Bn\"]=\"BN\";LanguageCodeEnum[\"BnBd\"]=\"BN_BD\";LanguageCodeEnum[\"BnIn\"]=\"BN_IN\";LanguageCodeEnum[\"Bo\"]=\"BO\";LanguageCodeEnum[\"BoCn\"]=\"BO_CN\";LanguageCodeEnum[\"BoIn\"]=\"BO_IN\";LanguageCodeEnum[\"Br\"]=\"BR\";LanguageCodeEnum[\"Brx\"]=\"BRX\";LanguageCodeEnum[\"BrxIn\"]=\"BRX_IN\";LanguageCodeEnum[\"BrFr\"]=\"BR_FR\";LanguageCodeEnum[\"Bs\"]=\"BS\";LanguageCodeEnum[\"BsCyrl\"]=\"BS_CYRL\";LanguageCodeEnum[\"BsCyrlBa\"]=\"BS_CYRL_BA\";LanguageCodeEnum[\"BsLatn\"]=\"BS_LATN\";LanguageCodeEnum[\"BsLatnBa\"]=\"BS_LATN_BA\";LanguageCodeEnum[\"Ca\"]=\"CA\";LanguageCodeEnum[\"CaAd\"]=\"CA_AD\";LanguageCodeEnum[\"CaEs\"]=\"CA_ES\";LanguageCodeEnum[\"CaEsValencia\"]=\"CA_ES_VALENCIA\";LanguageCodeEnum[\"CaFr\"]=\"CA_FR\";LanguageCodeEnum[\"CaIt\"]=\"CA_IT\";LanguageCodeEnum[\"Ccp\"]=\"CCP\";LanguageCodeEnum[\"CcpBd\"]=\"CCP_BD\";LanguageCodeEnum[\"CcpIn\"]=\"CCP_IN\";LanguageCodeEnum[\"Ce\"]=\"CE\";LanguageCodeEnum[\"Ceb\"]=\"CEB\";LanguageCodeEnum[\"CebPh\"]=\"CEB_PH\";LanguageCodeEnum[\"CeRu\"]=\"CE_RU\";LanguageCodeEnum[\"Cgg\"]=\"CGG\";LanguageCodeEnum[\"CggUg\"]=\"CGG_UG\";LanguageCodeEnum[\"Chr\"]=\"CHR\";LanguageCodeEnum[\"ChrUs\"]=\"CHR_US\";LanguageCodeEnum[\"Ckb\"]=\"CKB\";LanguageCodeEnum[\"CkbIq\"]=\"CKB_IQ\";LanguageCodeEnum[\"CkbIr\"]=\"CKB_IR\";LanguageCodeEnum[\"Cs\"]=\"CS\";LanguageCodeEnum[\"CsCz\"]=\"CS_CZ\";LanguageCodeEnum[\"Cu\"]=\"CU\";LanguageCodeEnum[\"CuRu\"]=\"CU_RU\";LanguageCodeEnum[\"Cy\"]=\"CY\";LanguageCodeEnum[\"CyGb\"]=\"CY_GB\";LanguageCodeEnum[\"Da\"]=\"DA\";LanguageCodeEnum[\"Dav\"]=\"DAV\";LanguageCodeEnum[\"DavKe\"]=\"DAV_KE\";LanguageCodeEnum[\"DaDk\"]=\"DA_DK\";LanguageCodeEnum[\"DaGl\"]=\"DA_GL\";LanguageCodeEnum[\"De\"]=\"DE\";LanguageCodeEnum[\"DeAt\"]=\"DE_AT\";LanguageCodeEnum[\"DeBe\"]=\"DE_BE\";LanguageCodeEnum[\"DeCh\"]=\"DE_CH\";LanguageCodeEnum[\"DeDe\"]=\"DE_DE\";LanguageCodeEnum[\"DeIt\"]=\"DE_IT\";LanguageCodeEnum[\"DeLi\"]=\"DE_LI\";LanguageCodeEnum[\"DeLu\"]=\"DE_LU\";LanguageCodeEnum[\"Dje\"]=\"DJE\";LanguageCodeEnum[\"DjeNe\"]=\"DJE_NE\";LanguageCodeEnum[\"Dsb\"]=\"DSB\";LanguageCodeEnum[\"DsbDe\"]=\"DSB_DE\";LanguageCodeEnum[\"Dua\"]=\"DUA\";LanguageCodeEnum[\"DuaCm\"]=\"DUA_CM\";LanguageCodeEnum[\"Dyo\"]=\"DYO\";LanguageCodeEnum[\"DyoSn\"]=\"DYO_SN\";LanguageCodeEnum[\"Dz\"]=\"DZ\";LanguageCodeEnum[\"DzBt\"]=\"DZ_BT\";LanguageCodeEnum[\"Ebu\"]=\"EBU\";LanguageCodeEnum[\"EbuKe\"]=\"EBU_KE\";LanguageCodeEnum[\"Ee\"]=\"EE\";LanguageCodeEnum[\"EeGh\"]=\"EE_GH\";LanguageCodeEnum[\"EeTg\"]=\"EE_TG\";LanguageCodeEnum[\"El\"]=\"EL\";LanguageCodeEnum[\"ElCy\"]=\"EL_CY\";LanguageCodeEnum[\"ElGr\"]=\"EL_GR\";LanguageCodeEnum[\"En\"]=\"EN\";LanguageCodeEnum[\"EnAe\"]=\"EN_AE\";LanguageCodeEnum[\"EnAg\"]=\"EN_AG\";LanguageCodeEnum[\"EnAi\"]=\"EN_AI\";LanguageCodeEnum[\"EnAs\"]=\"EN_AS\";LanguageCodeEnum[\"EnAt\"]=\"EN_AT\";LanguageCodeEnum[\"EnAu\"]=\"EN_AU\";LanguageCodeEnum[\"EnBb\"]=\"EN_BB\";LanguageCodeEnum[\"EnBe\"]=\"EN_BE\";LanguageCodeEnum[\"EnBi\"]=\"EN_BI\";LanguageCodeEnum[\"EnBm\"]=\"EN_BM\";LanguageCodeEnum[\"EnBs\"]=\"EN_BS\";LanguageCodeEnum[\"EnBw\"]=\"EN_BW\";LanguageCodeEnum[\"EnBz\"]=\"EN_BZ\";LanguageCodeEnum[\"EnCa\"]=\"EN_CA\";LanguageCodeEnum[\"EnCc\"]=\"EN_CC\";LanguageCodeEnum[\"EnCh\"]=\"EN_CH\";LanguageCodeEnum[\"EnCk\"]=\"EN_CK\";LanguageCodeEnum[\"EnCm\"]=\"EN_CM\";LanguageCodeEnum[\"EnCx\"]=\"EN_CX\";LanguageCodeEnum[\"EnCy\"]=\"EN_CY\";LanguageCodeEnum[\"EnDe\"]=\"EN_DE\";LanguageCodeEnum[\"EnDg\"]=\"EN_DG\";LanguageCodeEnum[\"EnDk\"]=\"EN_DK\";LanguageCodeEnum[\"EnDm\"]=\"EN_DM\";LanguageCodeEnum[\"EnEr\"]=\"EN_ER\";LanguageCodeEnum[\"EnFi\"]=\"EN_FI\";LanguageCodeEnum[\"EnFj\"]=\"EN_FJ\";LanguageCodeEnum[\"EnFk\"]=\"EN_FK\";LanguageCodeEnum[\"EnFm\"]=\"EN_FM\";LanguageCodeEnum[\"EnGb\"]=\"EN_GB\";LanguageCodeEnum[\"EnGd\"]=\"EN_GD\";LanguageCodeEnum[\"EnGg\"]=\"EN_GG\";LanguageCodeEnum[\"EnGh\"]=\"EN_GH\";LanguageCodeEnum[\"EnGi\"]=\"EN_GI\";LanguageCodeEnum[\"EnGm\"]=\"EN_GM\";LanguageCodeEnum[\"EnGu\"]=\"EN_GU\";LanguageCodeEnum[\"EnGy\"]=\"EN_GY\";LanguageCodeEnum[\"EnHk\"]=\"EN_HK\";LanguageCodeEnum[\"EnIe\"]=\"EN_IE\";LanguageCodeEnum[\"EnIl\"]=\"EN_IL\";LanguageCodeEnum[\"EnIm\"]=\"EN_IM\";LanguageCodeEnum[\"EnIn\"]=\"EN_IN\";LanguageCodeEnum[\"EnIo\"]=\"EN_IO\";LanguageCodeEnum[\"EnJe\"]=\"EN_JE\";LanguageCodeEnum[\"EnJm\"]=\"EN_JM\";LanguageCodeEnum[\"EnKe\"]=\"EN_KE\";LanguageCodeEnum[\"EnKi\"]=\"EN_KI\";LanguageCodeEnum[\"EnKn\"]=\"EN_KN\";LanguageCodeEnum[\"EnKy\"]=\"EN_KY\";LanguageCodeEnum[\"EnLc\"]=\"EN_LC\";LanguageCodeEnum[\"EnLr\"]=\"EN_LR\";LanguageCodeEnum[\"EnLs\"]=\"EN_LS\";LanguageCodeEnum[\"EnMg\"]=\"EN_MG\";LanguageCodeEnum[\"EnMh\"]=\"EN_MH\";LanguageCodeEnum[\"EnMo\"]=\"EN_MO\";LanguageCodeEnum[\"EnMp\"]=\"EN_MP\";LanguageCodeEnum[\"EnMs\"]=\"EN_MS\";LanguageCodeEnum[\"EnMt\"]=\"EN_MT\";LanguageCodeEnum[\"EnMu\"]=\"EN_MU\";LanguageCodeEnum[\"EnMw\"]=\"EN_MW\";LanguageCodeEnum[\"EnMy\"]=\"EN_MY\";LanguageCodeEnum[\"EnNa\"]=\"EN_NA\";LanguageCodeEnum[\"EnNf\"]=\"EN_NF\";LanguageCodeEnum[\"EnNg\"]=\"EN_NG\";LanguageCodeEnum[\"EnNl\"]=\"EN_NL\";LanguageCodeEnum[\"EnNr\"]=\"EN_NR\";LanguageCodeEnum[\"EnNu\"]=\"EN_NU\";LanguageCodeEnum[\"EnNz\"]=\"EN_NZ\";LanguageCodeEnum[\"EnPg\"]=\"EN_PG\";LanguageCodeEnum[\"EnPh\"]=\"EN_PH\";LanguageCodeEnum[\"EnPk\"]=\"EN_PK\";LanguageCodeEnum[\"EnPn\"]=\"EN_PN\";LanguageCodeEnum[\"EnPr\"]=\"EN_PR\";LanguageCodeEnum[\"EnPw\"]=\"EN_PW\";LanguageCodeEnum[\"EnRw\"]=\"EN_RW\";LanguageCodeEnum[\"EnSb\"]=\"EN_SB\";LanguageCodeEnum[\"EnSc\"]=\"EN_SC\";LanguageCodeEnum[\"EnSd\"]=\"EN_SD\";LanguageCodeEnum[\"EnSe\"]=\"EN_SE\";LanguageCodeEnum[\"EnSg\"]=\"EN_SG\";LanguageCodeEnum[\"EnSh\"]=\"EN_SH\";LanguageCodeEnum[\"EnSi\"]=\"EN_SI\";LanguageCodeEnum[\"EnSl\"]=\"EN_SL\";LanguageCodeEnum[\"EnSs\"]=\"EN_SS\";LanguageCodeEnum[\"EnSx\"]=\"EN_SX\";LanguageCodeEnum[\"EnSz\"]=\"EN_SZ\";LanguageCodeEnum[\"EnTc\"]=\"EN_TC\";LanguageCodeEnum[\"EnTk\"]=\"EN_TK\";LanguageCodeEnum[\"EnTo\"]=\"EN_TO\";LanguageCodeEnum[\"EnTt\"]=\"EN_TT\";LanguageCodeEnum[\"EnTv\"]=\"EN_TV\";LanguageCodeEnum[\"EnTz\"]=\"EN_TZ\";LanguageCodeEnum[\"EnUg\"]=\"EN_UG\";LanguageCodeEnum[\"EnUm\"]=\"EN_UM\";LanguageCodeEnum[\"EnUs\"]=\"EN_US\";LanguageCodeEnum[\"EnVc\"]=\"EN_VC\";LanguageCodeEnum[\"EnVg\"]=\"EN_VG\";LanguageCodeEnum[\"EnVi\"]=\"EN_VI\";LanguageCodeEnum[\"EnVu\"]=\"EN_VU\";LanguageCodeEnum[\"EnWs\"]=\"EN_WS\";LanguageCodeEnum[\"EnZa\"]=\"EN_ZA\";LanguageCodeEnum[\"EnZm\"]=\"EN_ZM\";LanguageCodeEnum[\"EnZw\"]=\"EN_ZW\";LanguageCodeEnum[\"Eo\"]=\"EO\";LanguageCodeEnum[\"Es\"]=\"ES\";LanguageCodeEnum[\"EsAr\"]=\"ES_AR\";LanguageCodeEnum[\"EsBo\"]=\"ES_BO\";LanguageCodeEnum[\"EsBr\"]=\"ES_BR\";LanguageCodeEnum[\"EsBz\"]=\"ES_BZ\";LanguageCodeEnum[\"EsCl\"]=\"ES_CL\";LanguageCodeEnum[\"EsCo\"]=\"ES_CO\";LanguageCodeEnum[\"EsCr\"]=\"ES_CR\";LanguageCodeEnum[\"EsCu\"]=\"ES_CU\";LanguageCodeEnum[\"EsDo\"]=\"ES_DO\";LanguageCodeEnum[\"EsEa\"]=\"ES_EA\";LanguageCodeEnum[\"EsEc\"]=\"ES_EC\";LanguageCodeEnum[\"EsEs\"]=\"ES_ES\";LanguageCodeEnum[\"EsGq\"]=\"ES_GQ\";LanguageCodeEnum[\"EsGt\"]=\"ES_GT\";LanguageCodeEnum[\"EsHn\"]=\"ES_HN\";LanguageCodeEnum[\"EsIc\"]=\"ES_IC\";LanguageCodeEnum[\"EsMx\"]=\"ES_MX\";LanguageCodeEnum[\"EsNi\"]=\"ES_NI\";LanguageCodeEnum[\"EsPa\"]=\"ES_PA\";LanguageCodeEnum[\"EsPe\"]=\"ES_PE\";LanguageCodeEnum[\"EsPh\"]=\"ES_PH\";LanguageCodeEnum[\"EsPr\"]=\"ES_PR\";LanguageCodeEnum[\"EsPy\"]=\"ES_PY\";LanguageCodeEnum[\"EsSv\"]=\"ES_SV\";LanguageCodeEnum[\"EsUs\"]=\"ES_US\";LanguageCodeEnum[\"EsUy\"]=\"ES_UY\";LanguageCodeEnum[\"EsVe\"]=\"ES_VE\";LanguageCodeEnum[\"Et\"]=\"ET\";LanguageCodeEnum[\"EtEe\"]=\"ET_EE\";LanguageCodeEnum[\"Eu\"]=\"EU\";LanguageCodeEnum[\"EuEs\"]=\"EU_ES\";LanguageCodeEnum[\"Ewo\"]=\"EWO\";LanguageCodeEnum[\"EwoCm\"]=\"EWO_CM\";LanguageCodeEnum[\"Fa\"]=\"FA\";LanguageCodeEnum[\"FaAf\"]=\"FA_AF\";LanguageCodeEnum[\"FaIr\"]=\"FA_IR\";LanguageCodeEnum[\"Ff\"]=\"FF\";LanguageCodeEnum[\"FfAdlm\"]=\"FF_ADLM\";LanguageCodeEnum[\"FfAdlmBf\"]=\"FF_ADLM_BF\";LanguageCodeEnum[\"FfAdlmCm\"]=\"FF_ADLM_CM\";LanguageCodeEnum[\"FfAdlmGh\"]=\"FF_ADLM_GH\";LanguageCodeEnum[\"FfAdlmGm\"]=\"FF_ADLM_GM\";LanguageCodeEnum[\"FfAdlmGn\"]=\"FF_ADLM_GN\";LanguageCodeEnum[\"FfAdlmGw\"]=\"FF_ADLM_GW\";LanguageCodeEnum[\"FfAdlmLr\"]=\"FF_ADLM_LR\";LanguageCodeEnum[\"FfAdlmMr\"]=\"FF_ADLM_MR\";LanguageCodeEnum[\"FfAdlmNe\"]=\"FF_ADLM_NE\";LanguageCodeEnum[\"FfAdlmNg\"]=\"FF_ADLM_NG\";LanguageCodeEnum[\"FfAdlmSl\"]=\"FF_ADLM_SL\";LanguageCodeEnum[\"FfAdlmSn\"]=\"FF_ADLM_SN\";LanguageCodeEnum[\"FfLatn\"]=\"FF_LATN\";LanguageCodeEnum[\"FfLatnBf\"]=\"FF_LATN_BF\";LanguageCodeEnum[\"FfLatnCm\"]=\"FF_LATN_CM\";LanguageCodeEnum[\"FfLatnGh\"]=\"FF_LATN_GH\";LanguageCodeEnum[\"FfLatnGm\"]=\"FF_LATN_GM\";LanguageCodeEnum[\"FfLatnGn\"]=\"FF_LATN_GN\";LanguageCodeEnum[\"FfLatnGw\"]=\"FF_LATN_GW\";LanguageCodeEnum[\"FfLatnLr\"]=\"FF_LATN_LR\";LanguageCodeEnum[\"FfLatnMr\"]=\"FF_LATN_MR\";LanguageCodeEnum[\"FfLatnNe\"]=\"FF_LATN_NE\";LanguageCodeEnum[\"FfLatnNg\"]=\"FF_LATN_NG\";LanguageCodeEnum[\"FfLatnSl\"]=\"FF_LATN_SL\";LanguageCodeEnum[\"FfLatnSn\"]=\"FF_LATN_SN\";LanguageCodeEnum[\"Fi\"]=\"FI\";LanguageCodeEnum[\"Fil\"]=\"FIL\";LanguageCodeEnum[\"FilPh\"]=\"FIL_PH\";LanguageCodeEnum[\"FiFi\"]=\"FI_FI\";LanguageCodeEnum[\"Fo\"]=\"FO\";LanguageCodeEnum[\"FoDk\"]=\"FO_DK\";LanguageCodeEnum[\"FoFo\"]=\"FO_FO\";LanguageCodeEnum[\"Fr\"]=\"FR\";LanguageCodeEnum[\"FrBe\"]=\"FR_BE\";LanguageCodeEnum[\"FrBf\"]=\"FR_BF\";LanguageCodeEnum[\"FrBi\"]=\"FR_BI\";LanguageCodeEnum[\"FrBj\"]=\"FR_BJ\";LanguageCodeEnum[\"FrBl\"]=\"FR_BL\";LanguageCodeEnum[\"FrCa\"]=\"FR_CA\";LanguageCodeEnum[\"FrCd\"]=\"FR_CD\";LanguageCodeEnum[\"FrCf\"]=\"FR_CF\";LanguageCodeEnum[\"FrCg\"]=\"FR_CG\";LanguageCodeEnum[\"FrCh\"]=\"FR_CH\";LanguageCodeEnum[\"FrCi\"]=\"FR_CI\";LanguageCodeEnum[\"FrCm\"]=\"FR_CM\";LanguageCodeEnum[\"FrDj\"]=\"FR_DJ\";LanguageCodeEnum[\"FrDz\"]=\"FR_DZ\";LanguageCodeEnum[\"FrFr\"]=\"FR_FR\";LanguageCodeEnum[\"FrGa\"]=\"FR_GA\";LanguageCodeEnum[\"FrGf\"]=\"FR_GF\";LanguageCodeEnum[\"FrGn\"]=\"FR_GN\";LanguageCodeEnum[\"FrGp\"]=\"FR_GP\";LanguageCodeEnum[\"FrGq\"]=\"FR_GQ\";LanguageCodeEnum[\"FrHt\"]=\"FR_HT\";LanguageCodeEnum[\"FrKm\"]=\"FR_KM\";LanguageCodeEnum[\"FrLu\"]=\"FR_LU\";LanguageCodeEnum[\"FrMa\"]=\"FR_MA\";LanguageCodeEnum[\"FrMc\"]=\"FR_MC\";LanguageCodeEnum[\"FrMf\"]=\"FR_MF\";LanguageCodeEnum[\"FrMg\"]=\"FR_MG\";LanguageCodeEnum[\"FrMl\"]=\"FR_ML\";LanguageCodeEnum[\"FrMq\"]=\"FR_MQ\";LanguageCodeEnum[\"FrMr\"]=\"FR_MR\";LanguageCodeEnum[\"FrMu\"]=\"FR_MU\";LanguageCodeEnum[\"FrNc\"]=\"FR_NC\";LanguageCodeEnum[\"FrNe\"]=\"FR_NE\";LanguageCodeEnum[\"FrPf\"]=\"FR_PF\";LanguageCodeEnum[\"FrPm\"]=\"FR_PM\";LanguageCodeEnum[\"FrRe\"]=\"FR_RE\";LanguageCodeEnum[\"FrRw\"]=\"FR_RW\";LanguageCodeEnum[\"FrSc\"]=\"FR_SC\";LanguageCodeEnum[\"FrSn\"]=\"FR_SN\";LanguageCodeEnum[\"FrSy\"]=\"FR_SY\";LanguageCodeEnum[\"FrTd\"]=\"FR_TD\";LanguageCodeEnum[\"FrTg\"]=\"FR_TG\";LanguageCodeEnum[\"FrTn\"]=\"FR_TN\";LanguageCodeEnum[\"FrVu\"]=\"FR_VU\";LanguageCodeEnum[\"FrWf\"]=\"FR_WF\";LanguageCodeEnum[\"FrYt\"]=\"FR_YT\";LanguageCodeEnum[\"Fur\"]=\"FUR\";LanguageCodeEnum[\"FurIt\"]=\"FUR_IT\";LanguageCodeEnum[\"Fy\"]=\"FY\";LanguageCodeEnum[\"FyNl\"]=\"FY_NL\";LanguageCodeEnum[\"Ga\"]=\"GA\";LanguageCodeEnum[\"GaGb\"]=\"GA_GB\";LanguageCodeEnum[\"GaIe\"]=\"GA_IE\";LanguageCodeEnum[\"Gd\"]=\"GD\";LanguageCodeEnum[\"GdGb\"]=\"GD_GB\";LanguageCodeEnum[\"Gl\"]=\"GL\";LanguageCodeEnum[\"GlEs\"]=\"GL_ES\";LanguageCodeEnum[\"Gsw\"]=\"GSW\";LanguageCodeEnum[\"GswCh\"]=\"GSW_CH\";LanguageCodeEnum[\"GswFr\"]=\"GSW_FR\";LanguageCodeEnum[\"GswLi\"]=\"GSW_LI\";LanguageCodeEnum[\"Gu\"]=\"GU\";LanguageCodeEnum[\"Guz\"]=\"GUZ\";LanguageCodeEnum[\"GuzKe\"]=\"GUZ_KE\";LanguageCodeEnum[\"GuIn\"]=\"GU_IN\";LanguageCodeEnum[\"Gv\"]=\"GV\";LanguageCodeEnum[\"GvIm\"]=\"GV_IM\";LanguageCodeEnum[\"Ha\"]=\"HA\";LanguageCodeEnum[\"Haw\"]=\"HAW\";LanguageCodeEnum[\"HawUs\"]=\"HAW_US\";LanguageCodeEnum[\"HaGh\"]=\"HA_GH\";LanguageCodeEnum[\"HaNe\"]=\"HA_NE\";LanguageCodeEnum[\"HaNg\"]=\"HA_NG\";LanguageCodeEnum[\"He\"]=\"HE\";LanguageCodeEnum[\"HeIl\"]=\"HE_IL\";LanguageCodeEnum[\"Hi\"]=\"HI\";LanguageCodeEnum[\"HiIn\"]=\"HI_IN\";LanguageCodeEnum[\"Hr\"]=\"HR\";LanguageCodeEnum[\"HrBa\"]=\"HR_BA\";LanguageCodeEnum[\"HrHr\"]=\"HR_HR\";LanguageCodeEnum[\"Hsb\"]=\"HSB\";LanguageCodeEnum[\"HsbDe\"]=\"HSB_DE\";LanguageCodeEnum[\"Hu\"]=\"HU\";LanguageCodeEnum[\"HuHu\"]=\"HU_HU\";LanguageCodeEnum[\"Hy\"]=\"HY\";LanguageCodeEnum[\"HyAm\"]=\"HY_AM\";LanguageCodeEnum[\"Ia\"]=\"IA\";LanguageCodeEnum[\"Id\"]=\"ID\";LanguageCodeEnum[\"IdId\"]=\"ID_ID\";LanguageCodeEnum[\"Ig\"]=\"IG\";LanguageCodeEnum[\"IgNg\"]=\"IG_NG\";LanguageCodeEnum[\"Ii\"]=\"II\";LanguageCodeEnum[\"IiCn\"]=\"II_CN\";LanguageCodeEnum[\"Is\"]=\"IS\";LanguageCodeEnum[\"IsIs\"]=\"IS_IS\";LanguageCodeEnum[\"It\"]=\"IT\";LanguageCodeEnum[\"ItCh\"]=\"IT_CH\";LanguageCodeEnum[\"ItIt\"]=\"IT_IT\";LanguageCodeEnum[\"ItSm\"]=\"IT_SM\";LanguageCodeEnum[\"ItVa\"]=\"IT_VA\";LanguageCodeEnum[\"Ja\"]=\"JA\";LanguageCodeEnum[\"JaJp\"]=\"JA_JP\";LanguageCodeEnum[\"Jgo\"]=\"JGO\";LanguageCodeEnum[\"JgoCm\"]=\"JGO_CM\";LanguageCodeEnum[\"Jmc\"]=\"JMC\";LanguageCodeEnum[\"JmcTz\"]=\"JMC_TZ\";LanguageCodeEnum[\"Jv\"]=\"JV\";LanguageCodeEnum[\"JvId\"]=\"JV_ID\";LanguageCodeEnum[\"Ka\"]=\"KA\";LanguageCodeEnum[\"Kab\"]=\"KAB\";LanguageCodeEnum[\"KabDz\"]=\"KAB_DZ\";LanguageCodeEnum[\"Kam\"]=\"KAM\";LanguageCodeEnum[\"KamKe\"]=\"KAM_KE\";LanguageCodeEnum[\"KaGe\"]=\"KA_GE\";LanguageCodeEnum[\"Kde\"]=\"KDE\";LanguageCodeEnum[\"KdeTz\"]=\"KDE_TZ\";LanguageCodeEnum[\"Kea\"]=\"KEA\";LanguageCodeEnum[\"KeaCv\"]=\"KEA_CV\";LanguageCodeEnum[\"Khq\"]=\"KHQ\";LanguageCodeEnum[\"KhqMl\"]=\"KHQ_ML\";LanguageCodeEnum[\"Ki\"]=\"KI\";LanguageCodeEnum[\"KiKe\"]=\"KI_KE\";LanguageCodeEnum[\"Kk\"]=\"KK\";LanguageCodeEnum[\"Kkj\"]=\"KKJ\";LanguageCodeEnum[\"KkjCm\"]=\"KKJ_CM\";LanguageCodeEnum[\"KkKz\"]=\"KK_KZ\";LanguageCodeEnum[\"Kl\"]=\"KL\";LanguageCodeEnum[\"Kln\"]=\"KLN\";LanguageCodeEnum[\"KlnKe\"]=\"KLN_KE\";LanguageCodeEnum[\"KlGl\"]=\"KL_GL\";LanguageCodeEnum[\"Km\"]=\"KM\";LanguageCodeEnum[\"KmKh\"]=\"KM_KH\";LanguageCodeEnum[\"Kn\"]=\"KN\";LanguageCodeEnum[\"KnIn\"]=\"KN_IN\";LanguageCodeEnum[\"Ko\"]=\"KO\";LanguageCodeEnum[\"Kok\"]=\"KOK\";LanguageCodeEnum[\"KokIn\"]=\"KOK_IN\";LanguageCodeEnum[\"KoKp\"]=\"KO_KP\";LanguageCodeEnum[\"KoKr\"]=\"KO_KR\";LanguageCodeEnum[\"Ks\"]=\"KS\";LanguageCodeEnum[\"Ksb\"]=\"KSB\";LanguageCodeEnum[\"KsbTz\"]=\"KSB_TZ\";LanguageCodeEnum[\"Ksf\"]=\"KSF\";LanguageCodeEnum[\"KsfCm\"]=\"KSF_CM\";LanguageCodeEnum[\"Ksh\"]=\"KSH\";LanguageCodeEnum[\"KshDe\"]=\"KSH_DE\";LanguageCodeEnum[\"KsArab\"]=\"KS_ARAB\";LanguageCodeEnum[\"KsArabIn\"]=\"KS_ARAB_IN\";LanguageCodeEnum[\"Ku\"]=\"KU\";LanguageCodeEnum[\"KuTr\"]=\"KU_TR\";LanguageCodeEnum[\"Kw\"]=\"KW\";LanguageCodeEnum[\"KwGb\"]=\"KW_GB\";LanguageCodeEnum[\"Ky\"]=\"KY\";LanguageCodeEnum[\"KyKg\"]=\"KY_KG\";LanguageCodeEnum[\"Lag\"]=\"LAG\";LanguageCodeEnum[\"LagTz\"]=\"LAG_TZ\";LanguageCodeEnum[\"Lb\"]=\"LB\";LanguageCodeEnum[\"LbLu\"]=\"LB_LU\";LanguageCodeEnum[\"Lg\"]=\"LG\";LanguageCodeEnum[\"LgUg\"]=\"LG_UG\";LanguageCodeEnum[\"Lkt\"]=\"LKT\";LanguageCodeEnum[\"LktUs\"]=\"LKT_US\";LanguageCodeEnum[\"Ln\"]=\"LN\";LanguageCodeEnum[\"LnAo\"]=\"LN_AO\";LanguageCodeEnum[\"LnCd\"]=\"LN_CD\";LanguageCodeEnum[\"LnCf\"]=\"LN_CF\";LanguageCodeEnum[\"LnCg\"]=\"LN_CG\";LanguageCodeEnum[\"Lo\"]=\"LO\";LanguageCodeEnum[\"LoLa\"]=\"LO_LA\";LanguageCodeEnum[\"Lrc\"]=\"LRC\";LanguageCodeEnum[\"LrcIq\"]=\"LRC_IQ\";LanguageCodeEnum[\"LrcIr\"]=\"LRC_IR\";LanguageCodeEnum[\"Lt\"]=\"LT\";LanguageCodeEnum[\"LtLt\"]=\"LT_LT\";LanguageCodeEnum[\"Lu\"]=\"LU\";LanguageCodeEnum[\"Luo\"]=\"LUO\";LanguageCodeEnum[\"LuoKe\"]=\"LUO_KE\";LanguageCodeEnum[\"Luy\"]=\"LUY\";LanguageCodeEnum[\"LuyKe\"]=\"LUY_KE\";LanguageCodeEnum[\"LuCd\"]=\"LU_CD\";LanguageCodeEnum[\"Lv\"]=\"LV\";LanguageCodeEnum[\"LvLv\"]=\"LV_LV\";LanguageCodeEnum[\"Mai\"]=\"MAI\";LanguageCodeEnum[\"MaiIn\"]=\"MAI_IN\";LanguageCodeEnum[\"Mas\"]=\"MAS\";LanguageCodeEnum[\"MasKe\"]=\"MAS_KE\";LanguageCodeEnum[\"MasTz\"]=\"MAS_TZ\";LanguageCodeEnum[\"Mer\"]=\"MER\";LanguageCodeEnum[\"MerKe\"]=\"MER_KE\";LanguageCodeEnum[\"Mfe\"]=\"MFE\";LanguageCodeEnum[\"MfeMu\"]=\"MFE_MU\";LanguageCodeEnum[\"Mg\"]=\"MG\";LanguageCodeEnum[\"Mgh\"]=\"MGH\";LanguageCodeEnum[\"MghMz\"]=\"MGH_MZ\";LanguageCodeEnum[\"Mgo\"]=\"MGO\";LanguageCodeEnum[\"MgoCm\"]=\"MGO_CM\";LanguageCodeEnum[\"MgMg\"]=\"MG_MG\";LanguageCodeEnum[\"Mi\"]=\"MI\";LanguageCodeEnum[\"MiNz\"]=\"MI_NZ\";LanguageCodeEnum[\"Mk\"]=\"MK\";LanguageCodeEnum[\"MkMk\"]=\"MK_MK\";LanguageCodeEnum[\"Ml\"]=\"ML\";LanguageCodeEnum[\"MlIn\"]=\"ML_IN\";LanguageCodeEnum[\"Mn\"]=\"MN\";LanguageCodeEnum[\"Mni\"]=\"MNI\";LanguageCodeEnum[\"MniBeng\"]=\"MNI_BENG\";LanguageCodeEnum[\"MniBengIn\"]=\"MNI_BENG_IN\";LanguageCodeEnum[\"MnMn\"]=\"MN_MN\";LanguageCodeEnum[\"Mr\"]=\"MR\";LanguageCodeEnum[\"MrIn\"]=\"MR_IN\";LanguageCodeEnum[\"Ms\"]=\"MS\";LanguageCodeEnum[\"MsBn\"]=\"MS_BN\";LanguageCodeEnum[\"MsId\"]=\"MS_ID\";LanguageCodeEnum[\"MsMy\"]=\"MS_MY\";LanguageCodeEnum[\"MsSg\"]=\"MS_SG\";LanguageCodeEnum[\"Mt\"]=\"MT\";LanguageCodeEnum[\"MtMt\"]=\"MT_MT\";LanguageCodeEnum[\"Mua\"]=\"MUA\";LanguageCodeEnum[\"MuaCm\"]=\"MUA_CM\";LanguageCodeEnum[\"My\"]=\"MY\";LanguageCodeEnum[\"MyMm\"]=\"MY_MM\";LanguageCodeEnum[\"Mzn\"]=\"MZN\";LanguageCodeEnum[\"MznIr\"]=\"MZN_IR\";LanguageCodeEnum[\"Naq\"]=\"NAQ\";LanguageCodeEnum[\"NaqNa\"]=\"NAQ_NA\";LanguageCodeEnum[\"Nb\"]=\"NB\";LanguageCodeEnum[\"NbNo\"]=\"NB_NO\";LanguageCodeEnum[\"NbSj\"]=\"NB_SJ\";LanguageCodeEnum[\"Nd\"]=\"ND\";LanguageCodeEnum[\"Nds\"]=\"NDS\";LanguageCodeEnum[\"NdsDe\"]=\"NDS_DE\";LanguageCodeEnum[\"NdsNl\"]=\"NDS_NL\";LanguageCodeEnum[\"NdZw\"]=\"ND_ZW\";LanguageCodeEnum[\"Ne\"]=\"NE\";LanguageCodeEnum[\"NeIn\"]=\"NE_IN\";LanguageCodeEnum[\"NeNp\"]=\"NE_NP\";LanguageCodeEnum[\"Nl\"]=\"NL\";LanguageCodeEnum[\"NlAw\"]=\"NL_AW\";LanguageCodeEnum[\"NlBe\"]=\"NL_BE\";LanguageCodeEnum[\"NlBq\"]=\"NL_BQ\";LanguageCodeEnum[\"NlCw\"]=\"NL_CW\";LanguageCodeEnum[\"NlNl\"]=\"NL_NL\";LanguageCodeEnum[\"NlSr\"]=\"NL_SR\";LanguageCodeEnum[\"NlSx\"]=\"NL_SX\";LanguageCodeEnum[\"Nmg\"]=\"NMG\";LanguageCodeEnum[\"NmgCm\"]=\"NMG_CM\";LanguageCodeEnum[\"Nn\"]=\"NN\";LanguageCodeEnum[\"Nnh\"]=\"NNH\";LanguageCodeEnum[\"NnhCm\"]=\"NNH_CM\";LanguageCodeEnum[\"NnNo\"]=\"NN_NO\";LanguageCodeEnum[\"Nus\"]=\"NUS\";LanguageCodeEnum[\"NusSs\"]=\"NUS_SS\";LanguageCodeEnum[\"Nyn\"]=\"NYN\";LanguageCodeEnum[\"NynUg\"]=\"NYN_UG\";LanguageCodeEnum[\"Om\"]=\"OM\";LanguageCodeEnum[\"OmEt\"]=\"OM_ET\";LanguageCodeEnum[\"OmKe\"]=\"OM_KE\";LanguageCodeEnum[\"Or\"]=\"OR\";LanguageCodeEnum[\"OrIn\"]=\"OR_IN\";LanguageCodeEnum[\"Os\"]=\"OS\";LanguageCodeEnum[\"OsGe\"]=\"OS_GE\";LanguageCodeEnum[\"OsRu\"]=\"OS_RU\";LanguageCodeEnum[\"Pa\"]=\"PA\";LanguageCodeEnum[\"PaArab\"]=\"PA_ARAB\";LanguageCodeEnum[\"PaArabPk\"]=\"PA_ARAB_PK\";LanguageCodeEnum[\"PaGuru\"]=\"PA_GURU\";LanguageCodeEnum[\"PaGuruIn\"]=\"PA_GURU_IN\";LanguageCodeEnum[\"Pcm\"]=\"PCM\";LanguageCodeEnum[\"PcmNg\"]=\"PCM_NG\";LanguageCodeEnum[\"Pl\"]=\"PL\";LanguageCodeEnum[\"PlPl\"]=\"PL_PL\";LanguageCodeEnum[\"Prg\"]=\"PRG\";LanguageCodeEnum[\"Ps\"]=\"PS\";LanguageCodeEnum[\"PsAf\"]=\"PS_AF\";LanguageCodeEnum[\"PsPk\"]=\"PS_PK\";LanguageCodeEnum[\"Pt\"]=\"PT\";LanguageCodeEnum[\"PtAo\"]=\"PT_AO\";LanguageCodeEnum[\"PtBr\"]=\"PT_BR\";LanguageCodeEnum[\"PtCh\"]=\"PT_CH\";LanguageCodeEnum[\"PtCv\"]=\"PT_CV\";LanguageCodeEnum[\"PtGq\"]=\"PT_GQ\";LanguageCodeEnum[\"PtGw\"]=\"PT_GW\";LanguageCodeEnum[\"PtLu\"]=\"PT_LU\";LanguageCodeEnum[\"PtMo\"]=\"PT_MO\";LanguageCodeEnum[\"PtMz\"]=\"PT_MZ\";LanguageCodeEnum[\"PtPt\"]=\"PT_PT\";LanguageCodeEnum[\"PtSt\"]=\"PT_ST\";LanguageCodeEnum[\"PtTl\"]=\"PT_TL\";LanguageCodeEnum[\"Qu\"]=\"QU\";LanguageCodeEnum[\"QuBo\"]=\"QU_BO\";LanguageCodeEnum[\"QuEc\"]=\"QU_EC\";LanguageCodeEnum[\"QuPe\"]=\"QU_PE\";LanguageCodeEnum[\"Rm\"]=\"RM\";LanguageCodeEnum[\"RmCh\"]=\"RM_CH\";LanguageCodeEnum[\"Rn\"]=\"RN\";LanguageCodeEnum[\"RnBi\"]=\"RN_BI\";LanguageCodeEnum[\"Ro\"]=\"RO\";LanguageCodeEnum[\"Rof\"]=\"ROF\";LanguageCodeEnum[\"RofTz\"]=\"ROF_TZ\";LanguageCodeEnum[\"RoMd\"]=\"RO_MD\";LanguageCodeEnum[\"RoRo\"]=\"RO_RO\";LanguageCodeEnum[\"Ru\"]=\"RU\";LanguageCodeEnum[\"RuBy\"]=\"RU_BY\";LanguageCodeEnum[\"RuKg\"]=\"RU_KG\";LanguageCodeEnum[\"RuKz\"]=\"RU_KZ\";LanguageCodeEnum[\"RuMd\"]=\"RU_MD\";LanguageCodeEnum[\"RuRu\"]=\"RU_RU\";LanguageCodeEnum[\"RuUa\"]=\"RU_UA\";LanguageCodeEnum[\"Rw\"]=\"RW\";LanguageCodeEnum[\"Rwk\"]=\"RWK\";LanguageCodeEnum[\"RwkTz\"]=\"RWK_TZ\";LanguageCodeEnum[\"RwRw\"]=\"RW_RW\";LanguageCodeEnum[\"Sah\"]=\"SAH\";LanguageCodeEnum[\"SahRu\"]=\"SAH_RU\";LanguageCodeEnum[\"Saq\"]=\"SAQ\";LanguageCodeEnum[\"SaqKe\"]=\"SAQ_KE\";LanguageCodeEnum[\"Sat\"]=\"SAT\";LanguageCodeEnum[\"SatOlck\"]=\"SAT_OLCK\";LanguageCodeEnum[\"SatOlckIn\"]=\"SAT_OLCK_IN\";LanguageCodeEnum[\"Sbp\"]=\"SBP\";LanguageCodeEnum[\"SbpTz\"]=\"SBP_TZ\";LanguageCodeEnum[\"Sd\"]=\"SD\";LanguageCodeEnum[\"SdArab\"]=\"SD_ARAB\";LanguageCodeEnum[\"SdArabPk\"]=\"SD_ARAB_PK\";LanguageCodeEnum[\"SdDeva\"]=\"SD_DEVA\";LanguageCodeEnum[\"SdDevaIn\"]=\"SD_DEVA_IN\";LanguageCodeEnum[\"Se\"]=\"SE\";LanguageCodeEnum[\"Seh\"]=\"SEH\";LanguageCodeEnum[\"SehMz\"]=\"SEH_MZ\";LanguageCodeEnum[\"Ses\"]=\"SES\";LanguageCodeEnum[\"SesMl\"]=\"SES_ML\";LanguageCodeEnum[\"SeFi\"]=\"SE_FI\";LanguageCodeEnum[\"SeNo\"]=\"SE_NO\";LanguageCodeEnum[\"SeSe\"]=\"SE_SE\";LanguageCodeEnum[\"Sg\"]=\"SG\";LanguageCodeEnum[\"SgCf\"]=\"SG_CF\";LanguageCodeEnum[\"Shi\"]=\"SHI\";LanguageCodeEnum[\"ShiLatn\"]=\"SHI_LATN\";LanguageCodeEnum[\"ShiLatnMa\"]=\"SHI_LATN_MA\";LanguageCodeEnum[\"ShiTfng\"]=\"SHI_TFNG\";LanguageCodeEnum[\"ShiTfngMa\"]=\"SHI_TFNG_MA\";LanguageCodeEnum[\"Si\"]=\"SI\";LanguageCodeEnum[\"SiLk\"]=\"SI_LK\";LanguageCodeEnum[\"Sk\"]=\"SK\";LanguageCodeEnum[\"SkSk\"]=\"SK_SK\";LanguageCodeEnum[\"Sl\"]=\"SL\";LanguageCodeEnum[\"SlSi\"]=\"SL_SI\";LanguageCodeEnum[\"Smn\"]=\"SMN\";LanguageCodeEnum[\"SmnFi\"]=\"SMN_FI\";LanguageCodeEnum[\"Sn\"]=\"SN\";LanguageCodeEnum[\"SnZw\"]=\"SN_ZW\";LanguageCodeEnum[\"So\"]=\"SO\";LanguageCodeEnum[\"SoDj\"]=\"SO_DJ\";LanguageCodeEnum[\"SoEt\"]=\"SO_ET\";LanguageCodeEnum[\"SoKe\"]=\"SO_KE\";LanguageCodeEnum[\"SoSo\"]=\"SO_SO\";LanguageCodeEnum[\"Sq\"]=\"SQ\";LanguageCodeEnum[\"SqAl\"]=\"SQ_AL\";LanguageCodeEnum[\"SqMk\"]=\"SQ_MK\";LanguageCodeEnum[\"SqXk\"]=\"SQ_XK\";LanguageCodeEnum[\"Sr\"]=\"SR\";LanguageCodeEnum[\"SrCyrl\"]=\"SR_CYRL\";LanguageCodeEnum[\"SrCyrlBa\"]=\"SR_CYRL_BA\";LanguageCodeEnum[\"SrCyrlMe\"]=\"SR_CYRL_ME\";LanguageCodeEnum[\"SrCyrlRs\"]=\"SR_CYRL_RS\";LanguageCodeEnum[\"SrCyrlXk\"]=\"SR_CYRL_XK\";LanguageCodeEnum[\"SrLatn\"]=\"SR_LATN\";LanguageCodeEnum[\"SrLatnBa\"]=\"SR_LATN_BA\";LanguageCodeEnum[\"SrLatnMe\"]=\"SR_LATN_ME\";LanguageCodeEnum[\"SrLatnRs\"]=\"SR_LATN_RS\";LanguageCodeEnum[\"SrLatnXk\"]=\"SR_LATN_XK\";LanguageCodeEnum[\"Su\"]=\"SU\";LanguageCodeEnum[\"SuLatn\"]=\"SU_LATN\";LanguageCodeEnum[\"SuLatnId\"]=\"SU_LATN_ID\";LanguageCodeEnum[\"Sv\"]=\"SV\";LanguageCodeEnum[\"SvAx\"]=\"SV_AX\";LanguageCodeEnum[\"SvFi\"]=\"SV_FI\";LanguageCodeEnum[\"SvSe\"]=\"SV_SE\";LanguageCodeEnum[\"Sw\"]=\"SW\";LanguageCodeEnum[\"SwCd\"]=\"SW_CD\";LanguageCodeEnum[\"SwKe\"]=\"SW_KE\";LanguageCodeEnum[\"SwTz\"]=\"SW_TZ\";LanguageCodeEnum[\"SwUg\"]=\"SW_UG\";LanguageCodeEnum[\"Ta\"]=\"TA\";LanguageCodeEnum[\"TaIn\"]=\"TA_IN\";LanguageCodeEnum[\"TaLk\"]=\"TA_LK\";LanguageCodeEnum[\"TaMy\"]=\"TA_MY\";LanguageCodeEnum[\"TaSg\"]=\"TA_SG\";LanguageCodeEnum[\"Te\"]=\"TE\";LanguageCodeEnum[\"Teo\"]=\"TEO\";LanguageCodeEnum[\"TeoKe\"]=\"TEO_KE\";LanguageCodeEnum[\"TeoUg\"]=\"TEO_UG\";LanguageCodeEnum[\"TeIn\"]=\"TE_IN\";LanguageCodeEnum[\"Tg\"]=\"TG\";LanguageCodeEnum[\"TgTj\"]=\"TG_TJ\";LanguageCodeEnum[\"Th\"]=\"TH\";LanguageCodeEnum[\"ThTh\"]=\"TH_TH\";LanguageCodeEnum[\"Ti\"]=\"TI\";LanguageCodeEnum[\"TiEr\"]=\"TI_ER\";LanguageCodeEnum[\"TiEt\"]=\"TI_ET\";LanguageCodeEnum[\"Tk\"]=\"TK\";LanguageCodeEnum[\"TkTm\"]=\"TK_TM\";LanguageCodeEnum[\"To\"]=\"TO\";LanguageCodeEnum[\"ToTo\"]=\"TO_TO\";LanguageCodeEnum[\"Tr\"]=\"TR\";LanguageCodeEnum[\"TrCy\"]=\"TR_CY\";LanguageCodeEnum[\"TrTr\"]=\"TR_TR\";LanguageCodeEnum[\"Tt\"]=\"TT\";LanguageCodeEnum[\"TtRu\"]=\"TT_RU\";LanguageCodeEnum[\"Twq\"]=\"TWQ\";LanguageCodeEnum[\"TwqNe\"]=\"TWQ_NE\";LanguageCodeEnum[\"Tzm\"]=\"TZM\";LanguageCodeEnum[\"TzmMa\"]=\"TZM_MA\";LanguageCodeEnum[\"Ug\"]=\"UG\";LanguageCodeEnum[\"UgCn\"]=\"UG_CN\";LanguageCodeEnum[\"Uk\"]=\"UK\";LanguageCodeEnum[\"UkUa\"]=\"UK_UA\";LanguageCodeEnum[\"Ur\"]=\"UR\";LanguageCodeEnum[\"UrIn\"]=\"UR_IN\";LanguageCodeEnum[\"UrPk\"]=\"UR_PK\";LanguageCodeEnum[\"Uz\"]=\"UZ\";LanguageCodeEnum[\"UzArab\"]=\"UZ_ARAB\";LanguageCodeEnum[\"UzArabAf\"]=\"UZ_ARAB_AF\";LanguageCodeEnum[\"UzCyrl\"]=\"UZ_CYRL\";LanguageCodeEnum[\"UzCyrlUz\"]=\"UZ_CYRL_UZ\";LanguageCodeEnum[\"UzLatn\"]=\"UZ_LATN\";LanguageCodeEnum[\"UzLatnUz\"]=\"UZ_LATN_UZ\";LanguageCodeEnum[\"Vai\"]=\"VAI\";LanguageCodeEnum[\"VaiLatn\"]=\"VAI_LATN\";LanguageCodeEnum[\"VaiLatnLr\"]=\"VAI_LATN_LR\";LanguageCodeEnum[\"VaiVaii\"]=\"VAI_VAII\";LanguageCodeEnum[\"VaiVaiiLr\"]=\"VAI_VAII_LR\";LanguageCodeEnum[\"Vi\"]=\"VI\";LanguageCodeEnum[\"ViVn\"]=\"VI_VN\";LanguageCodeEnum[\"Vo\"]=\"VO\";LanguageCodeEnum[\"Vun\"]=\"VUN\";LanguageCodeEnum[\"VunTz\"]=\"VUN_TZ\";LanguageCodeEnum[\"Wae\"]=\"WAE\";LanguageCodeEnum[\"WaeCh\"]=\"WAE_CH\";LanguageCodeEnum[\"Wo\"]=\"WO\";LanguageCodeEnum[\"WoSn\"]=\"WO_SN\";LanguageCodeEnum[\"Xh\"]=\"XH\";LanguageCodeEnum[\"XhZa\"]=\"XH_ZA\";LanguageCodeEnum[\"Xog\"]=\"XOG\";LanguageCodeEnum[\"XogUg\"]=\"XOG_UG\";LanguageCodeEnum[\"Yav\"]=\"YAV\";LanguageCodeEnum[\"YavCm\"]=\"YAV_CM\";LanguageCodeEnum[\"Yi\"]=\"YI\";LanguageCodeEnum[\"Yo\"]=\"YO\";LanguageCodeEnum[\"YoBj\"]=\"YO_BJ\";LanguageCodeEnum[\"YoNg\"]=\"YO_NG\";LanguageCodeEnum[\"Yue\"]=\"YUE\";LanguageCodeEnum[\"YueHans\"]=\"YUE_HANS\";LanguageCodeEnum[\"YueHansCn\"]=\"YUE_HANS_CN\";LanguageCodeEnum[\"YueHant\"]=\"YUE_HANT\";LanguageCodeEnum[\"YueHantHk\"]=\"YUE_HANT_HK\";LanguageCodeEnum[\"Zgh\"]=\"ZGH\";LanguageCodeEnum[\"ZghMa\"]=\"ZGH_MA\";LanguageCodeEnum[\"Zh\"]=\"ZH\";LanguageCodeEnum[\"ZhHans\"]=\"ZH_HANS\";LanguageCodeEnum[\"ZhHansCn\"]=\"ZH_HANS_CN\";LanguageCodeEnum[\"ZhHansHk\"]=\"ZH_HANS_HK\";LanguageCodeEnum[\"ZhHansMo\"]=\"ZH_HANS_MO\";LanguageCodeEnum[\"ZhHansSg\"]=\"ZH_HANS_SG\";LanguageCodeEnum[\"ZhHant\"]=\"ZH_HANT\";LanguageCodeEnum[\"ZhHantHk\"]=\"ZH_HANT_HK\";LanguageCodeEnum[\"ZhHantMo\"]=\"ZH_HANT_MO\";LanguageCodeEnum[\"ZhHantTw\"]=\"ZH_HANT_TW\";LanguageCodeEnum[\"Zu\"]=\"ZU\";LanguageCodeEnum[\"ZuZa\"]=\"ZU_ZA\";})(LanguageCodeEnum||(LanguageCodeEnum={}));/** An enumeration. */let MeasurementUnitsEnum;(function(MeasurementUnitsEnum){MeasurementUnitsEnum[\"AcreFt\"]=\"ACRE_FT\";MeasurementUnitsEnum[\"AcreIn\"]=\"ACRE_IN\";MeasurementUnitsEnum[\"Cm\"]=\"CM\";MeasurementUnitsEnum[\"CubicCentimeter\"]=\"CUBIC_CENTIMETER\";MeasurementUnitsEnum[\"CubicDecimeter\"]=\"CUBIC_DECIMETER\";MeasurementUnitsEnum[\"CubicFoot\"]=\"CUBIC_FOOT\";MeasurementUnitsEnum[\"CubicInch\"]=\"CUBIC_INCH\";MeasurementUnitsEnum[\"CubicMeter\"]=\"CUBIC_METER\";MeasurementUnitsEnum[\"CubicMillimeter\"]=\"CUBIC_MILLIMETER\";MeasurementUnitsEnum[\"CubicYard\"]=\"CUBIC_YARD\";MeasurementUnitsEnum[\"FlOz\"]=\"FL_OZ\";MeasurementUnitsEnum[\"Ft\"]=\"FT\";MeasurementUnitsEnum[\"G\"]=\"G\";MeasurementUnitsEnum[\"Inch\"]=\"INCH\";MeasurementUnitsEnum[\"Kg\"]=\"KG\";MeasurementUnitsEnum[\"Km\"]=\"KM\";MeasurementUnitsEnum[\"Lb\"]=\"LB\";MeasurementUnitsEnum[\"Liter\"]=\"LITER\";MeasurementUnitsEnum[\"M\"]=\"M\";MeasurementUnitsEnum[\"Oz\"]=\"OZ\";MeasurementUnitsEnum[\"Pint\"]=\"PINT\";MeasurementUnitsEnum[\"Qt\"]=\"QT\";MeasurementUnitsEnum[\"SqCm\"]=\"SQ_CM\";MeasurementUnitsEnum[\"SqFt\"]=\"SQ_FT\";MeasurementUnitsEnum[\"SqInch\"]=\"SQ_INCH\";MeasurementUnitsEnum[\"SqKm\"]=\"SQ_KM\";MeasurementUnitsEnum[\"SqM\"]=\"SQ_M\";MeasurementUnitsEnum[\"SqYd\"]=\"SQ_YD\";MeasurementUnitsEnum[\"Tonne\"]=\"TONNE\";MeasurementUnitsEnum[\"Yd\"]=\"YD\";})(MeasurementUnitsEnum||(MeasurementUnitsEnum={}));let MediaChoicesSortField;(function(MediaChoicesSortField){MediaChoicesSortField[\"Id\"]=\"ID\";})(MediaChoicesSortField||(MediaChoicesSortField={}));/** An enumeration. */let MenuErrorCode;(function(MenuErrorCode){MenuErrorCode[\"CannotAssignNode\"]=\"CANNOT_ASSIGN_NODE\";MenuErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";MenuErrorCode[\"Invalid\"]=\"INVALID\";MenuErrorCode[\"InvalidMenuItem\"]=\"INVALID_MENU_ITEM\";MenuErrorCode[\"NotFound\"]=\"NOT_FOUND\";MenuErrorCode[\"NoMenuItemProvided\"]=\"NO_MENU_ITEM_PROVIDED\";MenuErrorCode[\"Required\"]=\"REQUIRED\";MenuErrorCode[\"TooManyMenuItems\"]=\"TOO_MANY_MENU_ITEMS\";MenuErrorCode[\"Unique\"]=\"UNIQUE\";})(MenuErrorCode||(MenuErrorCode={}));let MenuItemsSortField;(function(MenuItemsSortField){MenuItemsSortField[\"Name\"]=\"NAME\";})(MenuItemsSortField||(MenuItemsSortField={}));let MenuSortField;(function(MenuSortField){MenuSortField[\"ItemsCount\"]=\"ITEMS_COUNT\";MenuSortField[\"Name\"]=\"NAME\";})(MenuSortField||(MenuSortField={}));/** An enumeration. */let MetadataErrorCode;(function(MetadataErrorCode){MetadataErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";MetadataErrorCode[\"Invalid\"]=\"INVALID\";MetadataErrorCode[\"NotFound\"]=\"NOT_FOUND\";MetadataErrorCode[\"NotUpdated\"]=\"NOT_UPDATED\";MetadataErrorCode[\"Required\"]=\"REQUIRED\";})(MetadataErrorCode||(MetadataErrorCode={}));let NavigationType;/** An object with an ID */(function(NavigationType){NavigationType[\"Main\"]=\"MAIN\";NavigationType[\"Secondary\"]=\"SECONDARY\";})(NavigationType||(NavigationType={}));let OrderAction;/**\r\n * Adds note to the order.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(OrderAction){OrderAction[\"Capture\"]=\"CAPTURE\";OrderAction[\"MarkAsPaid\"]=\"MARK_AS_PAID\";OrderAction[\"Refund\"]=\"REFUND\";OrderAction[\"Void\"]=\"VOID\";})(OrderAction||(OrderAction={}));/**\r\n * Determine a current authorize status for order.\r\n *\r\n *     We treat the order as fully authorized when the sum of authorized and charged funds\r\n *     cover the order.total.\r\n *     We treat the order as partially authorized when the sum of authorized and charged\r\n *     funds covers only part of the order.total\r\n *     We treat the order as not authorized when the sum of authorized and charged funds is\r\n *     0.\r\n *\r\n *     NONE - the funds are not authorized\r\n *     PARTIAL - the funds that are authorized or charged don't cover fully the order's\r\n *     total\r\n *     FULL - the funds that are authorized or charged fully cover the order's total\r\n *\r\n */let OrderAuthorizeStatusEnum;/**\r\n * Cancels orders.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(OrderAuthorizeStatusEnum){OrderAuthorizeStatusEnum[\"Full\"]=\"FULL\";OrderAuthorizeStatusEnum[\"None\"]=\"NONE\";OrderAuthorizeStatusEnum[\"Partial\"]=\"PARTIAL\";})(OrderAuthorizeStatusEnum||(OrderAuthorizeStatusEnum={}));/**\r\n * Determine the current charge status for the order.\r\n *\r\n *     We treat the order as overcharged when the charged amount is bigger that order.total\r\n *     We treat the order as fully charged when the charged amount is equal to order.total.\r\n *     We treat the order as partially charged when the charged amount covers only part of\r\n *     the order.total\r\n *\r\n *     NONE - the funds are not charged.\r\n *     PARTIAL - the funds that are charged don't cover the order's total\r\n *     FULL - the funds that are charged fully cover the order's total\r\n *     OVERCHARGED - the charged funds are bigger than order's total\r\n *\r\n */let OrderChargeStatusEnum;/**\r\n * Confirms an unconfirmed order by changing status to unfulfilled.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(OrderChargeStatusEnum){OrderChargeStatusEnum[\"Full\"]=\"FULL\";OrderChargeStatusEnum[\"None\"]=\"NONE\";OrderChargeStatusEnum[\"Overcharged\"]=\"OVERCHARGED\";OrderChargeStatusEnum[\"Partial\"]=\"PARTIAL\";})(OrderChargeStatusEnum||(OrderChargeStatusEnum={}));/** An enumeration. */let OrderCreateFromCheckoutErrorCode;/**\r\n * Event sent when new order is created.\r\n *\r\n * Added in Saleor 3.2.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(OrderCreateFromCheckoutErrorCode){OrderCreateFromCheckoutErrorCode[\"BillingAddressNotSet\"]=\"BILLING_ADDRESS_NOT_SET\";OrderCreateFromCheckoutErrorCode[\"ChannelInactive\"]=\"CHANNEL_INACTIVE\";OrderCreateFromCheckoutErrorCode[\"CheckoutNotFound\"]=\"CHECKOUT_NOT_FOUND\";OrderCreateFromCheckoutErrorCode[\"EmailNotSet\"]=\"EMAIL_NOT_SET\";OrderCreateFromCheckoutErrorCode[\"GiftCardNotApplicable\"]=\"GIFT_CARD_NOT_APPLICABLE\";OrderCreateFromCheckoutErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";OrderCreateFromCheckoutErrorCode[\"InsufficientStock\"]=\"INSUFFICIENT_STOCK\";OrderCreateFromCheckoutErrorCode[\"InvalidShippingMethod\"]=\"INVALID_SHIPPING_METHOD\";OrderCreateFromCheckoutErrorCode[\"NoLines\"]=\"NO_LINES\";OrderCreateFromCheckoutErrorCode[\"ShippingAddressNotSet\"]=\"SHIPPING_ADDRESS_NOT_SET\";OrderCreateFromCheckoutErrorCode[\"ShippingMethodNotSet\"]=\"SHIPPING_METHOD_NOT_SET\";OrderCreateFromCheckoutErrorCode[\"TaxError\"]=\"TAX_ERROR\";OrderCreateFromCheckoutErrorCode[\"UnavailableVariantInChannel\"]=\"UNAVAILABLE_VARIANT_IN_CHANNEL\";OrderCreateFromCheckoutErrorCode[\"VoucherNotApplicable\"]=\"VOUCHER_NOT_APPLICABLE\";})(OrderCreateFromCheckoutErrorCode||(OrderCreateFromCheckoutErrorCode={}));let OrderDirection;/** Contains all details related to the applied discount to the order. */(function(OrderDirection){OrderDirection[\"Asc\"]=\"ASC\";OrderDirection[\"Desc\"]=\"DESC\";})(OrderDirection||(OrderDirection={}));/** An enumeration. */let OrderDiscountType;/**\r\n * Update discount for the order.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(OrderDiscountType){OrderDiscountType[\"Manual\"]=\"MANUAL\";OrderDiscountType[\"Voucher\"]=\"VOUCHER\";})(OrderDiscountType||(OrderDiscountType={}));/** An enumeration. */let OrderErrorCode;/** History log of the order. */(function(OrderErrorCode){OrderErrorCode[\"BillingAddressNotSet\"]=\"BILLING_ADDRESS_NOT_SET\";OrderErrorCode[\"CannotCancelFulfillment\"]=\"CANNOT_CANCEL_FULFILLMENT\";OrderErrorCode[\"CannotCancelOrder\"]=\"CANNOT_CANCEL_ORDER\";OrderErrorCode[\"CannotDelete\"]=\"CANNOT_DELETE\";OrderErrorCode[\"CannotDiscount\"]=\"CANNOT_DISCOUNT\";OrderErrorCode[\"CannotFulfillUnpaidOrder\"]=\"CANNOT_FULFILL_UNPAID_ORDER\";OrderErrorCode[\"CannotRefund\"]=\"CANNOT_REFUND\";OrderErrorCode[\"CaptureInactivePayment\"]=\"CAPTURE_INACTIVE_PAYMENT\";OrderErrorCode[\"ChannelInactive\"]=\"CHANNEL_INACTIVE\";OrderErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";OrderErrorCode[\"FulfillOrderLine\"]=\"FULFILL_ORDER_LINE\";OrderErrorCode[\"GiftCardLine\"]=\"GIFT_CARD_LINE\";OrderErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";OrderErrorCode[\"InsufficientStock\"]=\"INSUFFICIENT_STOCK\";OrderErrorCode[\"Invalid\"]=\"INVALID\";OrderErrorCode[\"InvalidQuantity\"]=\"INVALID_QUANTITY\";OrderErrorCode[\"MissingTransactionActionRequestWebhook\"]=\"MISSING_TRANSACTION_ACTION_REQUEST_WEBHOOK\";OrderErrorCode[\"NotAvailableInChannel\"]=\"NOT_AVAILABLE_IN_CHANNEL\";OrderErrorCode[\"NotEditable\"]=\"NOT_EDITABLE\";OrderErrorCode[\"NotFound\"]=\"NOT_FOUND\";OrderErrorCode[\"OrderNoShippingAddress\"]=\"ORDER_NO_SHIPPING_ADDRESS\";OrderErrorCode[\"PaymentError\"]=\"PAYMENT_ERROR\";OrderErrorCode[\"PaymentMissing\"]=\"PAYMENT_MISSING\";OrderErrorCode[\"ProductNotPublished\"]=\"PRODUCT_NOT_PUBLISHED\";OrderErrorCode[\"ProductUnavailableForPurchase\"]=\"PRODUCT_UNAVAILABLE_FOR_PURCHASE\";OrderErrorCode[\"Required\"]=\"REQUIRED\";OrderErrorCode[\"ShippingMethodNotApplicable\"]=\"SHIPPING_METHOD_NOT_APPLICABLE\";OrderErrorCode[\"ShippingMethodRequired\"]=\"SHIPPING_METHOD_REQUIRED\";OrderErrorCode[\"TaxError\"]=\"TAX_ERROR\";OrderErrorCode[\"Unique\"]=\"UNIQUE\";OrderErrorCode[\"VoidInactivePayment\"]=\"VOID_INACTIVE_PAYMENT\";OrderErrorCode[\"ZeroQuantity\"]=\"ZERO_QUANTITY\";})(OrderErrorCode||(OrderErrorCode={}));/** An enumeration. */let OrderEventsEmailsEnum;/** An enumeration. */(function(OrderEventsEmailsEnum){OrderEventsEmailsEnum[\"Confirmed\"]=\"CONFIRMED\";OrderEventsEmailsEnum[\"DigitalLinks\"]=\"DIGITAL_LINKS\";OrderEventsEmailsEnum[\"FulfillmentConfirmation\"]=\"FULFILLMENT_CONFIRMATION\";OrderEventsEmailsEnum[\"OrderCancel\"]=\"ORDER_CANCEL\";OrderEventsEmailsEnum[\"OrderConfirmation\"]=\"ORDER_CONFIRMATION\";OrderEventsEmailsEnum[\"OrderRefund\"]=\"ORDER_REFUND\";OrderEventsEmailsEnum[\"PaymentConfirmation\"]=\"PAYMENT_CONFIRMATION\";OrderEventsEmailsEnum[\"ShippingConfirmation\"]=\"SHIPPING_CONFIRMATION\";OrderEventsEmailsEnum[\"TrackingUpdated\"]=\"TRACKING_UPDATED\";})(OrderEventsEmailsEnum||(OrderEventsEmailsEnum={}));let OrderEventsEnum;(function(OrderEventsEnum){OrderEventsEnum[\"AddedProducts\"]=\"ADDED_PRODUCTS\";OrderEventsEnum[\"Canceled\"]=\"CANCELED\";OrderEventsEnum[\"Confirmed\"]=\"CONFIRMED\";OrderEventsEnum[\"DraftCreated\"]=\"DRAFT_CREATED\";OrderEventsEnum[\"DraftCreatedFromReplace\"]=\"DRAFT_CREATED_FROM_REPLACE\";OrderEventsEnum[\"EmailSent\"]=\"EMAIL_SENT\";OrderEventsEnum[\"ExternalServiceNotification\"]=\"EXTERNAL_SERVICE_NOTIFICATION\";OrderEventsEnum[\"FulfillmentAwaitsApproval\"]=\"FULFILLMENT_AWAITS_APPROVAL\";OrderEventsEnum[\"FulfillmentCanceled\"]=\"FULFILLMENT_CANCELED\";OrderEventsEnum[\"FulfillmentFulfilledItems\"]=\"FULFILLMENT_FULFILLED_ITEMS\";OrderEventsEnum[\"FulfillmentRefunded\"]=\"FULFILLMENT_REFUNDED\";OrderEventsEnum[\"FulfillmentReplaced\"]=\"FULFILLMENT_REPLACED\";OrderEventsEnum[\"FulfillmentRestockedItems\"]=\"FULFILLMENT_RESTOCKED_ITEMS\";OrderEventsEnum[\"FulfillmentReturned\"]=\"FULFILLMENT_RETURNED\";OrderEventsEnum[\"InvoiceGenerated\"]=\"INVOICE_GENERATED\";OrderEventsEnum[\"InvoiceRequested\"]=\"INVOICE_REQUESTED\";OrderEventsEnum[\"InvoiceSent\"]=\"INVOICE_SENT\";OrderEventsEnum[\"InvoiceUpdated\"]=\"INVOICE_UPDATED\";OrderEventsEnum[\"NoteAdded\"]=\"NOTE_ADDED\";OrderEventsEnum[\"OrderDiscountAdded\"]=\"ORDER_DISCOUNT_ADDED\";OrderEventsEnum[\"OrderDiscountAutomaticallyUpdated\"]=\"ORDER_DISCOUNT_AUTOMATICALLY_UPDATED\";OrderEventsEnum[\"OrderDiscountDeleted\"]=\"ORDER_DISCOUNT_DELETED\";OrderEventsEnum[\"OrderDiscountUpdated\"]=\"ORDER_DISCOUNT_UPDATED\";OrderEventsEnum[\"OrderFullyPaid\"]=\"ORDER_FULLY_PAID\";OrderEventsEnum[\"OrderLineDiscountRemoved\"]=\"ORDER_LINE_DISCOUNT_REMOVED\";OrderEventsEnum[\"OrderLineDiscountUpdated\"]=\"ORDER_LINE_DISCOUNT_UPDATED\";OrderEventsEnum[\"OrderLineProductDeleted\"]=\"ORDER_LINE_PRODUCT_DELETED\";OrderEventsEnum[\"OrderLineVariantDeleted\"]=\"ORDER_LINE_VARIANT_DELETED\";OrderEventsEnum[\"OrderMarkedAsPaid\"]=\"ORDER_MARKED_AS_PAID\";OrderEventsEnum[\"OrderReplacementCreated\"]=\"ORDER_REPLACEMENT_CREATED\";OrderEventsEnum[\"Other\"]=\"OTHER\";OrderEventsEnum[\"OversoldItems\"]=\"OVERSOLD_ITEMS\";OrderEventsEnum[\"PaymentAuthorized\"]=\"PAYMENT_AUTHORIZED\";OrderEventsEnum[\"PaymentCaptured\"]=\"PAYMENT_CAPTURED\";OrderEventsEnum[\"PaymentFailed\"]=\"PAYMENT_FAILED\";OrderEventsEnum[\"PaymentRefunded\"]=\"PAYMENT_REFUNDED\";OrderEventsEnum[\"PaymentVoided\"]=\"PAYMENT_VOIDED\";OrderEventsEnum[\"Placed\"]=\"PLACED\";OrderEventsEnum[\"PlacedFromDraft\"]=\"PLACED_FROM_DRAFT\";OrderEventsEnum[\"RemovedProducts\"]=\"REMOVED_PRODUCTS\";OrderEventsEnum[\"TrackingUpdated\"]=\"TRACKING_UPDATED\";OrderEventsEnum[\"TransactionCaptureRequested\"]=\"TRANSACTION_CAPTURE_REQUESTED\";OrderEventsEnum[\"TransactionEvent\"]=\"TRANSACTION_EVENT\";OrderEventsEnum[\"TransactionRefundRequested\"]=\"TRANSACTION_REFUND_REQUESTED\";OrderEventsEnum[\"TransactionVoidRequested\"]=\"TRANSACTION_VOID_REQUESTED\";OrderEventsEnum[\"UpdatedAddress\"]=\"UPDATED_ADDRESS\";})(OrderEventsEnum||(OrderEventsEnum={}));/** An enumeration. */let OrderOriginEnum;/**\r\n * Refund an order.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(OrderOriginEnum){OrderOriginEnum[\"Checkout\"]=\"CHECKOUT\";OrderOriginEnum[\"Draft\"]=\"DRAFT\";OrderOriginEnum[\"Reissue\"]=\"REISSUE\";})(OrderOriginEnum||(OrderOriginEnum={}));/** An enumeration. */let OrderSettingsErrorCode;/**\r\n * Update shop order settings.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(OrderSettingsErrorCode){OrderSettingsErrorCode[\"Invalid\"]=\"INVALID\";})(OrderSettingsErrorCode||(OrderSettingsErrorCode={}));let OrderSortField;(function(OrderSortField){OrderSortField[\"CreatedAt\"]=\"CREATED_AT\";OrderSortField[\"CreationDate\"]=\"CREATION_DATE\";OrderSortField[\"Customer\"]=\"CUSTOMER\";OrderSortField[\"FulfillmentStatus\"]=\"FULFILLMENT_STATUS\";OrderSortField[\"LastModifiedAt\"]=\"LAST_MODIFIED_AT\";OrderSortField[\"Number\"]=\"NUMBER\";OrderSortField[\"Payment\"]=\"PAYMENT\";OrderSortField[\"Rank\"]=\"RANK\";})(OrderSortField||(OrderSortField={}));/** An enumeration. */let OrderStatus;(function(OrderStatus){OrderStatus[\"Canceled\"]=\"CANCELED\";OrderStatus[\"Draft\"]=\"DRAFT\";OrderStatus[\"Fulfilled\"]=\"FULFILLED\";OrderStatus[\"PartiallyFulfilled\"]=\"PARTIALLY_FULFILLED\";OrderStatus[\"PartiallyReturned\"]=\"PARTIALLY_RETURNED\";OrderStatus[\"Returned\"]=\"RETURNED\";OrderStatus[\"Unconfirmed\"]=\"UNCONFIRMED\";OrderStatus[\"Unfulfilled\"]=\"UNFULFILLED\";})(OrderStatus||(OrderStatus={}));let OrderStatusFilter;/**\r\n * Updates an order.\r\n *\r\n * Requires one of the following permissions: MANAGE_ORDERS.\r\n */(function(OrderStatusFilter){OrderStatusFilter[\"Canceled\"]=\"CANCELED\";OrderStatusFilter[\"Fulfilled\"]=\"FULFILLED\";OrderStatusFilter[\"PartiallyFulfilled\"]=\"PARTIALLY_FULFILLED\";OrderStatusFilter[\"ReadyToCapture\"]=\"READY_TO_CAPTURE\";OrderStatusFilter[\"ReadyToFulfill\"]=\"READY_TO_FULFILL\";OrderStatusFilter[\"Unconfirmed\"]=\"UNCONFIRMED\";OrderStatusFilter[\"Unfulfilled\"]=\"UNFULFILLED\";})(OrderStatusFilter||(OrderStatusFilter={}));/** An enumeration. */let PageErrorCode;(function(PageErrorCode){PageErrorCode[\"AttributeAlreadyAssigned\"]=\"ATTRIBUTE_ALREADY_ASSIGNED\";PageErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";PageErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";PageErrorCode[\"Invalid\"]=\"INVALID\";PageErrorCode[\"NotFound\"]=\"NOT_FOUND\";PageErrorCode[\"Required\"]=\"REQUIRED\";PageErrorCode[\"Unique\"]=\"UNIQUE\";})(PageErrorCode||(PageErrorCode={}));let PageSortField;(function(PageSortField){PageSortField[\"CreatedAt\"]=\"CREATED_AT\";PageSortField[\"CreationDate\"]=\"CREATION_DATE\";PageSortField[\"PublicationDate\"]=\"PUBLICATION_DATE\";PageSortField[\"PublishedAt\"]=\"PUBLISHED_AT\";PageSortField[\"Slug\"]=\"SLUG\";PageSortField[\"Title\"]=\"TITLE\";PageSortField[\"Visibility\"]=\"VISIBILITY\";})(PageSortField||(PageSortField={}));let PageTypeSortField;(function(PageTypeSortField){PageTypeSortField[\"Name\"]=\"NAME\";PageTypeSortField[\"Slug\"]=\"SLUG\";})(PageTypeSortField||(PageTypeSortField={}));/** An enumeration. */let PaymentChargeStatusEnum;/** Check payment balance. */(function(PaymentChargeStatusEnum){PaymentChargeStatusEnum[\"Cancelled\"]=\"CANCELLED\";PaymentChargeStatusEnum[\"FullyCharged\"]=\"FULLY_CHARGED\";PaymentChargeStatusEnum[\"FullyRefunded\"]=\"FULLY_REFUNDED\";PaymentChargeStatusEnum[\"NotCharged\"]=\"NOT_CHARGED\";PaymentChargeStatusEnum[\"PartiallyCharged\"]=\"PARTIALLY_CHARGED\";PaymentChargeStatusEnum[\"PartiallyRefunded\"]=\"PARTIALLY_REFUNDED\";PaymentChargeStatusEnum[\"Pending\"]=\"PENDING\";PaymentChargeStatusEnum[\"Refused\"]=\"REFUSED\";})(PaymentChargeStatusEnum||(PaymentChargeStatusEnum={}));/** An enumeration. */let PaymentErrorCode;(function(PaymentErrorCode){PaymentErrorCode[\"BalanceCheckError\"]=\"BALANCE_CHECK_ERROR\";PaymentErrorCode[\"BillingAddressNotSet\"]=\"BILLING_ADDRESS_NOT_SET\";PaymentErrorCode[\"ChannelInactive\"]=\"CHANNEL_INACTIVE\";PaymentErrorCode[\"CheckoutEmailNotSet\"]=\"CHECKOUT_EMAIL_NOT_SET\";PaymentErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";PaymentErrorCode[\"Invalid\"]=\"INVALID\";PaymentErrorCode[\"InvalidShippingMethod\"]=\"INVALID_SHIPPING_METHOD\";PaymentErrorCode[\"NotFound\"]=\"NOT_FOUND\";PaymentErrorCode[\"NotSupportedGateway\"]=\"NOT_SUPPORTED_GATEWAY\";PaymentErrorCode[\"NoCheckoutLines\"]=\"NO_CHECKOUT_LINES\";PaymentErrorCode[\"PartialPaymentNotAllowed\"]=\"PARTIAL_PAYMENT_NOT_ALLOWED\";PaymentErrorCode[\"PaymentError\"]=\"PAYMENT_ERROR\";PaymentErrorCode[\"Required\"]=\"REQUIRED\";PaymentErrorCode[\"ShippingAddressNotSet\"]=\"SHIPPING_ADDRESS_NOT_SET\";PaymentErrorCode[\"ShippingMethodNotSet\"]=\"SHIPPING_METHOD_NOT_SET\";PaymentErrorCode[\"UnavailableVariantInChannel\"]=\"UNAVAILABLE_VARIANT_IN_CHANNEL\";PaymentErrorCode[\"Unique\"]=\"UNIQUE\";})(PaymentErrorCode||(PaymentErrorCode={}));/** An enumeration. */let PermissionEnum;/**\r\n * Create new permission group. Apps are not allowed to perform this mutation.\r\n *\r\n * Requires one of the following permissions: MANAGE_STAFF.\r\n */(function(PermissionEnum){PermissionEnum[\"HandleCheckouts\"]=\"HANDLE_CHECKOUTS\";PermissionEnum[\"HandlePayments\"]=\"HANDLE_PAYMENTS\";PermissionEnum[\"HandleTaxes\"]=\"HANDLE_TAXES\";PermissionEnum[\"ImpersonateUser\"]=\"IMPERSONATE_USER\";PermissionEnum[\"ManageApps\"]=\"MANAGE_APPS\";PermissionEnum[\"ManageChannels\"]=\"MANAGE_CHANNELS\";PermissionEnum[\"ManageCheckouts\"]=\"MANAGE_CHECKOUTS\";PermissionEnum[\"ManageDiscounts\"]=\"MANAGE_DISCOUNTS\";PermissionEnum[\"ManageGiftCard\"]=\"MANAGE_GIFT_CARD\";PermissionEnum[\"ManageMenus\"]=\"MANAGE_MENUS\";PermissionEnum[\"ManageObservability\"]=\"MANAGE_OBSERVABILITY\";PermissionEnum[\"ManageOrders\"]=\"MANAGE_ORDERS\";PermissionEnum[\"ManagePages\"]=\"MANAGE_PAGES\";PermissionEnum[\"ManagePageTypesAndAttributes\"]=\"MANAGE_PAGE_TYPES_AND_ATTRIBUTES\";PermissionEnum[\"ManagePlugins\"]=\"MANAGE_PLUGINS\";PermissionEnum[\"ManageProducts\"]=\"MANAGE_PRODUCTS\";PermissionEnum[\"ManageProductTypesAndAttributes\"]=\"MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES\";PermissionEnum[\"ManageSettings\"]=\"MANAGE_SETTINGS\";PermissionEnum[\"ManageShipping\"]=\"MANAGE_SHIPPING\";PermissionEnum[\"ManageStaff\"]=\"MANAGE_STAFF\";PermissionEnum[\"ManageTaxes\"]=\"MANAGE_TAXES\";PermissionEnum[\"ManageTranslations\"]=\"MANAGE_TRANSLATIONS\";PermissionEnum[\"ManageUsers\"]=\"MANAGE_USERS\";})(PermissionEnum||(PermissionEnum={}));/** An enumeration. */let PermissionGroupErrorCode;(function(PermissionGroupErrorCode){PermissionGroupErrorCode[\"AssignNonStaffMember\"]=\"ASSIGN_NON_STAFF_MEMBER\";PermissionGroupErrorCode[\"CannotRemoveFromLastGroup\"]=\"CANNOT_REMOVE_FROM_LAST_GROUP\";PermissionGroupErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";PermissionGroupErrorCode[\"LeftNotManageablePermission\"]=\"LEFT_NOT_MANAGEABLE_PERMISSION\";PermissionGroupErrorCode[\"OutOfScopePermission\"]=\"OUT_OF_SCOPE_PERMISSION\";PermissionGroupErrorCode[\"OutOfScopeUser\"]=\"OUT_OF_SCOPE_USER\";PermissionGroupErrorCode[\"Required\"]=\"REQUIRED\";PermissionGroupErrorCode[\"Unique\"]=\"UNIQUE\";})(PermissionGroupErrorCode||(PermissionGroupErrorCode={}));let PermissionGroupSortField;(function(PermissionGroupSortField){PermissionGroupSortField[\"Name\"]=\"NAME\";})(PermissionGroupSortField||(PermissionGroupSortField={}));let PluginConfigurationType;(function(PluginConfigurationType){PluginConfigurationType[\"Global\"]=\"GLOBAL\";PluginConfigurationType[\"PerChannel\"]=\"PER_CHANNEL\";})(PluginConfigurationType||(PluginConfigurationType={}));/** An enumeration. */let PluginErrorCode;(function(PluginErrorCode){PluginErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";PluginErrorCode[\"Invalid\"]=\"INVALID\";PluginErrorCode[\"NotFound\"]=\"NOT_FOUND\";PluginErrorCode[\"PluginMisconfigured\"]=\"PLUGIN_MISCONFIGURED\";PluginErrorCode[\"Required\"]=\"REQUIRED\";PluginErrorCode[\"Unique\"]=\"UNIQUE\";})(PluginErrorCode||(PluginErrorCode={}));let PluginSortField;(function(PluginSortField){PluginSortField[\"IsActive\"]=\"IS_ACTIVE\";PluginSortField[\"Name\"]=\"NAME\";})(PluginSortField||(PluginSortField={}));/** An enumeration. */let PostalCodeRuleInclusionTypeEnum;/** Represents preorder settings for product variant. */(function(PostalCodeRuleInclusionTypeEnum){PostalCodeRuleInclusionTypeEnum[\"Exclude\"]=\"EXCLUDE\";PostalCodeRuleInclusionTypeEnum[\"Include\"]=\"INCLUDE\";})(PostalCodeRuleInclusionTypeEnum||(PostalCodeRuleInclusionTypeEnum={}));let ProductAttributeType;/**\r\n * Un-assign attributes from a given product type.\r\n *\r\n * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.\r\n */(function(ProductAttributeType){ProductAttributeType[\"Product\"]=\"PRODUCT\";ProductAttributeType[\"Variant\"]=\"VARIANT\";})(ProductAttributeType||(ProductAttributeType={}));/** An enumeration. */let ProductErrorCode;(function(ProductErrorCode){ProductErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";ProductErrorCode[\"AttributeAlreadyAssigned\"]=\"ATTRIBUTE_ALREADY_ASSIGNED\";ProductErrorCode[\"AttributeCannotBeAssigned\"]=\"ATTRIBUTE_CANNOT_BE_ASSIGNED\";ProductErrorCode[\"AttributeVariantsDisabled\"]=\"ATTRIBUTE_VARIANTS_DISABLED\";ProductErrorCode[\"CannotManageProductWithoutVariant\"]=\"CANNOT_MANAGE_PRODUCT_WITHOUT_VARIANT\";ProductErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";ProductErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";ProductErrorCode[\"Invalid\"]=\"INVALID\";ProductErrorCode[\"InvalidPrice\"]=\"INVALID_PRICE\";ProductErrorCode[\"MediaAlreadyAssigned\"]=\"MEDIA_ALREADY_ASSIGNED\";ProductErrorCode[\"NotFound\"]=\"NOT_FOUND\";ProductErrorCode[\"NotProductsImage\"]=\"NOT_PRODUCTS_IMAGE\";ProductErrorCode[\"NotProductsVariant\"]=\"NOT_PRODUCTS_VARIANT\";ProductErrorCode[\"PreorderVariantCannotBeDeactivated\"]=\"PREORDER_VARIANT_CANNOT_BE_DEACTIVATED\";ProductErrorCode[\"ProductNotAssignedToChannel\"]=\"PRODUCT_NOT_ASSIGNED_TO_CHANNEL\";ProductErrorCode[\"ProductWithoutCategory\"]=\"PRODUCT_WITHOUT_CATEGORY\";ProductErrorCode[\"Required\"]=\"REQUIRED\";ProductErrorCode[\"Unique\"]=\"UNIQUE\";ProductErrorCode[\"UnsupportedMediaProvider\"]=\"UNSUPPORTED_MEDIA_PROVIDER\";ProductErrorCode[\"VariantNoDigitalContent\"]=\"VARIANT_NO_DIGITAL_CONTENT\";})(ProductErrorCode||(ProductErrorCode={}));let ProductFieldEnum;(function(ProductFieldEnum){ProductFieldEnum[\"Category\"]=\"CATEGORY\";ProductFieldEnum[\"ChargeTaxes\"]=\"CHARGE_TAXES\";ProductFieldEnum[\"Collections\"]=\"COLLECTIONS\";ProductFieldEnum[\"Description\"]=\"DESCRIPTION\";ProductFieldEnum[\"Name\"]=\"NAME\";ProductFieldEnum[\"ProductMedia\"]=\"PRODUCT_MEDIA\";ProductFieldEnum[\"ProductType\"]=\"PRODUCT_TYPE\";ProductFieldEnum[\"ProductWeight\"]=\"PRODUCT_WEIGHT\";ProductFieldEnum[\"VariantId\"]=\"VARIANT_ID\";ProductFieldEnum[\"VariantMedia\"]=\"VARIANT_MEDIA\";ProductFieldEnum[\"VariantSku\"]=\"VARIANT_SKU\";ProductFieldEnum[\"VariantWeight\"]=\"VARIANT_WEIGHT\";})(ProductFieldEnum||(ProductFieldEnum={}));/** An enumeration. */let ProductMediaType;/**\r\n * Updates a product media.\r\n *\r\n * Requires one of the following permissions: MANAGE_PRODUCTS.\r\n */(function(ProductMediaType){ProductMediaType[\"Image\"]=\"IMAGE\";ProductMediaType[\"Video\"]=\"VIDEO\";})(ProductMediaType||(ProductMediaType={}));let ProductOrderField;/** Represents availability of a product in the storefront. */(function(ProductOrderField){ProductOrderField[\"Collection\"]=\"COLLECTION\";ProductOrderField[\"CreatedAt\"]=\"CREATED_AT\";ProductOrderField[\"Date\"]=\"DATE\";ProductOrderField[\"LastModified\"]=\"LAST_MODIFIED\";ProductOrderField[\"LastModifiedAt\"]=\"LAST_MODIFIED_AT\";ProductOrderField[\"MinimalPrice\"]=\"MINIMAL_PRICE\";ProductOrderField[\"Name\"]=\"NAME\";ProductOrderField[\"Price\"]=\"PRICE\";ProductOrderField[\"PublicationDate\"]=\"PUBLICATION_DATE\";ProductOrderField[\"Published\"]=\"PUBLISHED\";ProductOrderField[\"PublishedAt\"]=\"PUBLISHED_AT\";ProductOrderField[\"Rank\"]=\"RANK\";ProductOrderField[\"Rating\"]=\"RATING\";ProductOrderField[\"Type\"]=\"TYPE\";})(ProductOrderField||(ProductOrderField={}));let ProductTypeConfigurable;(function(ProductTypeConfigurable){ProductTypeConfigurable[\"Configurable\"]=\"CONFIGURABLE\";ProductTypeConfigurable[\"Simple\"]=\"SIMPLE\";})(ProductTypeConfigurable||(ProductTypeConfigurable={}));let ProductTypeEnum;(function(ProductTypeEnum){ProductTypeEnum[\"Digital\"]=\"DIGITAL\";ProductTypeEnum[\"Shippable\"]=\"SHIPPABLE\";})(ProductTypeEnum||(ProductTypeEnum={}));/** An enumeration. */let ProductTypeKindEnum;/**\r\n * Reorder the attributes of a product type.\r\n *\r\n * Requires one of the following permissions: MANAGE_PRODUCT_TYPES_AND_ATTRIBUTES.\r\n */(function(ProductTypeKindEnum){ProductTypeKindEnum[\"GiftCard\"]=\"GIFT_CARD\";ProductTypeKindEnum[\"Normal\"]=\"NORMAL\";})(ProductTypeKindEnum||(ProductTypeKindEnum={}));let ProductTypeSortField;(function(ProductTypeSortField){ProductTypeSortField[\"Digital\"]=\"DIGITAL\";ProductTypeSortField[\"Name\"]=\"NAME\";ProductTypeSortField[\"ShippingRequired\"]=\"SHIPPING_REQUIRED\";})(ProductTypeSortField||(ProductTypeSortField={}));/** An enumeration. */let ProductVariantBulkErrorCode;(function(ProductVariantBulkErrorCode){ProductVariantBulkErrorCode[\"AttributeAlreadyAssigned\"]=\"ATTRIBUTE_ALREADY_ASSIGNED\";ProductVariantBulkErrorCode[\"AttributeCannotBeAssigned\"]=\"ATTRIBUTE_CANNOT_BE_ASSIGNED\";ProductVariantBulkErrorCode[\"AttributeVariantsDisabled\"]=\"ATTRIBUTE_VARIANTS_DISABLED\";ProductVariantBulkErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";ProductVariantBulkErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";ProductVariantBulkErrorCode[\"Invalid\"]=\"INVALID\";ProductVariantBulkErrorCode[\"InvalidPrice\"]=\"INVALID_PRICE\";ProductVariantBulkErrorCode[\"NotFound\"]=\"NOT_FOUND\";ProductVariantBulkErrorCode[\"NotProductsVariant\"]=\"NOT_PRODUCTS_VARIANT\";ProductVariantBulkErrorCode[\"ProductNotAssignedToChannel\"]=\"PRODUCT_NOT_ASSIGNED_TO_CHANNEL\";ProductVariantBulkErrorCode[\"Required\"]=\"REQUIRED\";ProductVariantBulkErrorCode[\"Unique\"]=\"UNIQUE\";})(ProductVariantBulkErrorCode||(ProductVariantBulkErrorCode={}));let ProductVariantSortField;(function(ProductVariantSortField){ProductVariantSortField[\"LastModifiedAt\"]=\"LAST_MODIFIED_AT\";})(ProductVariantSortField||(ProductVariantSortField={}));let ReportingPeriod;/**\r\n * Request email change of the logged in user.\r\n *\r\n * Requires one of the following permissions: AUTHENTICATED_USER.\r\n */(function(ReportingPeriod){ReportingPeriod[\"ThisMonth\"]=\"THIS_MONTH\";ReportingPeriod[\"Today\"]=\"TODAY\";})(ReportingPeriod||(ReportingPeriod={}));let SaleSortField;(function(SaleSortField){SaleSortField[\"CreatedAt\"]=\"CREATED_AT\";SaleSortField[\"EndDate\"]=\"END_DATE\";SaleSortField[\"LastModifiedAt\"]=\"LAST_MODIFIED_AT\";SaleSortField[\"Name\"]=\"NAME\";SaleSortField[\"StartDate\"]=\"START_DATE\";SaleSortField[\"Type\"]=\"TYPE\";SaleSortField[\"Value\"]=\"VALUE\";})(SaleSortField||(SaleSortField={}));let SaleType;/**\r\n * Updates a sale.\r\n *\r\n * Requires one of the following permissions: MANAGE_DISCOUNTS.\r\n */(function(SaleType){SaleType[\"Fixed\"]=\"FIXED\";SaleType[\"Percentage\"]=\"PERCENTAGE\";})(SaleType||(SaleType={}));/** An enumeration. */let ShippingErrorCode;/**\r\n * List shipping methods for checkout.\r\n *\r\n * Added in Saleor 3.6.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(ShippingErrorCode){ShippingErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";ShippingErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";ShippingErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";ShippingErrorCode[\"Invalid\"]=\"INVALID\";ShippingErrorCode[\"MaxLessThanMin\"]=\"MAX_LESS_THAN_MIN\";ShippingErrorCode[\"NotFound\"]=\"NOT_FOUND\";ShippingErrorCode[\"Required\"]=\"REQUIRED\";ShippingErrorCode[\"Unique\"]=\"UNIQUE\";})(ShippingErrorCode||(ShippingErrorCode={}));/** An enumeration. */let ShippingMethodTypeEnum;/**\r\n * List of shipping methods available for the country.\r\n *\r\n * Added in Saleor 3.6.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(ShippingMethodTypeEnum){ShippingMethodTypeEnum[\"Price\"]=\"PRICE\";ShippingMethodTypeEnum[\"Weight\"]=\"WEIGHT\";})(ShippingMethodTypeEnum||(ShippingMethodTypeEnum={}));/** An enumeration. */let ShopErrorCode;/**\r\n * Fetch tax rates.\r\n *\r\n * Requires one of the following permissions: MANAGE_SETTINGS.\r\n */(function(ShopErrorCode){ShopErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";ShopErrorCode[\"CannotFetchTaxRates\"]=\"CANNOT_FETCH_TAX_RATES\";ShopErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";ShopErrorCode[\"Invalid\"]=\"INVALID\";ShopErrorCode[\"NotFound\"]=\"NOT_FOUND\";ShopErrorCode[\"Required\"]=\"REQUIRED\";ShopErrorCode[\"Unique\"]=\"UNIQUE\";})(ShopErrorCode||(ShopErrorCode={}));let StaffMemberStatus;/** Represents a recipient of email notifications send by Saleor, such as notifications about new orders. Notifications can be assigned to staff users or arbitrary email addresses. */(function(StaffMemberStatus){StaffMemberStatus[\"Active\"]=\"ACTIVE\";StaffMemberStatus[\"Deactivated\"]=\"DEACTIVATED\";})(StaffMemberStatus||(StaffMemberStatus={}));let StockAvailability;(function(StockAvailability){StockAvailability[\"InStock\"]=\"IN_STOCK\";StockAvailability[\"OutOfStock\"]=\"OUT_OF_STOCK\";})(StockAvailability||(StockAvailability={}));/** An enumeration. */let StockErrorCode;(function(StockErrorCode){StockErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";StockErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";StockErrorCode[\"Invalid\"]=\"INVALID\";StockErrorCode[\"NotFound\"]=\"NOT_FOUND\";StockErrorCode[\"Required\"]=\"REQUIRED\";StockErrorCode[\"Unique\"]=\"UNIQUE\";})(StockErrorCode||(StockErrorCode={}));/** Enum representing the type of a payment storage in a gateway. */let StorePaymentMethodEnum;/**\r\n * Define the filtering options for string fields.\r\n *\r\n * Added in Saleor 3.11.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(StorePaymentMethodEnum){StorePaymentMethodEnum[\"None\"]=\"NONE\";StorePaymentMethodEnum[\"OffSession\"]=\"OFF_SESSION\";StorePaymentMethodEnum[\"OnSession\"]=\"ON_SESSION\";})(StorePaymentMethodEnum||(StorePaymentMethodEnum={}));let TaxCalculationStrategy;/**\r\n * Tax class is a named object used to define tax rates per country. Tax class can be assigned to product types, products and shipping methods to define their tax rates.\r\n *\r\n * Added in Saleor 3.9.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(TaxCalculationStrategy){TaxCalculationStrategy[\"FlatRates\"]=\"FLAT_RATES\";TaxCalculationStrategy[\"TaxApp\"]=\"TAX_APP\";})(TaxCalculationStrategy||(TaxCalculationStrategy={}));/** An enumeration. */let TaxClassCreateErrorCode;(function(TaxClassCreateErrorCode){TaxClassCreateErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TaxClassCreateErrorCode[\"Invalid\"]=\"INVALID\";TaxClassCreateErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TaxClassCreateErrorCode||(TaxClassCreateErrorCode={}));/** An enumeration. */let TaxClassDeleteErrorCode;(function(TaxClassDeleteErrorCode){TaxClassDeleteErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TaxClassDeleteErrorCode[\"Invalid\"]=\"INVALID\";TaxClassDeleteErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TaxClassDeleteErrorCode||(TaxClassDeleteErrorCode={}));let TaxClassSortField;(function(TaxClassSortField){TaxClassSortField[\"Name\"]=\"NAME\";})(TaxClassSortField||(TaxClassSortField={}));/** An enumeration. */let TaxClassUpdateErrorCode;(function(TaxClassUpdateErrorCode){TaxClassUpdateErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";TaxClassUpdateErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TaxClassUpdateErrorCode[\"Invalid\"]=\"INVALID\";TaxClassUpdateErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TaxClassUpdateErrorCode||(TaxClassUpdateErrorCode={}));/** An enumeration. */let TaxConfigurationUpdateErrorCode;(function(TaxConfigurationUpdateErrorCode){TaxConfigurationUpdateErrorCode[\"DuplicatedInputItem\"]=\"DUPLICATED_INPUT_ITEM\";TaxConfigurationUpdateErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TaxConfigurationUpdateErrorCode[\"Invalid\"]=\"INVALID\";TaxConfigurationUpdateErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TaxConfigurationUpdateErrorCode||(TaxConfigurationUpdateErrorCode={}));/** An enumeration. */let TaxCountryConfigurationDeleteErrorCode;/**\r\n * Update tax class rates for a specific country.\r\n *\r\n * Added in Saleor 3.9.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n *\r\n * Requires one of the following permissions: MANAGE_TAXES.\r\n */(function(TaxCountryConfigurationDeleteErrorCode){TaxCountryConfigurationDeleteErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TaxCountryConfigurationDeleteErrorCode[\"Invalid\"]=\"INVALID\";TaxCountryConfigurationDeleteErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TaxCountryConfigurationDeleteErrorCode||(TaxCountryConfigurationDeleteErrorCode={}));/** An enumeration. */let TaxCountryConfigurationUpdateErrorCode;/**\r\n * Exempt checkout or order from charging the taxes. When tax exemption is enabled, taxes won't be charged for the checkout or order. Taxes may still be calculated in cases when product prices are entered with the tax included and the net price needs to be known.\r\n *\r\n * Added in Saleor 3.8.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n *\r\n * Requires one of the following permissions: MANAGE_TAXES.\r\n */(function(TaxCountryConfigurationUpdateErrorCode){TaxCountryConfigurationUpdateErrorCode[\"CannotCreateNegativeRate\"]=\"CANNOT_CREATE_NEGATIVE_RATE\";TaxCountryConfigurationUpdateErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TaxCountryConfigurationUpdateErrorCode[\"Invalid\"]=\"INVALID\";TaxCountryConfigurationUpdateErrorCode[\"NotFound\"]=\"NOT_FOUND\";TaxCountryConfigurationUpdateErrorCode[\"OnlyOneDefaultCountryRateAllowed\"]=\"ONLY_ONE_DEFAULT_COUNTRY_RATE_ALLOWED\";})(TaxCountryConfigurationUpdateErrorCode||(TaxCountryConfigurationUpdateErrorCode={}));/** An enumeration. */let TaxExemptionManageErrorCode;(function(TaxExemptionManageErrorCode){TaxExemptionManageErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TaxExemptionManageErrorCode[\"Invalid\"]=\"INVALID\";TaxExemptionManageErrorCode[\"NotEditableOrder\"]=\"NOT_EDITABLE_ORDER\";TaxExemptionManageErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TaxExemptionManageErrorCode||(TaxExemptionManageErrorCode={}));/** An enumeration. */let ThumbnailFormatEnum;(function(ThumbnailFormatEnum){ThumbnailFormatEnum[\"Webp\"]=\"WEBP\";})(ThumbnailFormatEnum||(ThumbnailFormatEnum={}));/** An enumeration. */let TimePeriodTypeEnum;/** An object representing a single payment. */(function(TimePeriodTypeEnum){TimePeriodTypeEnum[\"Day\"]=\"DAY\";TimePeriodTypeEnum[\"Month\"]=\"MONTH\";TimePeriodTypeEnum[\"Week\"]=\"WEEK\";TimePeriodTypeEnum[\"Year\"]=\"YEAR\";})(TimePeriodTypeEnum||(TimePeriodTypeEnum={}));/**\r\n * Represents possible actions on payment transaction.\r\n *\r\n *     The following actions are possible:\r\n *     CHARGE - Represents the charge action.\r\n *     REFUND - Represents a refund action.\r\n *     VOID - Represents a void action.\r\n *\r\n */let TransactionActionEnum;/**\r\n * Event sent when transaction action is requested.\r\n *\r\n * Added in Saleor 3.4.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(TransactionActionEnum){TransactionActionEnum[\"Charge\"]=\"CHARGE\";TransactionActionEnum[\"Refund\"]=\"REFUND\";TransactionActionEnum[\"Void\"]=\"VOID\";})(TransactionActionEnum||(TransactionActionEnum={}));/** An enumeration. */let TransactionCreateErrorCode;(function(TransactionCreateErrorCode){TransactionCreateErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TransactionCreateErrorCode[\"IncorrectCurrency\"]=\"INCORRECT_CURRENCY\";TransactionCreateErrorCode[\"Invalid\"]=\"INVALID\";TransactionCreateErrorCode[\"MetadataKeyRequired\"]=\"METADATA_KEY_REQUIRED\";TransactionCreateErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TransactionCreateErrorCode||(TransactionCreateErrorCode={}));/** An enumeration. */let TransactionKind;/**\r\n * Request an action for payment transaction.\r\n *\r\n * Added in Saleor 3.4.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n *\r\n * Requires one of the following permissions: HANDLE_PAYMENTS, MANAGE_ORDERS.\r\n */(function(TransactionKind){TransactionKind[\"ActionToConfirm\"]=\"ACTION_TO_CONFIRM\";TransactionKind[\"Auth\"]=\"AUTH\";TransactionKind[\"Cancel\"]=\"CANCEL\";TransactionKind[\"Capture\"]=\"CAPTURE\";TransactionKind[\"Confirm\"]=\"CONFIRM\";TransactionKind[\"External\"]=\"EXTERNAL\";TransactionKind[\"Pending\"]=\"PENDING\";TransactionKind[\"Refund\"]=\"REFUND\";TransactionKind[\"RefundOngoing\"]=\"REFUND_ONGOING\";TransactionKind[\"Void\"]=\"VOID\";})(TransactionKind||(TransactionKind={}));/** An enumeration. */let TransactionRequestActionErrorCode;/** An enumeration. */(function(TransactionRequestActionErrorCode){TransactionRequestActionErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TransactionRequestActionErrorCode[\"Invalid\"]=\"INVALID\";TransactionRequestActionErrorCode[\"MissingTransactionActionRequestWebhook\"]=\"MISSING_TRANSACTION_ACTION_REQUEST_WEBHOOK\";TransactionRequestActionErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TransactionRequestActionErrorCode||(TransactionRequestActionErrorCode={}));let TransactionStatus;/**\r\n * Create transaction for checkout or order. Requires the following permissions: AUTHENTICATED_APP and HANDLE_PAYMENTS.\r\n *\r\n * Added in Saleor 3.4.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(TransactionStatus){TransactionStatus[\"Failure\"]=\"FAILURE\";TransactionStatus[\"Pending\"]=\"PENDING\";TransactionStatus[\"Success\"]=\"SUCCESS\";})(TransactionStatus||(TransactionStatus={}));/** An enumeration. */let TransactionUpdateErrorCode;(function(TransactionUpdateErrorCode){TransactionUpdateErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TransactionUpdateErrorCode[\"IncorrectCurrency\"]=\"INCORRECT_CURRENCY\";TransactionUpdateErrorCode[\"Invalid\"]=\"INVALID\";TransactionUpdateErrorCode[\"MetadataKeyRequired\"]=\"METADATA_KEY_REQUIRED\";TransactionUpdateErrorCode[\"NotFound\"]=\"NOT_FOUND\";})(TransactionUpdateErrorCode||(TransactionUpdateErrorCode={}));let TranslatableKinds;/**\r\n * Event sent when new translation is created.\r\n *\r\n * Added in Saleor 3.2.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n */(function(TranslatableKinds){TranslatableKinds[\"Attribute\"]=\"ATTRIBUTE\";TranslatableKinds[\"AttributeValue\"]=\"ATTRIBUTE_VALUE\";TranslatableKinds[\"Category\"]=\"CATEGORY\";TranslatableKinds[\"Collection\"]=\"COLLECTION\";TranslatableKinds[\"MenuItem\"]=\"MENU_ITEM\";TranslatableKinds[\"Page\"]=\"PAGE\";TranslatableKinds[\"Product\"]=\"PRODUCT\";TranslatableKinds[\"Sale\"]=\"SALE\";TranslatableKinds[\"ShippingMethod\"]=\"SHIPPING_METHOD\";TranslatableKinds[\"Variant\"]=\"VARIANT\";TranslatableKinds[\"Voucher\"]=\"VOUCHER\";})(TranslatableKinds||(TranslatableKinds={}));/** An enumeration. */let TranslationErrorCode;(function(TranslationErrorCode){TranslationErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";TranslationErrorCode[\"Invalid\"]=\"INVALID\";TranslationErrorCode[\"NotFound\"]=\"NOT_FOUND\";TranslationErrorCode[\"Required\"]=\"REQUIRED\";})(TranslationErrorCode||(TranslationErrorCode={}));/** An enumeration. */let UploadErrorCode;/** Represents user data. */(function(UploadErrorCode){UploadErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";})(UploadErrorCode||(UploadErrorCode={}));let UserSortField;(function(UserSortField){UserSortField[\"CreatedAt\"]=\"CREATED_AT\";UserSortField[\"Email\"]=\"EMAIL\";UserSortField[\"FirstName\"]=\"FIRST_NAME\";UserSortField[\"LastModifiedAt\"]=\"LAST_MODIFIED_AT\";UserSortField[\"LastName\"]=\"LAST_NAME\";UserSortField[\"OrderCount\"]=\"ORDER_COUNT\";})(UserSortField||(UserSortField={}));let VariantAttributeScope;/**\r\n * Assign an media to a product variant.\r\n *\r\n * Requires one of the following permissions: MANAGE_PRODUCTS.\r\n */(function(VariantAttributeScope){VariantAttributeScope[\"All\"]=\"ALL\";VariantAttributeScope[\"NotVariantSelection\"]=\"NOT_VARIANT_SELECTION\";VariantAttributeScope[\"VariantSelection\"]=\"VARIANT_SELECTION\";})(VariantAttributeScope||(VariantAttributeScope={}));/** An enumeration. */let VolumeUnitsEnum;/** Vouchers allow giving discounts to particular customers on categories, collections or specific products. They can be used during checkout by providing valid voucher codes. */(function(VolumeUnitsEnum){VolumeUnitsEnum[\"AcreFt\"]=\"ACRE_FT\";VolumeUnitsEnum[\"AcreIn\"]=\"ACRE_IN\";VolumeUnitsEnum[\"CubicCentimeter\"]=\"CUBIC_CENTIMETER\";VolumeUnitsEnum[\"CubicDecimeter\"]=\"CUBIC_DECIMETER\";VolumeUnitsEnum[\"CubicFoot\"]=\"CUBIC_FOOT\";VolumeUnitsEnum[\"CubicInch\"]=\"CUBIC_INCH\";VolumeUnitsEnum[\"CubicMeter\"]=\"CUBIC_METER\";VolumeUnitsEnum[\"CubicMillimeter\"]=\"CUBIC_MILLIMETER\";VolumeUnitsEnum[\"CubicYard\"]=\"CUBIC_YARD\";VolumeUnitsEnum[\"FlOz\"]=\"FL_OZ\";VolumeUnitsEnum[\"Liter\"]=\"LITER\";VolumeUnitsEnum[\"Pint\"]=\"PINT\";VolumeUnitsEnum[\"Qt\"]=\"QT\";})(VolumeUnitsEnum||(VolumeUnitsEnum={}));let VoucherDiscountType;(function(VoucherDiscountType){VoucherDiscountType[\"Fixed\"]=\"FIXED\";VoucherDiscountType[\"Percentage\"]=\"PERCENTAGE\";VoucherDiscountType[\"Shipping\"]=\"SHIPPING\";})(VoucherDiscountType||(VoucherDiscountType={}));let VoucherSortField;(function(VoucherSortField){VoucherSortField[\"Code\"]=\"CODE\";VoucherSortField[\"EndDate\"]=\"END_DATE\";VoucherSortField[\"MinimumSpentAmount\"]=\"MINIMUM_SPENT_AMOUNT\";VoucherSortField[\"StartDate\"]=\"START_DATE\";VoucherSortField[\"Type\"]=\"TYPE\";VoucherSortField[\"UsageLimit\"]=\"USAGE_LIMIT\";VoucherSortField[\"Value\"]=\"VALUE\";})(VoucherSortField||(VoucherSortField={}));let VoucherTypeEnum;/**\r\n * Updates a voucher.\r\n *\r\n * Requires one of the following permissions: MANAGE_DISCOUNTS.\r\n */(function(VoucherTypeEnum){VoucherTypeEnum[\"EntireOrder\"]=\"ENTIRE_ORDER\";VoucherTypeEnum[\"Shipping\"]=\"SHIPPING\";VoucherTypeEnum[\"SpecificProduct\"]=\"SPECIFIC_PRODUCT\";})(VoucherTypeEnum||(VoucherTypeEnum={}));/** An enumeration. */let WarehouseClickAndCollectOptionEnum;(function(WarehouseClickAndCollectOptionEnum){WarehouseClickAndCollectOptionEnum[\"All\"]=\"ALL\";WarehouseClickAndCollectOptionEnum[\"Disabled\"]=\"DISABLED\";WarehouseClickAndCollectOptionEnum[\"Local\"]=\"LOCAL\";})(WarehouseClickAndCollectOptionEnum||(WarehouseClickAndCollectOptionEnum={}));/** An enumeration. */let WarehouseErrorCode;(function(WarehouseErrorCode){WarehouseErrorCode[\"AlreadyExists\"]=\"ALREADY_EXISTS\";WarehouseErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";WarehouseErrorCode[\"Invalid\"]=\"INVALID\";WarehouseErrorCode[\"NotFound\"]=\"NOT_FOUND\";WarehouseErrorCode[\"Required\"]=\"REQUIRED\";WarehouseErrorCode[\"Unique\"]=\"UNIQUE\";})(WarehouseErrorCode||(WarehouseErrorCode={}));let WarehouseSortField;(function(WarehouseSortField){WarehouseSortField[\"Name\"]=\"NAME\";})(WarehouseSortField||(WarehouseSortField={}));/** An enumeration. */let WebhookDryRunErrorCode;(function(WebhookDryRunErrorCode){WebhookDryRunErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";WebhookDryRunErrorCode[\"InvalidId\"]=\"INVALID_ID\";WebhookDryRunErrorCode[\"MissingPermission\"]=\"MISSING_PERMISSION\";WebhookDryRunErrorCode[\"NotFound\"]=\"NOT_FOUND\";WebhookDryRunErrorCode[\"TypeNotSupported\"]=\"TYPE_NOT_SUPPORTED\";WebhookDryRunErrorCode[\"UnableToParse\"]=\"UNABLE_TO_PARSE\";})(WebhookDryRunErrorCode||(WebhookDryRunErrorCode={}));/** An enumeration. */let WebhookErrorCode;/** Webhook event. */(function(WebhookErrorCode){WebhookErrorCode[\"DeleteFailed\"]=\"DELETE_FAILED\";WebhookErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";WebhookErrorCode[\"Invalid\"]=\"INVALID\";WebhookErrorCode[\"NotFound\"]=\"NOT_FOUND\";WebhookErrorCode[\"Required\"]=\"REQUIRED\";WebhookErrorCode[\"Unique\"]=\"UNIQUE\";})(WebhookErrorCode||(WebhookErrorCode={}));/** Enum determining type of webhook. */let WebhookEventTypeAsyncEnum;/** Enum determining type of webhook. */(function(WebhookEventTypeAsyncEnum){WebhookEventTypeAsyncEnum[\"AddressCreated\"]=\"ADDRESS_CREATED\";WebhookEventTypeAsyncEnum[\"AddressDeleted\"]=\"ADDRESS_DELETED\";WebhookEventTypeAsyncEnum[\"AddressUpdated\"]=\"ADDRESS_UPDATED\";WebhookEventTypeAsyncEnum[\"AnyEvents\"]=\"ANY_EVENTS\";WebhookEventTypeAsyncEnum[\"AppDeleted\"]=\"APP_DELETED\";WebhookEventTypeAsyncEnum[\"AppInstalled\"]=\"APP_INSTALLED\";WebhookEventTypeAsyncEnum[\"AppStatusChanged\"]=\"APP_STATUS_CHANGED\";WebhookEventTypeAsyncEnum[\"AppUpdated\"]=\"APP_UPDATED\";WebhookEventTypeAsyncEnum[\"AttributeCreated\"]=\"ATTRIBUTE_CREATED\";WebhookEventTypeAsyncEnum[\"AttributeDeleted\"]=\"ATTRIBUTE_DELETED\";WebhookEventTypeAsyncEnum[\"AttributeUpdated\"]=\"ATTRIBUTE_UPDATED\";WebhookEventTypeAsyncEnum[\"AttributeValueCreated\"]=\"ATTRIBUTE_VALUE_CREATED\";WebhookEventTypeAsyncEnum[\"AttributeValueDeleted\"]=\"ATTRIBUTE_VALUE_DELETED\";WebhookEventTypeAsyncEnum[\"AttributeValueUpdated\"]=\"ATTRIBUTE_VALUE_UPDATED\";WebhookEventTypeAsyncEnum[\"CategoryCreated\"]=\"CATEGORY_CREATED\";WebhookEventTypeAsyncEnum[\"CategoryDeleted\"]=\"CATEGORY_DELETED\";WebhookEventTypeAsyncEnum[\"CategoryUpdated\"]=\"CATEGORY_UPDATED\";WebhookEventTypeAsyncEnum[\"ChannelCreated\"]=\"CHANNEL_CREATED\";WebhookEventTypeAsyncEnum[\"ChannelDeleted\"]=\"CHANNEL_DELETED\";WebhookEventTypeAsyncEnum[\"ChannelStatusChanged\"]=\"CHANNEL_STATUS_CHANGED\";WebhookEventTypeAsyncEnum[\"ChannelUpdated\"]=\"CHANNEL_UPDATED\";WebhookEventTypeAsyncEnum[\"CheckoutCreated\"]=\"CHECKOUT_CREATED\";WebhookEventTypeAsyncEnum[\"CheckoutMetadataUpdated\"]=\"CHECKOUT_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"CheckoutUpdated\"]=\"CHECKOUT_UPDATED\";WebhookEventTypeAsyncEnum[\"CollectionCreated\"]=\"COLLECTION_CREATED\";WebhookEventTypeAsyncEnum[\"CollectionDeleted\"]=\"COLLECTION_DELETED\";WebhookEventTypeAsyncEnum[\"CollectionMetadataUpdated\"]=\"COLLECTION_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"CollectionUpdated\"]=\"COLLECTION_UPDATED\";WebhookEventTypeAsyncEnum[\"CustomerCreated\"]=\"CUSTOMER_CREATED\";WebhookEventTypeAsyncEnum[\"CustomerDeleted\"]=\"CUSTOMER_DELETED\";WebhookEventTypeAsyncEnum[\"CustomerMetadataUpdated\"]=\"CUSTOMER_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"CustomerUpdated\"]=\"CUSTOMER_UPDATED\";WebhookEventTypeAsyncEnum[\"DraftOrderCreated\"]=\"DRAFT_ORDER_CREATED\";WebhookEventTypeAsyncEnum[\"DraftOrderDeleted\"]=\"DRAFT_ORDER_DELETED\";WebhookEventTypeAsyncEnum[\"DraftOrderUpdated\"]=\"DRAFT_ORDER_UPDATED\";WebhookEventTypeAsyncEnum[\"FulfillmentApproved\"]=\"FULFILLMENT_APPROVED\";WebhookEventTypeAsyncEnum[\"FulfillmentCanceled\"]=\"FULFILLMENT_CANCELED\";WebhookEventTypeAsyncEnum[\"FulfillmentCreated\"]=\"FULFILLMENT_CREATED\";WebhookEventTypeAsyncEnum[\"FulfillmentMetadataUpdated\"]=\"FULFILLMENT_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"GiftCardCreated\"]=\"GIFT_CARD_CREATED\";WebhookEventTypeAsyncEnum[\"GiftCardDeleted\"]=\"GIFT_CARD_DELETED\";WebhookEventTypeAsyncEnum[\"GiftCardMetadataUpdated\"]=\"GIFT_CARD_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"GiftCardStatusChanged\"]=\"GIFT_CARD_STATUS_CHANGED\";WebhookEventTypeAsyncEnum[\"GiftCardUpdated\"]=\"GIFT_CARD_UPDATED\";WebhookEventTypeAsyncEnum[\"InvoiceDeleted\"]=\"INVOICE_DELETED\";WebhookEventTypeAsyncEnum[\"InvoiceRequested\"]=\"INVOICE_REQUESTED\";WebhookEventTypeAsyncEnum[\"InvoiceSent\"]=\"INVOICE_SENT\";WebhookEventTypeAsyncEnum[\"MenuCreated\"]=\"MENU_CREATED\";WebhookEventTypeAsyncEnum[\"MenuDeleted\"]=\"MENU_DELETED\";WebhookEventTypeAsyncEnum[\"MenuItemCreated\"]=\"MENU_ITEM_CREATED\";WebhookEventTypeAsyncEnum[\"MenuItemDeleted\"]=\"MENU_ITEM_DELETED\";WebhookEventTypeAsyncEnum[\"MenuItemUpdated\"]=\"MENU_ITEM_UPDATED\";WebhookEventTypeAsyncEnum[\"MenuUpdated\"]=\"MENU_UPDATED\";WebhookEventTypeAsyncEnum[\"NotifyUser\"]=\"NOTIFY_USER\";WebhookEventTypeAsyncEnum[\"Observability\"]=\"OBSERVABILITY\";WebhookEventTypeAsyncEnum[\"OrderCancelled\"]=\"ORDER_CANCELLED\";WebhookEventTypeAsyncEnum[\"OrderConfirmed\"]=\"ORDER_CONFIRMED\";WebhookEventTypeAsyncEnum[\"OrderCreated\"]=\"ORDER_CREATED\";WebhookEventTypeAsyncEnum[\"OrderFulfilled\"]=\"ORDER_FULFILLED\";WebhookEventTypeAsyncEnum[\"OrderFullyPaid\"]=\"ORDER_FULLY_PAID\";WebhookEventTypeAsyncEnum[\"OrderMetadataUpdated\"]=\"ORDER_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"OrderUpdated\"]=\"ORDER_UPDATED\";WebhookEventTypeAsyncEnum[\"PageCreated\"]=\"PAGE_CREATED\";WebhookEventTypeAsyncEnum[\"PageDeleted\"]=\"PAGE_DELETED\";WebhookEventTypeAsyncEnum[\"PageTypeCreated\"]=\"PAGE_TYPE_CREATED\";WebhookEventTypeAsyncEnum[\"PageTypeDeleted\"]=\"PAGE_TYPE_DELETED\";WebhookEventTypeAsyncEnum[\"PageTypeUpdated\"]=\"PAGE_TYPE_UPDATED\";WebhookEventTypeAsyncEnum[\"PageUpdated\"]=\"PAGE_UPDATED\";WebhookEventTypeAsyncEnum[\"PermissionGroupCreated\"]=\"PERMISSION_GROUP_CREATED\";WebhookEventTypeAsyncEnum[\"PermissionGroupDeleted\"]=\"PERMISSION_GROUP_DELETED\";WebhookEventTypeAsyncEnum[\"PermissionGroupUpdated\"]=\"PERMISSION_GROUP_UPDATED\";WebhookEventTypeAsyncEnum[\"ProductCreated\"]=\"PRODUCT_CREATED\";WebhookEventTypeAsyncEnum[\"ProductDeleted\"]=\"PRODUCT_DELETED\";WebhookEventTypeAsyncEnum[\"ProductMetadataUpdated\"]=\"PRODUCT_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"ProductUpdated\"]=\"PRODUCT_UPDATED\";WebhookEventTypeAsyncEnum[\"ProductVariantBackInStock\"]=\"PRODUCT_VARIANT_BACK_IN_STOCK\";WebhookEventTypeAsyncEnum[\"ProductVariantCreated\"]=\"PRODUCT_VARIANT_CREATED\";WebhookEventTypeAsyncEnum[\"ProductVariantDeleted\"]=\"PRODUCT_VARIANT_DELETED\";WebhookEventTypeAsyncEnum[\"ProductVariantMetadataUpdated\"]=\"PRODUCT_VARIANT_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"ProductVariantOutOfStock\"]=\"PRODUCT_VARIANT_OUT_OF_STOCK\";WebhookEventTypeAsyncEnum[\"ProductVariantStockUpdated\"]=\"PRODUCT_VARIANT_STOCK_UPDATED\";WebhookEventTypeAsyncEnum[\"ProductVariantUpdated\"]=\"PRODUCT_VARIANT_UPDATED\";WebhookEventTypeAsyncEnum[\"SaleCreated\"]=\"SALE_CREATED\";WebhookEventTypeAsyncEnum[\"SaleDeleted\"]=\"SALE_DELETED\";WebhookEventTypeAsyncEnum[\"SaleToggle\"]=\"SALE_TOGGLE\";WebhookEventTypeAsyncEnum[\"SaleUpdated\"]=\"SALE_UPDATED\";WebhookEventTypeAsyncEnum[\"ShippingPriceCreated\"]=\"SHIPPING_PRICE_CREATED\";WebhookEventTypeAsyncEnum[\"ShippingPriceDeleted\"]=\"SHIPPING_PRICE_DELETED\";WebhookEventTypeAsyncEnum[\"ShippingPriceUpdated\"]=\"SHIPPING_PRICE_UPDATED\";WebhookEventTypeAsyncEnum[\"ShippingZoneCreated\"]=\"SHIPPING_ZONE_CREATED\";WebhookEventTypeAsyncEnum[\"ShippingZoneDeleted\"]=\"SHIPPING_ZONE_DELETED\";WebhookEventTypeAsyncEnum[\"ShippingZoneMetadataUpdated\"]=\"SHIPPING_ZONE_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"ShippingZoneUpdated\"]=\"SHIPPING_ZONE_UPDATED\";WebhookEventTypeAsyncEnum[\"StaffCreated\"]=\"STAFF_CREATED\";WebhookEventTypeAsyncEnum[\"StaffDeleted\"]=\"STAFF_DELETED\";WebhookEventTypeAsyncEnum[\"StaffUpdated\"]=\"STAFF_UPDATED\";WebhookEventTypeAsyncEnum[\"TransactionActionRequest\"]=\"TRANSACTION_ACTION_REQUEST\";WebhookEventTypeAsyncEnum[\"TransactionItemMetadataUpdated\"]=\"TRANSACTION_ITEM_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"TranslationCreated\"]=\"TRANSLATION_CREATED\";WebhookEventTypeAsyncEnum[\"TranslationUpdated\"]=\"TRANSLATION_UPDATED\";WebhookEventTypeAsyncEnum[\"VoucherCreated\"]=\"VOUCHER_CREATED\";WebhookEventTypeAsyncEnum[\"VoucherDeleted\"]=\"VOUCHER_DELETED\";WebhookEventTypeAsyncEnum[\"VoucherMetadataUpdated\"]=\"VOUCHER_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"VoucherUpdated\"]=\"VOUCHER_UPDATED\";WebhookEventTypeAsyncEnum[\"WarehouseCreated\"]=\"WAREHOUSE_CREATED\";WebhookEventTypeAsyncEnum[\"WarehouseDeleted\"]=\"WAREHOUSE_DELETED\";WebhookEventTypeAsyncEnum[\"WarehouseMetadataUpdated\"]=\"WAREHOUSE_METADATA_UPDATED\";WebhookEventTypeAsyncEnum[\"WarehouseUpdated\"]=\"WAREHOUSE_UPDATED\";})(WebhookEventTypeAsyncEnum||(WebhookEventTypeAsyncEnum={}));let WebhookEventTypeEnum;/** Enum determining type of webhook. */(function(WebhookEventTypeEnum){WebhookEventTypeEnum[\"AddressCreated\"]=\"ADDRESS_CREATED\";WebhookEventTypeEnum[\"AddressDeleted\"]=\"ADDRESS_DELETED\";WebhookEventTypeEnum[\"AddressUpdated\"]=\"ADDRESS_UPDATED\";WebhookEventTypeEnum[\"AnyEvents\"]=\"ANY_EVENTS\";WebhookEventTypeEnum[\"AppDeleted\"]=\"APP_DELETED\";WebhookEventTypeEnum[\"AppInstalled\"]=\"APP_INSTALLED\";WebhookEventTypeEnum[\"AppStatusChanged\"]=\"APP_STATUS_CHANGED\";WebhookEventTypeEnum[\"AppUpdated\"]=\"APP_UPDATED\";WebhookEventTypeEnum[\"AttributeCreated\"]=\"ATTRIBUTE_CREATED\";WebhookEventTypeEnum[\"AttributeDeleted\"]=\"ATTRIBUTE_DELETED\";WebhookEventTypeEnum[\"AttributeUpdated\"]=\"ATTRIBUTE_UPDATED\";WebhookEventTypeEnum[\"AttributeValueCreated\"]=\"ATTRIBUTE_VALUE_CREATED\";WebhookEventTypeEnum[\"AttributeValueDeleted\"]=\"ATTRIBUTE_VALUE_DELETED\";WebhookEventTypeEnum[\"AttributeValueUpdated\"]=\"ATTRIBUTE_VALUE_UPDATED\";WebhookEventTypeEnum[\"CategoryCreated\"]=\"CATEGORY_CREATED\";WebhookEventTypeEnum[\"CategoryDeleted\"]=\"CATEGORY_DELETED\";WebhookEventTypeEnum[\"CategoryUpdated\"]=\"CATEGORY_UPDATED\";WebhookEventTypeEnum[\"ChannelCreated\"]=\"CHANNEL_CREATED\";WebhookEventTypeEnum[\"ChannelDeleted\"]=\"CHANNEL_DELETED\";WebhookEventTypeEnum[\"ChannelStatusChanged\"]=\"CHANNEL_STATUS_CHANGED\";WebhookEventTypeEnum[\"ChannelUpdated\"]=\"CHANNEL_UPDATED\";WebhookEventTypeEnum[\"CheckoutCalculateTaxes\"]=\"CHECKOUT_CALCULATE_TAXES\";WebhookEventTypeEnum[\"CheckoutCreated\"]=\"CHECKOUT_CREATED\";WebhookEventTypeEnum[\"CheckoutFilterShippingMethods\"]=\"CHECKOUT_FILTER_SHIPPING_METHODS\";WebhookEventTypeEnum[\"CheckoutMetadataUpdated\"]=\"CHECKOUT_METADATA_UPDATED\";WebhookEventTypeEnum[\"CheckoutUpdated\"]=\"CHECKOUT_UPDATED\";WebhookEventTypeEnum[\"CollectionCreated\"]=\"COLLECTION_CREATED\";WebhookEventTypeEnum[\"CollectionDeleted\"]=\"COLLECTION_DELETED\";WebhookEventTypeEnum[\"CollectionMetadataUpdated\"]=\"COLLECTION_METADATA_UPDATED\";WebhookEventTypeEnum[\"CollectionUpdated\"]=\"COLLECTION_UPDATED\";WebhookEventTypeEnum[\"CustomerCreated\"]=\"CUSTOMER_CREATED\";WebhookEventTypeEnum[\"CustomerDeleted\"]=\"CUSTOMER_DELETED\";WebhookEventTypeEnum[\"CustomerMetadataUpdated\"]=\"CUSTOMER_METADATA_UPDATED\";WebhookEventTypeEnum[\"CustomerUpdated\"]=\"CUSTOMER_UPDATED\";WebhookEventTypeEnum[\"DraftOrderCreated\"]=\"DRAFT_ORDER_CREATED\";WebhookEventTypeEnum[\"DraftOrderDeleted\"]=\"DRAFT_ORDER_DELETED\";WebhookEventTypeEnum[\"DraftOrderUpdated\"]=\"DRAFT_ORDER_UPDATED\";WebhookEventTypeEnum[\"FulfillmentApproved\"]=\"FULFILLMENT_APPROVED\";WebhookEventTypeEnum[\"FulfillmentCanceled\"]=\"FULFILLMENT_CANCELED\";WebhookEventTypeEnum[\"FulfillmentCreated\"]=\"FULFILLMENT_CREATED\";WebhookEventTypeEnum[\"FulfillmentMetadataUpdated\"]=\"FULFILLMENT_METADATA_UPDATED\";WebhookEventTypeEnum[\"GiftCardCreated\"]=\"GIFT_CARD_CREATED\";WebhookEventTypeEnum[\"GiftCardDeleted\"]=\"GIFT_CARD_DELETED\";WebhookEventTypeEnum[\"GiftCardMetadataUpdated\"]=\"GIFT_CARD_METADATA_UPDATED\";WebhookEventTypeEnum[\"GiftCardStatusChanged\"]=\"GIFT_CARD_STATUS_CHANGED\";WebhookEventTypeEnum[\"GiftCardUpdated\"]=\"GIFT_CARD_UPDATED\";WebhookEventTypeEnum[\"InvoiceDeleted\"]=\"INVOICE_DELETED\";WebhookEventTypeEnum[\"InvoiceRequested\"]=\"INVOICE_REQUESTED\";WebhookEventTypeEnum[\"InvoiceSent\"]=\"INVOICE_SENT\";WebhookEventTypeEnum[\"MenuCreated\"]=\"MENU_CREATED\";WebhookEventTypeEnum[\"MenuDeleted\"]=\"MENU_DELETED\";WebhookEventTypeEnum[\"MenuItemCreated\"]=\"MENU_ITEM_CREATED\";WebhookEventTypeEnum[\"MenuItemDeleted\"]=\"MENU_ITEM_DELETED\";WebhookEventTypeEnum[\"MenuItemUpdated\"]=\"MENU_ITEM_UPDATED\";WebhookEventTypeEnum[\"MenuUpdated\"]=\"MENU_UPDATED\";WebhookEventTypeEnum[\"NotifyUser\"]=\"NOTIFY_USER\";WebhookEventTypeEnum[\"Observability\"]=\"OBSERVABILITY\";WebhookEventTypeEnum[\"OrderCalculateTaxes\"]=\"ORDER_CALCULATE_TAXES\";WebhookEventTypeEnum[\"OrderCancelled\"]=\"ORDER_CANCELLED\";WebhookEventTypeEnum[\"OrderConfirmed\"]=\"ORDER_CONFIRMED\";WebhookEventTypeEnum[\"OrderCreated\"]=\"ORDER_CREATED\";WebhookEventTypeEnum[\"OrderFilterShippingMethods\"]=\"ORDER_FILTER_SHIPPING_METHODS\";WebhookEventTypeEnum[\"OrderFulfilled\"]=\"ORDER_FULFILLED\";WebhookEventTypeEnum[\"OrderFullyPaid\"]=\"ORDER_FULLY_PAID\";WebhookEventTypeEnum[\"OrderMetadataUpdated\"]=\"ORDER_METADATA_UPDATED\";WebhookEventTypeEnum[\"OrderUpdated\"]=\"ORDER_UPDATED\";WebhookEventTypeEnum[\"PageCreated\"]=\"PAGE_CREATED\";WebhookEventTypeEnum[\"PageDeleted\"]=\"PAGE_DELETED\";WebhookEventTypeEnum[\"PageTypeCreated\"]=\"PAGE_TYPE_CREATED\";WebhookEventTypeEnum[\"PageTypeDeleted\"]=\"PAGE_TYPE_DELETED\";WebhookEventTypeEnum[\"PageTypeUpdated\"]=\"PAGE_TYPE_UPDATED\";WebhookEventTypeEnum[\"PageUpdated\"]=\"PAGE_UPDATED\";WebhookEventTypeEnum[\"PaymentAuthorize\"]=\"PAYMENT_AUTHORIZE\";WebhookEventTypeEnum[\"PaymentCapture\"]=\"PAYMENT_CAPTURE\";WebhookEventTypeEnum[\"PaymentConfirm\"]=\"PAYMENT_CONFIRM\";WebhookEventTypeEnum[\"PaymentListGateways\"]=\"PAYMENT_LIST_GATEWAYS\";WebhookEventTypeEnum[\"PaymentProcess\"]=\"PAYMENT_PROCESS\";WebhookEventTypeEnum[\"PaymentRefund\"]=\"PAYMENT_REFUND\";WebhookEventTypeEnum[\"PaymentVoid\"]=\"PAYMENT_VOID\";WebhookEventTypeEnum[\"PermissionGroupCreated\"]=\"PERMISSION_GROUP_CREATED\";WebhookEventTypeEnum[\"PermissionGroupDeleted\"]=\"PERMISSION_GROUP_DELETED\";WebhookEventTypeEnum[\"PermissionGroupUpdated\"]=\"PERMISSION_GROUP_UPDATED\";WebhookEventTypeEnum[\"ProductCreated\"]=\"PRODUCT_CREATED\";WebhookEventTypeEnum[\"ProductDeleted\"]=\"PRODUCT_DELETED\";WebhookEventTypeEnum[\"ProductMetadataUpdated\"]=\"PRODUCT_METADATA_UPDATED\";WebhookEventTypeEnum[\"ProductUpdated\"]=\"PRODUCT_UPDATED\";WebhookEventTypeEnum[\"ProductVariantBackInStock\"]=\"PRODUCT_VARIANT_BACK_IN_STOCK\";WebhookEventTypeEnum[\"ProductVariantCreated\"]=\"PRODUCT_VARIANT_CREATED\";WebhookEventTypeEnum[\"ProductVariantDeleted\"]=\"PRODUCT_VARIANT_DELETED\";WebhookEventTypeEnum[\"ProductVariantMetadataUpdated\"]=\"PRODUCT_VARIANT_METADATA_UPDATED\";WebhookEventTypeEnum[\"ProductVariantOutOfStock\"]=\"PRODUCT_VARIANT_OUT_OF_STOCK\";WebhookEventTypeEnum[\"ProductVariantStockUpdated\"]=\"PRODUCT_VARIANT_STOCK_UPDATED\";WebhookEventTypeEnum[\"ProductVariantUpdated\"]=\"PRODUCT_VARIANT_UPDATED\";WebhookEventTypeEnum[\"SaleCreated\"]=\"SALE_CREATED\";WebhookEventTypeEnum[\"SaleDeleted\"]=\"SALE_DELETED\";WebhookEventTypeEnum[\"SaleToggle\"]=\"SALE_TOGGLE\";WebhookEventTypeEnum[\"SaleUpdated\"]=\"SALE_UPDATED\";WebhookEventTypeEnum[\"ShippingListMethodsForCheckout\"]=\"SHIPPING_LIST_METHODS_FOR_CHECKOUT\";WebhookEventTypeEnum[\"ShippingPriceCreated\"]=\"SHIPPING_PRICE_CREATED\";WebhookEventTypeEnum[\"ShippingPriceDeleted\"]=\"SHIPPING_PRICE_DELETED\";WebhookEventTypeEnum[\"ShippingPriceUpdated\"]=\"SHIPPING_PRICE_UPDATED\";WebhookEventTypeEnum[\"ShippingZoneCreated\"]=\"SHIPPING_ZONE_CREATED\";WebhookEventTypeEnum[\"ShippingZoneDeleted\"]=\"SHIPPING_ZONE_DELETED\";WebhookEventTypeEnum[\"ShippingZoneMetadataUpdated\"]=\"SHIPPING_ZONE_METADATA_UPDATED\";WebhookEventTypeEnum[\"ShippingZoneUpdated\"]=\"SHIPPING_ZONE_UPDATED\";WebhookEventTypeEnum[\"StaffCreated\"]=\"STAFF_CREATED\";WebhookEventTypeEnum[\"StaffDeleted\"]=\"STAFF_DELETED\";WebhookEventTypeEnum[\"StaffUpdated\"]=\"STAFF_UPDATED\";WebhookEventTypeEnum[\"TransactionActionRequest\"]=\"TRANSACTION_ACTION_REQUEST\";WebhookEventTypeEnum[\"TransactionItemMetadataUpdated\"]=\"TRANSACTION_ITEM_METADATA_UPDATED\";WebhookEventTypeEnum[\"TranslationCreated\"]=\"TRANSLATION_CREATED\";WebhookEventTypeEnum[\"TranslationUpdated\"]=\"TRANSLATION_UPDATED\";WebhookEventTypeEnum[\"VoucherCreated\"]=\"VOUCHER_CREATED\";WebhookEventTypeEnum[\"VoucherDeleted\"]=\"VOUCHER_DELETED\";WebhookEventTypeEnum[\"VoucherMetadataUpdated\"]=\"VOUCHER_METADATA_UPDATED\";WebhookEventTypeEnum[\"VoucherUpdated\"]=\"VOUCHER_UPDATED\";WebhookEventTypeEnum[\"WarehouseCreated\"]=\"WAREHOUSE_CREATED\";WebhookEventTypeEnum[\"WarehouseDeleted\"]=\"WAREHOUSE_DELETED\";WebhookEventTypeEnum[\"WarehouseMetadataUpdated\"]=\"WAREHOUSE_METADATA_UPDATED\";WebhookEventTypeEnum[\"WarehouseUpdated\"]=\"WAREHOUSE_UPDATED\";})(WebhookEventTypeEnum||(WebhookEventTypeEnum={}));let WebhookEventTypeSyncEnum;/** An enumeration. */(function(WebhookEventTypeSyncEnum){WebhookEventTypeSyncEnum[\"CheckoutCalculateTaxes\"]=\"CHECKOUT_CALCULATE_TAXES\";WebhookEventTypeSyncEnum[\"CheckoutFilterShippingMethods\"]=\"CHECKOUT_FILTER_SHIPPING_METHODS\";WebhookEventTypeSyncEnum[\"OrderCalculateTaxes\"]=\"ORDER_CALCULATE_TAXES\";WebhookEventTypeSyncEnum[\"OrderFilterShippingMethods\"]=\"ORDER_FILTER_SHIPPING_METHODS\";WebhookEventTypeSyncEnum[\"PaymentAuthorize\"]=\"PAYMENT_AUTHORIZE\";WebhookEventTypeSyncEnum[\"PaymentCapture\"]=\"PAYMENT_CAPTURE\";WebhookEventTypeSyncEnum[\"PaymentConfirm\"]=\"PAYMENT_CONFIRM\";WebhookEventTypeSyncEnum[\"PaymentListGateways\"]=\"PAYMENT_LIST_GATEWAYS\";WebhookEventTypeSyncEnum[\"PaymentProcess\"]=\"PAYMENT_PROCESS\";WebhookEventTypeSyncEnum[\"PaymentRefund\"]=\"PAYMENT_REFUND\";WebhookEventTypeSyncEnum[\"PaymentVoid\"]=\"PAYMENT_VOID\";WebhookEventTypeSyncEnum[\"ShippingListMethodsForCheckout\"]=\"SHIPPING_LIST_METHODS_FOR_CHECKOUT\";})(WebhookEventTypeSyncEnum||(WebhookEventTypeSyncEnum={}));let WebhookSampleEventTypeEnum;/**\r\n * Trigger a webhook event. Supports a single event (the first, if multiple provided in the `webhook.subscription_query`). Requires permission relevant to processed event. Successfully delivered webhook returns `delivery` with status='PENDING' and empty payload.\r\n *\r\n * Added in Saleor 3.11.\r\n *\r\n * Note: this API is currently in Feature Preview and can be subject to changes at later point.\r\n *\r\n * Requires one of the following permissions: AUTHENTICATED_STAFF_USER.\r\n */(function(WebhookSampleEventTypeEnum){WebhookSampleEventTypeEnum[\"AddressCreated\"]=\"ADDRESS_CREATED\";WebhookSampleEventTypeEnum[\"AddressDeleted\"]=\"ADDRESS_DELETED\";WebhookSampleEventTypeEnum[\"AddressUpdated\"]=\"ADDRESS_UPDATED\";WebhookSampleEventTypeEnum[\"AppDeleted\"]=\"APP_DELETED\";WebhookSampleEventTypeEnum[\"AppInstalled\"]=\"APP_INSTALLED\";WebhookSampleEventTypeEnum[\"AppStatusChanged\"]=\"APP_STATUS_CHANGED\";WebhookSampleEventTypeEnum[\"AppUpdated\"]=\"APP_UPDATED\";WebhookSampleEventTypeEnum[\"AttributeCreated\"]=\"ATTRIBUTE_CREATED\";WebhookSampleEventTypeEnum[\"AttributeDeleted\"]=\"ATTRIBUTE_DELETED\";WebhookSampleEventTypeEnum[\"AttributeUpdated\"]=\"ATTRIBUTE_UPDATED\";WebhookSampleEventTypeEnum[\"AttributeValueCreated\"]=\"ATTRIBUTE_VALUE_CREATED\";WebhookSampleEventTypeEnum[\"AttributeValueDeleted\"]=\"ATTRIBUTE_VALUE_DELETED\";WebhookSampleEventTypeEnum[\"AttributeValueUpdated\"]=\"ATTRIBUTE_VALUE_UPDATED\";WebhookSampleEventTypeEnum[\"CategoryCreated\"]=\"CATEGORY_CREATED\";WebhookSampleEventTypeEnum[\"CategoryDeleted\"]=\"CATEGORY_DELETED\";WebhookSampleEventTypeEnum[\"CategoryUpdated\"]=\"CATEGORY_UPDATED\";WebhookSampleEventTypeEnum[\"ChannelCreated\"]=\"CHANNEL_CREATED\";WebhookSampleEventTypeEnum[\"ChannelDeleted\"]=\"CHANNEL_DELETED\";WebhookSampleEventTypeEnum[\"ChannelStatusChanged\"]=\"CHANNEL_STATUS_CHANGED\";WebhookSampleEventTypeEnum[\"ChannelUpdated\"]=\"CHANNEL_UPDATED\";WebhookSampleEventTypeEnum[\"CheckoutCreated\"]=\"CHECKOUT_CREATED\";WebhookSampleEventTypeEnum[\"CheckoutMetadataUpdated\"]=\"CHECKOUT_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"CheckoutUpdated\"]=\"CHECKOUT_UPDATED\";WebhookSampleEventTypeEnum[\"CollectionCreated\"]=\"COLLECTION_CREATED\";WebhookSampleEventTypeEnum[\"CollectionDeleted\"]=\"COLLECTION_DELETED\";WebhookSampleEventTypeEnum[\"CollectionMetadataUpdated\"]=\"COLLECTION_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"CollectionUpdated\"]=\"COLLECTION_UPDATED\";WebhookSampleEventTypeEnum[\"CustomerCreated\"]=\"CUSTOMER_CREATED\";WebhookSampleEventTypeEnum[\"CustomerDeleted\"]=\"CUSTOMER_DELETED\";WebhookSampleEventTypeEnum[\"CustomerMetadataUpdated\"]=\"CUSTOMER_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"CustomerUpdated\"]=\"CUSTOMER_UPDATED\";WebhookSampleEventTypeEnum[\"DraftOrderCreated\"]=\"DRAFT_ORDER_CREATED\";WebhookSampleEventTypeEnum[\"DraftOrderDeleted\"]=\"DRAFT_ORDER_DELETED\";WebhookSampleEventTypeEnum[\"DraftOrderUpdated\"]=\"DRAFT_ORDER_UPDATED\";WebhookSampleEventTypeEnum[\"FulfillmentApproved\"]=\"FULFILLMENT_APPROVED\";WebhookSampleEventTypeEnum[\"FulfillmentCanceled\"]=\"FULFILLMENT_CANCELED\";WebhookSampleEventTypeEnum[\"FulfillmentCreated\"]=\"FULFILLMENT_CREATED\";WebhookSampleEventTypeEnum[\"FulfillmentMetadataUpdated\"]=\"FULFILLMENT_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"GiftCardCreated\"]=\"GIFT_CARD_CREATED\";WebhookSampleEventTypeEnum[\"GiftCardDeleted\"]=\"GIFT_CARD_DELETED\";WebhookSampleEventTypeEnum[\"GiftCardMetadataUpdated\"]=\"GIFT_CARD_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"GiftCardStatusChanged\"]=\"GIFT_CARD_STATUS_CHANGED\";WebhookSampleEventTypeEnum[\"GiftCardUpdated\"]=\"GIFT_CARD_UPDATED\";WebhookSampleEventTypeEnum[\"InvoiceDeleted\"]=\"INVOICE_DELETED\";WebhookSampleEventTypeEnum[\"InvoiceRequested\"]=\"INVOICE_REQUESTED\";WebhookSampleEventTypeEnum[\"InvoiceSent\"]=\"INVOICE_SENT\";WebhookSampleEventTypeEnum[\"MenuCreated\"]=\"MENU_CREATED\";WebhookSampleEventTypeEnum[\"MenuDeleted\"]=\"MENU_DELETED\";WebhookSampleEventTypeEnum[\"MenuItemCreated\"]=\"MENU_ITEM_CREATED\";WebhookSampleEventTypeEnum[\"MenuItemDeleted\"]=\"MENU_ITEM_DELETED\";WebhookSampleEventTypeEnum[\"MenuItemUpdated\"]=\"MENU_ITEM_UPDATED\";WebhookSampleEventTypeEnum[\"MenuUpdated\"]=\"MENU_UPDATED\";WebhookSampleEventTypeEnum[\"NotifyUser\"]=\"NOTIFY_USER\";WebhookSampleEventTypeEnum[\"Observability\"]=\"OBSERVABILITY\";WebhookSampleEventTypeEnum[\"OrderCancelled\"]=\"ORDER_CANCELLED\";WebhookSampleEventTypeEnum[\"OrderConfirmed\"]=\"ORDER_CONFIRMED\";WebhookSampleEventTypeEnum[\"OrderCreated\"]=\"ORDER_CREATED\";WebhookSampleEventTypeEnum[\"OrderFulfilled\"]=\"ORDER_FULFILLED\";WebhookSampleEventTypeEnum[\"OrderFullyPaid\"]=\"ORDER_FULLY_PAID\";WebhookSampleEventTypeEnum[\"OrderMetadataUpdated\"]=\"ORDER_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"OrderUpdated\"]=\"ORDER_UPDATED\";WebhookSampleEventTypeEnum[\"PageCreated\"]=\"PAGE_CREATED\";WebhookSampleEventTypeEnum[\"PageDeleted\"]=\"PAGE_DELETED\";WebhookSampleEventTypeEnum[\"PageTypeCreated\"]=\"PAGE_TYPE_CREATED\";WebhookSampleEventTypeEnum[\"PageTypeDeleted\"]=\"PAGE_TYPE_DELETED\";WebhookSampleEventTypeEnum[\"PageTypeUpdated\"]=\"PAGE_TYPE_UPDATED\";WebhookSampleEventTypeEnum[\"PageUpdated\"]=\"PAGE_UPDATED\";WebhookSampleEventTypeEnum[\"PermissionGroupCreated\"]=\"PERMISSION_GROUP_CREATED\";WebhookSampleEventTypeEnum[\"PermissionGroupDeleted\"]=\"PERMISSION_GROUP_DELETED\";WebhookSampleEventTypeEnum[\"PermissionGroupUpdated\"]=\"PERMISSION_GROUP_UPDATED\";WebhookSampleEventTypeEnum[\"ProductCreated\"]=\"PRODUCT_CREATED\";WebhookSampleEventTypeEnum[\"ProductDeleted\"]=\"PRODUCT_DELETED\";WebhookSampleEventTypeEnum[\"ProductMetadataUpdated\"]=\"PRODUCT_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"ProductUpdated\"]=\"PRODUCT_UPDATED\";WebhookSampleEventTypeEnum[\"ProductVariantBackInStock\"]=\"PRODUCT_VARIANT_BACK_IN_STOCK\";WebhookSampleEventTypeEnum[\"ProductVariantCreated\"]=\"PRODUCT_VARIANT_CREATED\";WebhookSampleEventTypeEnum[\"ProductVariantDeleted\"]=\"PRODUCT_VARIANT_DELETED\";WebhookSampleEventTypeEnum[\"ProductVariantMetadataUpdated\"]=\"PRODUCT_VARIANT_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"ProductVariantOutOfStock\"]=\"PRODUCT_VARIANT_OUT_OF_STOCK\";WebhookSampleEventTypeEnum[\"ProductVariantStockUpdated\"]=\"PRODUCT_VARIANT_STOCK_UPDATED\";WebhookSampleEventTypeEnum[\"ProductVariantUpdated\"]=\"PRODUCT_VARIANT_UPDATED\";WebhookSampleEventTypeEnum[\"SaleCreated\"]=\"SALE_CREATED\";WebhookSampleEventTypeEnum[\"SaleDeleted\"]=\"SALE_DELETED\";WebhookSampleEventTypeEnum[\"SaleToggle\"]=\"SALE_TOGGLE\";WebhookSampleEventTypeEnum[\"SaleUpdated\"]=\"SALE_UPDATED\";WebhookSampleEventTypeEnum[\"ShippingPriceCreated\"]=\"SHIPPING_PRICE_CREATED\";WebhookSampleEventTypeEnum[\"ShippingPriceDeleted\"]=\"SHIPPING_PRICE_DELETED\";WebhookSampleEventTypeEnum[\"ShippingPriceUpdated\"]=\"SHIPPING_PRICE_UPDATED\";WebhookSampleEventTypeEnum[\"ShippingZoneCreated\"]=\"SHIPPING_ZONE_CREATED\";WebhookSampleEventTypeEnum[\"ShippingZoneDeleted\"]=\"SHIPPING_ZONE_DELETED\";WebhookSampleEventTypeEnum[\"ShippingZoneMetadataUpdated\"]=\"SHIPPING_ZONE_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"ShippingZoneUpdated\"]=\"SHIPPING_ZONE_UPDATED\";WebhookSampleEventTypeEnum[\"StaffCreated\"]=\"STAFF_CREATED\";WebhookSampleEventTypeEnum[\"StaffDeleted\"]=\"STAFF_DELETED\";WebhookSampleEventTypeEnum[\"StaffUpdated\"]=\"STAFF_UPDATED\";WebhookSampleEventTypeEnum[\"TransactionActionRequest\"]=\"TRANSACTION_ACTION_REQUEST\";WebhookSampleEventTypeEnum[\"TransactionItemMetadataUpdated\"]=\"TRANSACTION_ITEM_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"TranslationCreated\"]=\"TRANSLATION_CREATED\";WebhookSampleEventTypeEnum[\"TranslationUpdated\"]=\"TRANSLATION_UPDATED\";WebhookSampleEventTypeEnum[\"VoucherCreated\"]=\"VOUCHER_CREATED\";WebhookSampleEventTypeEnum[\"VoucherDeleted\"]=\"VOUCHER_DELETED\";WebhookSampleEventTypeEnum[\"VoucherMetadataUpdated\"]=\"VOUCHER_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"VoucherUpdated\"]=\"VOUCHER_UPDATED\";WebhookSampleEventTypeEnum[\"WarehouseCreated\"]=\"WAREHOUSE_CREATED\";WebhookSampleEventTypeEnum[\"WarehouseDeleted\"]=\"WAREHOUSE_DELETED\";WebhookSampleEventTypeEnum[\"WarehouseMetadataUpdated\"]=\"WAREHOUSE_METADATA_UPDATED\";WebhookSampleEventTypeEnum[\"WarehouseUpdated\"]=\"WAREHOUSE_UPDATED\";})(WebhookSampleEventTypeEnum||(WebhookSampleEventTypeEnum={}));/** An enumeration. */let WebhookTriggerErrorCode;/**\r\n * Updates a webhook subscription.\r\n *\r\n * Requires one of the following permissions: MANAGE_APPS.\r\n */(function(WebhookTriggerErrorCode){WebhookTriggerErrorCode[\"GraphqlError\"]=\"GRAPHQL_ERROR\";WebhookTriggerErrorCode[\"InvalidId\"]=\"INVALID_ID\";WebhookTriggerErrorCode[\"MissingPermission\"]=\"MISSING_PERMISSION\";WebhookTriggerErrorCode[\"MissingQuery\"]=\"MISSING_QUERY\";WebhookTriggerErrorCode[\"NotFound\"]=\"NOT_FOUND\";WebhookTriggerErrorCode[\"TypeNotSupported\"]=\"TYPE_NOT_SUPPORTED\";WebhookTriggerErrorCode[\"UnableToParse\"]=\"UNABLE_TO_PARSE\";})(WebhookTriggerErrorCode||(WebhookTriggerErrorCode={}));/** An enumeration. */let WeightUnitsEnum;/** _Entity union as defined by Federation spec. */(function(WeightUnitsEnum){WeightUnitsEnum[\"G\"]=\"G\";WeightUnitsEnum[\"Kg\"]=\"KG\";WeightUnitsEnum[\"Lb\"]=\"LB\";WeightUnitsEnum[\"Oz\"]=\"OZ\";WeightUnitsEnum[\"Tonne\"]=\"TONNE\";})(WeightUnitsEnum||(WeightUnitsEnum={}));const ProductGetThreeElementsDocument=_apollo_client__WEBPACK_IMPORTED_MODULE_0__.gql`\n    query ProductGetThreeElements {\n  products(first: 5, channel: \"default-channel\") {\n    edges {\n      node {\n        id\n        name\n        description\n        thumbnail {\n          url\n        }\n      }\n    }\n  }\n}\n    `;/**\r\n * __useProductGetThreeElementsQuery__\r\n *\r\n * To run a query within a React component, call `useProductGetThreeElementsQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useProductGetThreeElementsQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useProductGetThreeElementsQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */function useProductGetThreeElementsQuery(baseOptions){const options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useQuery(ProductGetThreeElementsDocument,options);}function useProductGetThreeElementsLazyQuery(baseOptions){const options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return _apollo_client__WEBPACK_IMPORTED_MODULE_0__.useLazyQuery(ProductGetThreeElementsDocument,options);}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./saleor/api.ts\n");

/***/ }),

/***/ "@apollo/client":
/*!*********************************!*\
  !*** external "@apollo/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@apollo/client");

/***/ }),

/***/ "react-icons/ri":
/*!*********************************!*\
  !*** external "react-icons/ri" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("react-icons/ri");

/***/ }),

/***/ "react/jsx-dev-runtime":
/*!****************************************!*\
  !*** external "react/jsx-dev-runtime" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("react/jsx-dev-runtime");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("./pages/index.tsx"));
module.exports = __webpack_exports__;

})();